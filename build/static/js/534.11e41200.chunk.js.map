{"version":3,"file":"static/js/534.11e41200.chunk.js","mappings":"0LAEgDA,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAApD,MA+CMC,EAA+BD,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCnCE,EAA0BF,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;EAyB9BG,EAAwBH,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;EAyB5BI,EAAiCJ,EAAAA,EAAI;;;;;;;;;;;;;;;;EAkBrCK,EAAsBL,EAAAA,EAAI;;;;;;;;EAU1BM,EAAkCN,EAAAA,EAAI;;;;;;;uHC3J5C,MA6CA,EA7CyBO,IAAsB,IAArB,YAAEC,GAAaD,EACvC,OACEE,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,0BAAyBF,SAAA,EACtCF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAeC,MAAO,CAAEC,QAAS,OAAQC,UAAW,UAAWL,UAM5EF,EAAAA,EAAAA,KAACQ,EAAAA,GAAM,CAACC,KAAMV,EAAYW,UAAWC,KAAK,KAAKC,cAAe,KAAMC,OAAO,EAAMC,MAAM,eAEzFd,EAAAA,EAAAA,KAAA,KACEK,MAAO,CACLU,SAAU,OACVC,WAAY,MACZC,WAAY,OACZC,cAAe,OACfC,UAAW,UACXjB,SAEDH,EAAYW,aAGfV,EAAAA,EAAAA,KAACoB,EAAAA,EAAO,CAACC,OAAK,KAEdlB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAiBC,MAAO,CAAEiB,UAAW,SAAUpB,SAAA,EAC5DC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAACuB,EAAAA,EAAc,CAACC,QAAS,aAAcC,UAAY,GAAE1B,EAAY2B,cAA0C,SAA5B3B,EAAY4B,YAAuB5B,EAAY4B,YAAY,MAAM5B,EAAY6B,eAC5J5B,EAAAA,EAAAA,KAACuB,EAAAA,EAAc,CAACC,QAAS,WAAYC,UAAW1B,EAAY8B,YAC5D7B,EAAAA,EAAAA,KAACuB,EAAAA,EAAc,CAACC,QAAS,iBAAkBC,UAAW1B,EAAY+B,kBAClE9B,EAAAA,EAAAA,KAACuB,EAAAA,EAAc,CAACC,QAAS,mBAAoBC,UAAW1B,EAAYgC,oBACpE/B,EAAAA,EAAAA,KAACuB,EAAAA,EAAc,CAACC,QAAS,SAAUC,UAAkC,MAAvB1B,EAAYiC,OAAiB,OAAS,YACpFhC,EAAAA,EAAAA,KAACuB,EAAAA,EAAc,CAACC,QAAS,SAAUC,UAAW1B,EAAYkC,aAG5DjC,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAAA,KAAGK,MAAO,CAAEU,SAAU,OAAQE,WAAY,mBAI/C,E,iHCrCP,MAuGA,EAvGoBnB,IAAwC,IAAvC,iBAAEoC,EAAgB,YAAEnC,GAAaD,EACpD,MAAOqC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,IAE3BC,EAAU,CACd,CAAEC,GAAI,MAAO9B,KAAM,MAAO+B,SAAWC,GAAQA,EAAIC,IAAKC,UAAU,GAChE,CACEJ,GAAI,eACJ9B,KAAM,cACN+B,SAAWC,GAAQA,EAAIG,aACvBD,UAAU,GAQZ,CACEJ,GAAI,oBACJ9B,KAAM,SACN+B,SAAWC,IAEPzC,EAAAA,EAAAA,KAAA,OAAAE,SAC6B,YAA1BuC,EAAII,mBACH7C,EAAAA,EAAAA,KAAC8C,EAAAA,EAAI,CAACC,MAAO,WAAYjC,MAAM,UAAUkC,QAAQ,cAEjDhD,EAAAA,EAAAA,KAAC8C,EAAAA,EAAI,CAACC,MAAO,SAAUjC,MAAM,QAAQkC,QAAQ,eAKrDL,UAAU,GAEZ,CACEJ,GAAI,kBACJ9B,KAAM,OACN+B,SAAWC,GAAQA,EAAIQ,gBACvBN,UAAU,IAKRO,GAA8BC,EAAAA,EAAAA,GAASxD,EAAAA,GAAgC,CAC3EyD,UAAW,CAAEC,cAAetD,EAAYuD,QAsB1C,OAnBAC,EAAAA,EAAAA,YAAU,KACR,GAAIL,EAA4BM,KAAM,CACpC,MAAMC,EACJP,EAA4BM,KAAKE,2BAA2BD,WACxDtB,EAAOsB,EACTA,EAAWE,KAAI,CAACC,EAAQC,KAAK,CAC3BnB,IAAKmB,EAAQ,EACbC,cAAeF,EAAOE,cACtBC,MAAOH,EAAOI,WACdpB,aAAcgB,EAAOK,YACrBC,gBAAiBN,EAAOM,gBACxBrB,kBAAmBe,EAAOf,kBAC1BI,gBAAiBW,EAAOX,oBAE1B,GACJb,EAAQD,EACV,IACC,CAACe,EAA4BM,KAAMtB,KAGpClC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGgD,EAA4BM,MAC3BxD,EAAAA,EAAAA,KAAA,OAAAE,SACGgD,EAA4BM,KAAKE,2BAC/BD,YACHP,EAA4BM,KAAKE,2BAA2BD,WACzDU,OAAS,GACVnE,EAAAA,EAAAA,KAACoE,EAAAA,EAAK,CACJ9B,QAASA,EACTkB,KAAMrB,EACNkC,aApCS,eAqCTtE,YAAaA,KAGfC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACvBF,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEU,SAAU,QAASb,SAAC,0BAIrCgD,EAA4BoB,SAC9BtE,EAAAA,EAAAA,KAACuE,EAAAA,EAAU,CACTzD,MAAM,UACNH,KAAM,GACNN,MAAO,CACLC,QAAS,OACTkE,eAAgB,aAIpBxE,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACvBF,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEU,SAAU,QAASb,SAAC,yBAGpC,EC3BP,EA9EmBJ,IAA4B,IAA3B,kBAAE2E,GAAmB3E,EACvC,MAsDMqC,EAAOsC,EACTA,EAAkBd,KAAI,CAACe,EAAIb,KAAK,CAC9BnB,IAAKmB,EAAQ,EACbc,MAAOD,EAAGC,MACVC,QAASF,EAAGE,QACZC,eAAgBH,EAAGG,eACnBC,iBAAkBJ,EAAGI,iBACrB7C,OAAQyC,EAAGzC,OACX8C,aAAcL,EAAGK,aACjBC,aAAcN,EAAGM,aACjBlD,eAAgB4C,EAAG5C,eACnBmD,aAAcP,EAAGO,aACjBC,aAAcR,EAAGQ,iBAEnB,GAEJ,OACElF,EAAAA,EAAAA,KAAA,OAAAE,UACEF,EAAAA,EAAAA,KAACoE,EAAAA,EAAK,CAAC9B,QAxEK,CACd,CAAEC,GAAI,MAAO9B,KAAM,MAAO+B,SAAWC,GAAQA,EAAIC,IAAKC,UAAU,GAOhE,CACEJ,GAAI,iBACJ9B,KAAM,iBACN+B,SAAWC,GAAQA,EAAIoC,eACvBlC,UAAU,GAQZ,CACEJ,GAAI,SACJ9B,KAAM,SACN+B,SAAWC,GAAQA,EAAIR,OACvBU,UAAU,GAEZ,CACEJ,GAAI,eACJ9B,KAAM,eACN+B,SAAWC,GAAQA,EAAIsC,aACvBpC,UAAU,GAQZ,CACEJ,GAAI,iBACJ9B,KAAM,iBACN+B,SAAWC,GAAQA,EAAIX,eACvBa,UAAU,GAEZ,CACEJ,GAAI,eACJ9B,KAAM,eACN+B,SAAWC,GAAQA,EAAIyC,aACvBvC,UAAU,IAwBea,KAAMrB,EAAMkC,aApBpB,eAqBb,ECtEV,SAASc,EAAeC,GACtB,MAAM,SAAElF,EAAQ,MAAEmF,EAAK,MAAExB,KAAUyB,GAAUF,EAE7C,OACEpF,EAAAA,EAAAA,KAAA,OACEuF,KAAK,WACLC,OAAQH,IAAUxB,EAClBtB,GAAK,mBAAkBsB,IACvB,kBAAkB,cAAaA,OAC3ByB,EAAKpF,SAERmF,IAAUxB,IACT7D,EAAAA,EAAAA,KAACyF,EAAAA,EAAG,CAACC,GAAI,CAAEC,EAAG,GAAIzF,UAChBF,EAAAA,EAAAA,KAAC4F,EAAAA,EAAU,CAAA1F,SAAEA,OAKvB,CAQA,MAoDA,EApDuBJ,IAIhB,IAJiB,iBACtBoC,EAAgB,YAChBnC,EAAW,kBACX0E,GACD3E,EAEC+F,QAAQC,IAAIrB,GACZ,MAAOY,EAAOU,IAAY1D,EAAAA,EAAAA,UAAS,GAInC,OACErC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEC,EAAAA,EAAAA,MAACsF,EAAAA,EAAG,CAACC,GAAI,CAAEM,MAAO,QAAS9F,SAAA,EACzBF,EAAAA,EAAAA,KAACyF,EAAAA,EAAG,CACFC,GAAI,CACFO,aAAc,EACdC,YAAa,UACbC,oBAAqB,MACrBC,qBAAsB,MACtBC,gBAAiB,0BACjBnG,UAEFC,EAAAA,EAAAA,MAACmG,EAAAA,EAAI,CACHjB,MAAOA,EACPkB,SAjBWC,CAACC,EAAOC,KAC3BX,EAASW,EAAS,EAiBV,aAAW,qBACXC,UAAU,UAASzG,SAAA,EAEnBF,EAAAA,EAAAA,KAAC4G,EAAAA,EAAG,CAAC7D,MAAM,yBAAyB8D,EAAAA,EAAAA,IAAU,MAC9C7G,EAAAA,EAAAA,KAAC4G,EAAAA,EAAG,CAAC7D,MAAM,4BAA4B8D,EAAAA,EAAAA,IAAU,WAIrD7G,EAAAA,EAAAA,KAACmF,EAAc,CAACE,MAAOA,EAAOxB,MAAO,EAAE3D,UACrCF,EAAAA,EAAAA,KAAC8G,EAAO,CACN5E,iBAAkBA,EAClBnC,YAAaA,EACb0E,kBAAmBA,OAGvBzE,EAAAA,EAAAA,KAACmF,EAAc,CAACE,MAAOA,EAAOxB,MAAO,EAAE3D,UACrCF,EAAAA,EAAAA,KAAC+G,EAAW,CACV7E,iBAAkBA,EAClBnC,YAAaA,UAIlB,E,qCCrEP,MA2EA,EA3EmBiH,KAAO,IAADC,EACvB,MAGOxC,EAAmByC,IAAwB7E,EAAAA,EAAAA,UAAS,IAGrD8E,GAASC,EAAAA,EAAAA,MACT,GAAE7E,GAAO4E,GAGP7C,QAAS+C,EAAoBC,MAAOC,EAAkB/D,KAAMgE,IAAoBrE,EAAAA,EAAAA,GAASzD,EAAAA,GAAuB,CACtH0D,UAAW,CAAEb,SAIP+B,QAASmD,EAAmBH,MAAOI,EAAiBlE,KAAMmE,IAAmBxE,EAAAA,EAAAA,GAASyE,EAAAA,GAA0B,CACtHxE,UAAW,CAAEyE,OAAQtF,GACrBuF,MAAOvF,IAWT,IARAgB,EAAAA,EAAAA,YAAU,KACR,GAAIoE,EAAgB,CAClB,MAAMI,EAAaJ,EAAeK,2BAA2BD,WAC7Db,EAAqBa,EACvB,IACC,CAACJ,IAGAN,GAAsBI,EACxB,OAAOzH,EAAAA,EAAAA,KAACiI,EAAAA,EAAa,IAGvB,GAAIV,GAAoBG,EACtB,OACE1H,EAAAA,EAAAA,KAAA,OAAKI,UAAU,mBAAkBF,UAC/BF,EAAAA,EAAAA,KAAC4F,EAAAA,EAAU,CAAC9E,MAAM,QAAOZ,UACN,OAAhBqH,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBW,WAA0B,OAAfR,QAAe,IAAfA,OAAe,EAAfA,EAAiBQ,aAMvD,MAAMC,EAAqC,OAAfX,QAAe,IAAfA,GAAoC,QAArBP,EAAfO,EAAiBY,2BAAmB,IAAAnB,OAArB,EAAfA,EAAsClH,YAElE,OACEI,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAACqI,EAAAA,EAAU,CACT5H,KAAK,UACL6H,UAhDc,eAiDdC,OAhDoB,kBAkDtBvI,EAAAA,EAAAA,KAAA,OAAKI,UAAU,mBAAkBF,SAC9BiI,GACChI,EAAAA,EAAAA,MAAAF,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,uBAAsBF,UACnCF,EAAAA,EAAAA,KAACwI,EAAgB,CAACzI,YAAaoI,OAEjCnI,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sBAAqBF,UAClCF,EAAAA,EAAAA,KAACyI,EAAc,CACb1I,YAAaoI,EACb1D,kBAAmBA,UAKzBzE,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACvBF,EAAAA,EAAAA,KAAA,MAAIK,MAAO,CAAEU,SAAU,QAASb,SAAC,kCAItC,C","sources":["graphql/queries/participantsRequests.js","features/participants/partdetail/Partscontentview.js","features/participants/partdetail/Table/attendtable.js","features/participants/partdetail/Table/fvtable.js","features/participants/partdetail/Partstableview.js","features/participants/partdetail/Partdetail.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nconst GET_PARTICIPANTS_ATTENDANCE_PER_PROJECT = gql`\n  query GetParticipantsAttendanceByProject($projectId: String!) {\n    getParticipantsByProject(project_id: $projectId) {\n      message\n      status\n      participants {\n        p_id\n        first_name\n        middle_name\n        last_name\n        gender\n        age\n        coffee_tree_numbers\n        coop_membership_number\n        phone_number\n        hh_number\n        ffg_id\n        location\n        tns_id\n        status\n        farmer_trainer\n        business_advisor\n        project_name\n        training_group\n        household_id\n        primary_household_member\n        create_in_commcare\n      }\n    }\n    getAttendances(project_id: $projectId) {\n      message\n      status\n      attendance {\n        attendance_id\n        participant_id\n        attendance_name\n        attendance_date\n        attendance_status\n        session_id\n        module_name\n        module_number\n        module_id\n      }\n    }\n  }\n`;\n\nconst GET_PARTICIPANTS_PER_PROJECT = gql`\n  query GetParticipantsAttendanceByProject($projectId: String!) {\n    getParticipantsByProject(project_id: $projectId) {\n      message\n      status\n      participants {\n        p_id\n        first_name\n        middle_name\n        last_name\n        gender\n        age\n        coffee_tree_numbers\n        number_of_coffee_plots\n        coop_membership_number\n        phone_number\n        hh_number\n        ffg_id\n        location\n        tns_id\n        status\n        farmer_trainer\n        business_advisor\n        project_name\n        training_group\n        household_id\n        primary_household_member\n        create_in_commcare\n      }\n    }\n  }\n`;\n\nconst GET_PARTICIPANTS_PER_TG = gql`\n  query GetParticipantsByGroup($tgId: String!) {\n    getParticipantsByGroup(tg_id: $tgId) {\n      message\n      status\n      participants {\n        p_id\n        first_name\n        middle_name\n        last_name\n        gender\n        location\n        tns_id\n        status\n        farmer_trainer\n        business_advisor\n        project_name\n        training_group\n        household_id\n        primary_household_member\n      }\n    }\n  }\n`;\n\nconst GET_PARTICIPANT_BY_ID = gql`\n  query GetParticipantsById($id: String!) {\n    getParticipantsById(p_id: $id) {\n      message\n      status\n      participant {\n        p_id\n        first_name\n        middle_name\n        last_name\n        gender\n        location\n        tns_id\n        status\n        farmer_trainer\n        business_advisor\n        project_name\n        training_group\n        household_id\n        primary_household_member\n      }\n    }\n  }\n`;\n\nconst GET_ATTENDANCE_PER_PARTICIPANT = gql`\n  query GetAttendanceByParticipant($participantId: String!) {\n    getAttendanceByParticipant(participant_id: $participantId) {\n      message\n      status\n      attendance {\n        attendance_id\n        participant_id\n        attendance_name\n        attendance_date\n        attendance_status\n        module_name\n        session_id\n      }\n    }\n  }\n`;\n\nconst UPLOAD_PARTICIPANTS = gql`\n  mutation UploadParticipants($partsFile: Upload!) {\n    uploadParticipants(parts_file: $partsFile) {\n      message\n      status\n      file\n    }\n  }\n`;\n\nconst SYNC_PARTICIPANTS_WITH_COMMCARE = gql`\n  mutation SyncParticipantsWithCOMMCARE($projectId: String!) {\n    syncParticipantsWithCOMMCARE(project_id: $projectId) {\n      message\n      status\n    }\n  }\n`;\n\nexport {\n  GET_PARTICIPANTS_PER_PROJECT,\n  GET_PARTICIPANTS_PER_TG,\n  GET_ATTENDANCE_PER_PARTICIPANT,\n  UPLOAD_PARTICIPANTS,\n  SYNC_PARTICIPANTS_WITH_COMMCARE,\n  GET_PARTICIPANTS_ATTENDANCE_PER_PROJECT,\n  GET_PARTICIPANT_BY_ID\n};\n","import React from 'react'\nimport Detailscontent from '../../training-group/tgdetail/Detailscontent'\nimport { Divider } from '@mui/material'\nimport Avatar from 'react-avatar'\n\nconst Partscontentview = ({ participant }) => {\n  return (\n    <>\n      <div className='partscontent__container'>\n        <div className='parts__image' style={{ display: 'flex', alignSelf: 'center' }}>\n          {/* <Avatar\n            alt=\"farmer-image\"\n            src={farmerimage}\n            sx={{ width: 60, height: 60 }}\n          /> */}\n          <Avatar name={participant.full_name} size='50' textSizeRatio={1.75} round={true} color='#8A92A6' />\n        </div>\n        <p\n          style={{\n            fontSize: '14px',\n            fontWeight: '500',\n            paddingTop: '15px',\n            paddingBottom: '15px',\n            textAlign: 'center'\n          }}\n        >\n          {participant.full_name}\n        </p>\n\n        <Divider light />\n\n        <div className='parts__details' style={{ marginTop: ' 40px' }}>\n          <div>\n            <Detailscontent heading={'Full Names'} paragraph={`${participant.first_name} ${participant.middle_name !== \"null\"?participant.middle_name:\"\"} ${participant.last_name}`} />\n            <Detailscontent heading={'Location'} paragraph={participant.location} />\n            <Detailscontent heading={'Farmer Trainer'} paragraph={participant.farmer_trainer} />\n            <Detailscontent heading={'Business Advisor'} paragraph={participant.business_advisor} />\n            <Detailscontent heading={'Gender'} paragraph={participant.gender === 'm' ? 'Male' : 'Female'} />\n            <Detailscontent heading={'TNS ID'} paragraph={participant.tns_id} />\n          </div>\n\n          <div>\n            <p style={{ fontSize: '11px', paddingTop: '40px' }}>{/* Edit Information */}</p>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Partscontentview\n","import React from \"react\";\nimport Table from \"../../../../components/Table/Table\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_ATTENDANCE_PER_PARTICIPANT } from \"../../../../graphql/queries/participantsRequests\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { BeatLoader } from \"react-spinners\";\nimport { Chip } from \"@mui/material\";\n\nconst Attendtable = ({ trainingSessions, participant }) => {\n  const [rows, setRows] = useState([]); // eslint-disable-line no-unused-vars\n\n  const columns = [\n    { id: \"num\", name: \"No.\", selector: (row) => row.num, sortable: true },\n    {\n      id: \"session_name\",\n      name: \"Module Name\",\n      selector: (row) => row.session_name,\n      sortable: true,\n    },\n    // {\n    //   id: \"attendance_name\",\n    //   name: \"Attendance Name\",\n    //   selector: (row) => row.attendance_name,\n    //   sortable: true,\n    // },\n    {\n      id: \"attendance_status\",\n      name: \"Status\",\n      selector: (row) => {\n        return (\n          <div>\n            {row.attendance_status === \"Present\" ? (\n              <Chip label={\"Attended\"} color=\"success\" variant=\"outlined\" />\n            ) : (\n              <Chip label={\"Missed\"} color=\"error\" variant=\"outlined\" />\n            )}\n          </div>\n        );\n      },\n      sortable: true,\n    },\n    {\n      id: \"attendance_date\",\n      name: \"Date\",\n      selector: (row) => row.attendance_date,\n      sortable: true,\n    },\n  ];\n  const tableRowItem = \"trainsession\";\n\n  const getAttendancePerParticipant = useQuery(GET_ATTENDANCE_PER_PARTICIPANT, {\n    variables: { participantId: participant.p_id },\n  });\n\n  useEffect(() => {\n    if (getAttendancePerParticipant.data) {\n      const attendance =\n        getAttendancePerParticipant.data.getAttendanceByParticipant.attendance;\n      const rows = attendance\n        ? attendance.map((attend, index) => ({\n            num: index + 1,\n            attendance_id: attend.attendance_id,\n            ts_id: attend.session_id,\n            session_name: attend.module_name,\n            attendance_name: attend.attendance_name,\n            attendance_status: attend.attendance_status,\n            attendance_date: attend.attendance_date,\n          }))\n        : [];\n      setRows(rows);\n    }\n  }, [getAttendancePerParticipant.data, trainingSessions]);\n\n  return (\n    <>\n      {getAttendancePerParticipant.data ? (\n        <div>\n          {getAttendancePerParticipant.data.getAttendanceByParticipant\n            .attendance &&\n          getAttendancePerParticipant.data.getAttendanceByParticipant.attendance\n            .length > 0 ? (\n            <Table\n              columns={columns}\n              data={rows}\n              tableRowItem={tableRowItem}\n              participant={participant}\n            />\n          ) : (\n            <div className=\"no__data\">\n              <h1 style={{ fontSize: \"20px\" }}>No Attendance Yet</h1>\n            </div>\n          )}\n        </div>\n      ) : getAttendancePerParticipant.loading ? (\n        <BeatLoader\n          color=\"#0D3C61\"\n          size={15}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n          }}\n        />\n      ) : (\n        <div className=\"no__data\">\n          <h1 style={{ fontSize: \"20px\" }}>No Attendance Yet</h1>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default Attendtable;\n","import React from \"react\";\nimport Table from \"../../../../components/Table/Table\";\n\nconst FvTabTable = ({ farmVisitsPerPart }) => {\n  const columns = [\n    { id: \"num\", name: \"No.\", selector: (row) => row.num, sortable: true },\n    // {\n    //   id: \"fv_name\",\n    //   name: \"Farm Visit Name\",\n    //   selector: (row) => row.fv_name,\n    //   sortable: true,\n    // },\n    {\n      id: \"training_group\",\n      name: \"Training Group\",\n      selector: (row) => row.training_group,\n      sortable: true,\n    },\n    // {\n    //   id: \"training_session\",\n    //   name: \"Training Session\",\n    //   selector: (row) => row.training_session,\n    //   sortable: true,\n    // },\n    {\n      id: \"tns_id\",\n      name: \"TNS ID\",\n      selector: (row) => row.tns_id,\n      sortable: true,\n    },\n    {\n      id: \"farm_visited\",\n      name: \"Farm Visited\",\n      selector: (row) => row.farm_visited,\n      sortable: true,\n    },\n    // {\n    //   id: \"household_id\",\n    //   name: \"Household Id\",\n    //   selector: (row) => row.household_id,\n    //   sortable: true,\n    // },\n    {\n      id: \"farmer_trainer\",\n      name: \"Farmer Trainer\",\n      selector: (row) => row.farmer_trainer,\n      sortable: true,\n    },\n    {\n      id: \"date_visited\",\n      name: \"Date Visited\",\n      selector: (row) => row.date_visited,\n      sortable: true,\n    },\n  ];\n\n  const tableRowItem = \"farmvisit\";\n\n  const rows = farmVisitsPerPart\n    ? farmVisitsPerPart.map((fv, index) => ({\n        num: index + 1,\n        fv_id: fv.fv_id,\n        fv_name: fv.fv_name,\n        training_group: fv.training_group,\n        training_session: fv.training_session,\n        tns_id: fv.tns_id,\n        farm_visited: fv.farm_visited,\n        household_id: fv.household_id,\n        farmer_trainer: fv.farmer_trainer,\n        has_training: fv.has_training,\n        date_visited: fv.date_visited,\n      }))\n    : [];\n\n  return (\n    <div>\n      <Table columns={columns} data={rows} tableRowItem={tableRowItem} />\n    </div>\n  );\n};\n\nexport default FvTabTable;\n","import PropTypes from \"prop-types\";\nimport { Typography, Tabs, Tab, Box } from \"@mui/material\";\nimport { a11yProps } from \"../../training-group/tgdetail/Tgtabs\";\nimport { useState } from \"react\";\nimport Attendtable from \"./Table/attendtable\";\nimport FVTable from \"./Table/fvtable\";\n\nfunction CustomTabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 3 }}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nCustomTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nconst Partstableview = ({\n  trainingSessions,\n  participant,\n  farmVisitsPerPart,\n}) => {\n\n  console.log(farmVisitsPerPart);\n  const [value, setValue] = useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  return (\n    <>\n      <Box sx={{ width: \"100%\" }}>\n        <Box\n          sx={{\n            borderBottom: 1,\n            borderColor: \"divider\",\n            borderTopLeftRadius: \"3px\",\n            borderTopRightRadius: \"3px\",\n            backgroundColor: \"rgba(0, 165, 163, 0.1)\",\n          }}\n        >\n          <Tabs\n            value={value}\n            onChange={handleChange}\n            aria-label=\"basic tabs example\"\n            textColor=\"primary\"\n          >\n            <Tab label=\"Farm Visit History\" {...a11yProps(0)} />\n            <Tab label=\"TS Attendance History\" {...a11yProps(1)} />\n          </Tabs>\n        </Box>\n\n        <CustomTabPanel value={value} index={0}>\n          <FVTable\n            trainingSessions={trainingSessions}\n            participant={participant}\n            farmVisitsPerPart={farmVisitsPerPart}\n          />\n        </CustomTabPanel>\n        <CustomTabPanel value={value} index={1}>\n          <Attendtable\n            trainingSessions={trainingSessions}\n            participant={participant}\n          />\n        </CustomTabPanel>\n      </Box>\n    </>\n  );\n};\n\nexport default Partstableview;\n","import React, { useState, useEffect } from \"react\";\nimport Breadcrumb from \"../../../components/Breadcrumbs\";\nimport \"./partsstyles.css\";\nimport Partscontentview from \"./Partscontentview\";\nimport Partstableview from \"./Partstableview\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { GET_FARM_VISITS_PER_PART} from \"../../../graphql/queries/farmVisitsRequests\"; // Assuming this is the correct query\nimport {GET_PARTICIPANT_BY_ID} from \"../../../graphql/queries/participantsRequests\";\nimport LoadingScreen from \"../../../components/LoadingScreen\"; // Assuming you have a LoadingScreen component\nimport { Typography } from \"@mui/material\";\n\nconst Partdetail = () => {\n  const breadCrumbs = \"Participants\";\n  const breadCrumbsLinkTo = \"participants\";\n\n  const [farmVisitsPerPart, setFarmVisitsPerPart] = useState([]);\n\n  // Get params from URL\n  const params = useParams();\n  const { id } = params;\n\n  // Query to get participant by ID\n  const { loading: participantLoading, error: participantError, data: participantData } = useQuery(GET_PARTICIPANT_BY_ID, {\n    variables: { id }, // Ensure that the variable matches the participant ID in the query\n  });\n\n  // Query for farm visits per participant\n  const { loading: farmVisitsLoading, error: farmVisitsError, data: farmVisitsData } = useQuery(GET_FARM_VISITS_PER_PART, {\n    variables: { partId: id },\n    skip: !id, // Skip the query if id is not present\n  });\n\n  useEffect(() => {\n    if (farmVisitsData) {\n      const farmVisits = farmVisitsData.getFarmVisitsByParticipant.farmVisits;\n      setFarmVisitsPerPart(farmVisits);\n    }\n  }, [farmVisitsData]);\n\n  // Handle loading and errors\n  if (participantLoading || farmVisitsLoading) {\n    return <LoadingScreen />; // Show loading spinner\n  }\n\n  if (participantError || farmVisitsError) {\n    return (\n      <div className=\"error__container\">\n        <Typography color=\"error\">\n          {participantError?.message || farmVisitsError?.message}\n        </Typography>\n      </div>\n    );\n  }\n\n  const selectedParticipant = participantData?.getParticipantsById?.participant;\n\n  return (\n    <>\n      <Breadcrumb\n        name=\"Details\"\n        firstItem={breadCrumbs}\n        linkTo={breadCrumbsLinkTo}\n      />\n      <div className=\"parts__container\">\n        {selectedParticipant ? (\n          <>\n            <div className=\"parts__detailcontent\">\n              <Partscontentview participant={selectedParticipant} />\n            </div>\n            <div className=\"parts__tablecontent\">\n              <Partstableview\n                participant={selectedParticipant}\n                farmVisitsPerPart={farmVisitsPerPart}\n              />\n            </div>\n          </>\n        ) : (\n          <div className=\"no__data\">\n            <h1 style={{ fontSize: \"20px\" }}>No Participant Selected</h1>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default Partdetail;\n"],"names":["gql","GET_PARTICIPANTS_PER_PROJECT","GET_PARTICIPANTS_PER_TG","GET_PARTICIPANT_BY_ID","GET_ATTENDANCE_PER_PARTICIPANT","UPLOAD_PARTICIPANTS","SYNC_PARTICIPANTS_WITH_COMMCARE","_ref","participant","_jsx","_Fragment","children","_jsxs","className","style","display","alignSelf","Avatar","name","full_name","size","textSizeRatio","round","color","fontSize","fontWeight","paddingTop","paddingBottom","textAlign","Divider","light","marginTop","Detailscontent","heading","paragraph","first_name","middle_name","last_name","location","farmer_trainer","business_advisor","gender","tns_id","trainingSessions","rows","setRows","useState","columns","id","selector","row","num","sortable","session_name","attendance_status","Chip","label","variant","attendance_date","getAttendancePerParticipant","useQuery","variables","participantId","p_id","useEffect","data","attendance","getAttendanceByParticipant","map","attend","index","attendance_id","ts_id","session_id","module_name","attendance_name","length","Table","tableRowItem","loading","BeatLoader","justifyContent","farmVisitsPerPart","fv","fv_id","fv_name","training_group","training_session","farm_visited","household_id","has_training","date_visited","CustomTabPanel","props","value","other","role","hidden","Box","sx","p","Typography","console","log","setValue","width","borderBottom","borderColor","borderTopLeftRadius","borderTopRightRadius","backgroundColor","Tabs","onChange","handleChange","event","newValue","textColor","Tab","a11yProps","FVTable","Attendtable","Partdetail","_participantData$getP","setFarmVisitsPerPart","params","useParams","participantLoading","error","participantError","participantData","farmVisitsLoading","farmVisitsError","farmVisitsData","GET_FARM_VISITS_PER_PART","partId","skip","farmVisits","getFarmVisitsByParticipant","LoadingScreen","message","selectedParticipant","getParticipantsById","Breadcrumb","firstItem","linkTo","Partscontentview","Partstableview"],"sourceRoot":""}