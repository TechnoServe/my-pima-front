{"version":3,"file":"static/js/439.6a1cc50a.chunk.js","mappings":"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","sources":["graphql/queries/farmVisitsRequests.js","features/fvapprove/fvApprove.js","../node_modules/file-saver/src/FileSaver.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nconst GET_FARM_VISITS_PER_PROJECT = gql`\r\n  query GetFarmVisitsByProject($projectId: String!) {\r\n    getFarmVisitsByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        training_group\r\n        farmer_tns_id\r\n        household_tns_id\r\n        farm_visited\r\n        farmer_trainer\r\n        date_visited\r\n        pima_household_id\r\n        pima_farmer_id\r\n        gender\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_TG = gql`\r\n  query GetFarmVisitsByGroup($tgId: String!) {\r\n    getFarmVisitsByGroup(tg_id: $tgId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_TS = gql`\r\n  query GetFarmVisitsBySession($tsId: String!) {\r\n    getFarmVisitsBySession(ts_id: $tsId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_PART = gql`\r\n  query GetFarmVisitsByParticipant($partId: String!) {\r\n    getFarmVisitsByParticipant(part_id: $partId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        farmer_tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISIT_QAs = gql`\r\n  query GetFVQAsByFarmVisits($fvId: String!) {\r\n    getFVQAsByFarmVisits(fv_id: $fvId) {\r\n      message\r\n      status\r\n      fvQAs {\r\n        bp_id\r\n        fv_id\r\n        qas {\r\n          practice_name_id\r\n          practice_name\r\n          questions\r\n          answers\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_QA_IMAGE = gql`\r\n  mutation UpdateFVQAImageStatus(\r\n    $bpId: String!\r\n    $fieldName: FieldNames!\r\n    $imageStatus: Status!\r\n  ) {\r\n    updateFVQAImageStatus(\r\n      bp_id: $bpId\r\n      field_name: $fieldName\r\n      image_status: $imageStatus\r\n    ) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FVQAS_BY_PROJECT_FOR_REVIEW = gql`\r\n  query getFVQAsByProjectForReview(\r\n    $projectId: String!\r\n    $limit: Int!\r\n    $offset: Int!\r\n  ) {\r\n    getFVQAsByProjectForReview(\r\n      project_id: $projectId\r\n      limit: $limit\r\n      offset: $offset\r\n    ) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n        status\r\n        qas {\r\n          practice_name_id\r\n          practice_name\r\n          questions\r\n          answers\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FVQAS_BY_PROJECT_IN_EXCEL = gql`\r\n  query getFVQAsByProjectInExcel($projectId: String!, $practiceName: String!) {\r\n    getFVQAsByProjectInExcel(\r\n      project_id: $projectId\r\n      practice_name: $practiceName\r\n    ) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_OVERALL_REPORT = gql`\r\n  query getFVQAsByProjectInExcel($projectId: String!, $practiceName: String!) {\r\n    getFVQAsByProjectInExcel(\r\n      project_id: $projectId\r\n      practice_name: $practiceName\r\n    ) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPLOAD_APPROVED_FV = gql`\r\n  mutation UploadParticipants($partsFile: Upload!) {\r\n    uploadParticipants(parts_file: $partsFile) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_SAMPLED_VISITS_STATS = gql`\r\n  query GetSampledVisitsStats($projectId: String!) {\r\n    getSampledVisitsStats(projectId: $projectId) {\r\n      totalSampledVisits\r\n      totalReviewed\r\n      remainingVisits\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_BEST_PRACTICE_STATS = gql`\r\n  query GetBestPracticeStats($projectId: String!, $practiceName: String!) {\r\n    getBestPracticeReviewStats(\r\n      projectId: $projectId\r\n      practiceName: $practiceName\r\n    ) {\r\n      reviewedVisits\r\n      remainingVisits\r\n      totalVisits\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PAGINATED_REVIEWS = gql`\r\n  query GetPaginatedReviews(\r\n    $projectId: String!\r\n    $practiceName: String!\r\n    $page: Int!\r\n    $pageSize: Int!\r\n  ) {\r\n    getPaginatedReviews(\r\n      projectId: $projectId\r\n      practiceName: $practiceName\r\n      page: $page\r\n      pageSize: $pageSize\r\n    ) {\r\n      visit_id\r\n      sf_visit_id\r\n      farmer_name\r\n      farmer_pima_id\r\n      farmer_tns_id\r\n      date_visited\r\n      farmer_trainer\r\n      BestPractices {\r\n        practice_id\r\n        practice_name\r\n        image_url\r\n        sf_practice_id\r\n        question\r\n        answer\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GENERATE_FARM_VISIT_REPORT = gql`\r\n  query GenerateFarmVisitReport($projectId: String!) {\r\n    generateFarmVisitReport(projectId: $projectId) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst SUBMIT_BATCH_APPROVED_VISITS = gql`\r\n  mutation SubmitBatch($input: [BatchInput!]!) {\r\n    submitBatch(input: $input) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nconst SUBMIT_BATCH = gql`\r\n  mutation SubmitBatch($input: [BatchInput!]!) {\r\n    submitBatch(input: $input) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  GET_FARM_VISITS_PER_PROJECT,\r\n  GET_FARM_VISITS_PER_TG,\r\n  GET_FARM_VISITS_PER_TS,\r\n  GET_FARM_VISITS_PER_PART,\r\n  GET_FARM_VISIT_QAs,\r\n  GET_FVQAS_BY_PROJECT_FOR_REVIEW,\r\n  GET_FVQAS_BY_PROJECT_IN_EXCEL,\r\n  GET_OVERALL_REPORT,\r\n  GET_PAGINATED_REVIEWS,\r\n  GET_BEST_PRACTICE_STATS,\r\n  GET_SAMPLED_VISITS_STATS,\r\n  GENERATE_FARM_VISIT_REPORT,\r\n  SUBMIT_BATCH_APPROVED_VISITS,\r\n  SUBMIT_BATCH,\r\n  UPLOAD_APPROVED_FV,\r\n  UPDATE_QA_IMAGE,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  GET_SAMPLED_VISITS_STATS,\r\n  GET_BEST_PRACTICE_STATS,\r\n  GET_PAGINATED_REVIEWS,\r\n  SUBMIT_BATCH,\r\n  GENERATE_FARM_VISIT_REPORT,\r\n} from \"../../graphql/queries/farmVisitsRequests\";\r\nimport \"./fvapprove.css\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nconst pageSize = 5;\r\n\r\nconst practices = [\r\n  { name: \"Compost\" },\r\n  { name: \"Compost BU\"},\r\n  { name: \"Main Stems\" },\r\n  { name: \"Shade Management\" },\r\n  { name: \"Weeding\" },\r\n  { name: \"Record Book\" },\r\n  { name: \"Stumping\" }\r\n];\r\n\r\nconst placeholderImageUrl = \"https://via.placeholder.com/150\"; // Placeholder image URL\r\n\r\nconst LoadingSpinner = () => (\r\n  <div className=\"loading-container\">\r\n    <div className=\"spinner\"></div>\r\n    <p>Loading, please wait...</p>\r\n  </div>\r\n);\r\n\r\nconst ErrorMessage = ({ message }) => (\r\n  <div className=\"error-container\">\r\n    <div className=\"error-message\">\r\n      <h3>Something went wrong</h3>\r\n      <p>{message}</p>\r\n      <button onClick={() => window.location.reload()}>Try Again</button>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst FarmVisitApp = ({ selectedProject, userId }) => {\r\n  const [selectedPractice, setSelectedPractice] = useState(null);\r\n  const [page, setPage] = useState(0);\r\n  const [visits, setVisits] = useState([]);\r\n  const [filteredVisits, setFilteredVisits] = useState([]);\r\n  const [answers, setAnswers] = useState({});\r\n  const [comments, setComments] = useState({});\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [loadingImages, setLoadingImages] = useState({});\r\n  const [submitting, setSubmitting] = useState(false); // New state for submission loading\r\n  const [downloadingReport, setDownloadingReport] = useState(false); // State for report download\r\n\r\n  const {\r\n    data: statsData,\r\n    loading: statsLoading,\r\n    error: statsError,\r\n  } = useQuery(GET_SAMPLED_VISITS_STATS, {\r\n    variables: { projectId: selectedProject },\r\n  });\r\n\r\n  const {\r\n    data: visitsData,\r\n    loading: visitsLoading,\r\n    error: visitsError,\r\n    refetch: refetchVisits,\r\n  } = useQuery(GET_PAGINATED_REVIEWS, {\r\n    variables: {\r\n      projectId: selectedProject,\r\n      practiceName: selectedPractice ? selectedPractice.name : \"\",\r\n      page: 0,\r\n      pageSize: 1000,\r\n    },\r\n    skip: !selectedPractice, // Skip the query until a practice is selected\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n\r\n  const [submitBatchMutation] = useMutation(SUBMIT_BATCH);\r\n  const [generateFarmVisitReport] = useLazyQuery(GENERATE_FARM_VISIT_REPORT, {\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (visitsData && visitsData.getPaginatedReviews) {\r\n      setVisits(visitsData.getPaginatedReviews);\r\n    }\r\n  }, [visitsData]);\r\n\r\n  useEffect(() => {\r\n    if (selectedPractice) {\r\n      const filtered = visits.filter((visit) =>\r\n        visit.BestPractices.some(\r\n          (bp) => bp.practice_name === selectedPractice.name\r\n        )\r\n      );\r\n      setFilteredVisits(filtered);\r\n    }\r\n  }, [selectedPractice, visits]);\r\n\r\n  const handleSelectPractice = (practice) => {\r\n    setSelectedPractice(practice);\r\n    setPage(0);\r\n    setAnswers({});\r\n    setComments({});\r\n    refetchVisits({ practiceName: practice.name });\r\n  };\r\n\r\n  const handleAnswerChange = (visitId, value) => {\r\n    setAnswers((prev) => ({ ...prev, [visitId]: value }));\r\n  };\r\n\r\n  const handleCommentsChange = (visitId, value) => {\r\n    setComments((prev) => ({ ...prev, [visitId]: value }));\r\n  };\r\n\r\n  const handleSubmitBatch = () => {\r\n    // Get the current page's filtered visits\r\n    const currentPageVisits = filteredVisits.slice(\r\n      page * pageSize,\r\n      (page + 1) * pageSize\r\n    );\r\n\r\n    // Check if all the answers have been filled out\r\n    const allFilled = currentPageVisits.every(\r\n      (visit) => answers[visit.visit_id]\r\n    );\r\n\r\n    // Check if all comments are provided for 'No' answers\r\n    const allCommentsFilled = currentPageVisits.every(\r\n      (visit) =>\r\n        answers[visit.visit_id] === \"Yes\" ||\r\n        (answers[visit.visit_id] === \"No\" && comments[visit.visit_id])\r\n    );\r\n\r\n    if (!allFilled) {\r\n      toast.error(\r\n        \"Please fill out 'Correct Answer?' for all records before submitting.\"\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (!allCommentsFilled) {\r\n      toast.error(\"Please provide comments for all records with 'No' answers.\");\r\n      return;\r\n    }\r\n\r\n    // Prepare the batch input for the API call\r\n    const batchInput = currentPageVisits.map((visit) => {\r\n      const bestPractice = visit.BestPractices.find(\r\n        (bp) => bp.practice_name === selectedPractice.name\r\n      );\r\n\r\n      return {\r\n        practice_id: bestPractice.practice_id,\r\n        correct_answer: answers[visit.visit_id].toLowerCase(),\r\n        comment: comments[visit.visit_id] || \"\",\r\n        user_id: userId,\r\n      };\r\n    });\r\n\r\n    // Show loading spinner and disable submit button\r\n    setSubmitting(true);\r\n\r\n    // Call the API to submit the batch\r\n    submitBatchMutation({\r\n      variables: {\r\n        input: batchInput,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        setSubmitting(false);\r\n\r\n        if (response.data.submitBatch.success) {\r\n          toast.success(\"Batch submitted successfully!\");\r\n\r\n          // Reset answers and comments\r\n          setAnswers({});\r\n          setComments({});\r\n\r\n          // Reset page to 0 and refetch visits data\r\n          setPage(0);\r\n          refetchVisits({ fetchPolicy: \"network-only\" });\r\n        } else {\r\n          toast.error(\r\n            \"Failed to submit batch: \" + response.data.submitBatch.message\r\n          );\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setSubmitting(false);\r\n        console.error(\"Error submitting batch:\", error);\r\n        toast.error(\"An error occurred while submitting the batch.\");\r\n      });\r\n  };\r\n\r\n  const goBackToOverview = () => {\r\n    setSelectedPractice(null);\r\n    setPage(0);\r\n    setAnswers({});\r\n    setComments({});\r\n  };\r\n\r\n  const handleImageClick = (formId, imageId) => {\r\n    setSelectedImage(\r\n      `${process.env.REACT_APP_API_URL}/image/${formId}/${imageId}`\r\n    );\r\n  };\r\n\r\n  const closeImageModal = () => {\r\n    setSelectedImage(null);\r\n  };\r\n\r\n  const handleImageLoad = (imageId) => {\r\n    setLoadingImages((prev) => ({ ...prev, [imageId]: false }));\r\n  };\r\n\r\n  const handleImageError = (imageId) => {\r\n    setLoadingImages((prev) => ({ ...prev, [imageId]: false }));\r\n  };\r\n\r\n  const handleDownloadReport = () => {\r\n    if (!selectedProject) {\r\n      toast.error(\"No project selected.\");\r\n      return;\r\n    }\r\n\r\n    setDownloadingReport(true);\r\n    generateFarmVisitReport({ variables: { projectId: selectedProject } })\r\n      .then((response) => {\r\n        const { generateFarmVisitReport } = response.data;\r\n        if (\r\n          generateFarmVisitReport.status === 200 &&\r\n          generateFarmVisitReport.file\r\n        ) {\r\n          const base64Data = generateFarmVisitReport.file.split(\",\")[1]; // Removing the data URI prefix\r\n          const blob = base64ToBlob(\r\n            base64Data,\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n          );\r\n          saveAs(blob, \"farm_visit_statistics.xlsx\");\r\n          toast.success(\"Download started.\");\r\n        } else {\r\n          toast.error(\r\n            generateFarmVisitReport.message || \"Failed to generate report.\"\r\n          );\r\n        }\r\n        setDownloadingReport(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error generating report:\", error);\r\n        toast.error(\"An error occurred while generating the report.\");\r\n        setDownloadingReport(false);\r\n      });\r\n  };\r\n\r\n  const base64ToBlob = (base64Data, contentType) => {\r\n    const byteCharacters = atob(base64Data);\r\n    const byteArrays = [];\r\n    for (let offset = 0; offset < byteCharacters.length; offset += 512) {\r\n      const slice = byteCharacters.slice(offset, offset + 512);\r\n      const byteNumbers = new Array(slice.length);\r\n      for (let i = 0; i < slice.length; i++) {\r\n        byteNumbers[i] = slice.charCodeAt(i);\r\n      }\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      byteArrays.push(byteArray);\r\n    }\r\n    return new Blob(byteArrays, { type: contentType });\r\n  };\r\n\r\n  if (statsLoading) return <LoadingSpinner />;\r\n  if (statsError) return <ErrorMessage message={statsError.message} />;\r\n\r\n  const { totalSampledVisits, totalReviewed, remainingVisits } =\r\n    statsData.getSampledVisitsStats;\r\n\r\n  return (\r\n    <div className=\"farm-visit-app\">\r\n      {!selectedPractice ? (\r\n        <>\r\n          <div className=\"dashboard-header\">\r\n            <div className=\"dashboard-info\">\r\n              <p>\r\n                <strong>Total Sampled Visits:</strong> {totalSampledVisits}\r\n              </p>\r\n              <p>\r\n                <strong>Total Reviewed:</strong> {totalReviewed}\r\n              </p>\r\n              <p>\r\n                <strong>Remaining Visits:</strong> {remainingVisits}\r\n              </p>\r\n            </div>\r\n            <button\r\n              className=\"download-button\"\r\n              onClick={handleDownloadReport}\r\n              disabled={downloadingReport}\r\n            >\r\n              {downloadingReport ? \"Downloading...\" : \"Download Report\"}\r\n            </button>\r\n          </div>\r\n          <h1 className=\"dashboard-title\">Choose Adoption Method to Review</h1>\r\n          <div className=\"practices-container\">\r\n            {practices.map((practice) => (\r\n              <PracticeCard\r\n                key={practice.name}\r\n                practice={practice}\r\n                projectId={selectedProject}\r\n                onSelect={handleSelectPractice}\r\n              />\r\n            ))}\r\n          </div>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <div className=\"indicator\">\r\n            <span onClick={goBackToOverview} className=\"indicator-link\">\r\n              Back to Practice Overview\r\n            </span>\r\n          </div>\r\n          <h2 className=\"sub-header\">Reviewing {selectedPractice.name}</h2>\r\n          {visitsLoading && <LoadingSpinner />}\r\n          {visitsError && <ErrorMessage message={visitsError.message} />}\r\n          {!visitsLoading && !visitsError && filteredVisits.length > 0 && (\r\n            <>\r\n              <div className=\"visit-list\">\r\n                {filteredVisits\r\n                  .slice(page * pageSize, (page + 1) * pageSize)\r\n                  .map((visit) => {\r\n                    const bestPractice = visit.BestPractices.find(\r\n                      (bp) => bp.practice_name === selectedPractice.name\r\n                    );\r\n\r\n                    const [formId, imageId] =\r\n                      bestPractice?.image_url?.split(\"/\").slice(-2) || [];\r\n\r\n                    return (\r\n                      <div key={visit.visit_id} className=\"visit-item\">\r\n                        <div className=\"visit-details\">\r\n                          <p>\r\n                            <strong>Farmer PIMA ID:</strong>{\" \"}\r\n                            {visit.farmer_pima_id}\r\n                          </p>\r\n                          <p>\r\n                            <strong>Farmer TNS ID:</strong>{\" \"}\r\n                            {visit.farmer_tns_id}\r\n                          </p>\r\n                          <p>\r\n                            <strong>Date Visited:</strong> {visit.date_visited}\r\n                          </p>\r\n                          <p>\r\n                            <strong>Farmer Name:</strong> {visit.farmer_name}\r\n                          </p>\r\n                          <p>\r\n                            <strong>Farmer Trainer:</strong>{\" \"}\r\n                            {visit.farmer_trainer}\r\n                          </p>\r\n                          <p>\r\n                            <strong>Question:</strong>{\" \"}\r\n                            {bestPractice?.question || \"N/A\"}\r\n                          </p>\r\n                          <p>\r\n                            <strong>Observation:</strong>{\" \"}\r\n                            {bestPractice?.answer || \"N/A\"}\r\n                          </p>\r\n                        </div>\r\n\r\n                        <div className=\"visit-image\">\r\n                          {loadingImages[imageId] && <LoadingSpinner />}\r\n                          <img\r\n                            src={\r\n                              bestPractice?.image_url\r\n                                ? `${process.env.REACT_APP_API_URL}/image/${formId}/${imageId}`\r\n                                : placeholderImageUrl\r\n                            }\r\n                            alt=\"Farm Visit\"\r\n                            style={{\r\n                              display: loadingImages[imageId]\r\n                                ? \"none\"\r\n                                : \"block\",\r\n                            }}\r\n                            onLoad={() => handleImageLoad(imageId)}\r\n                            onError={() => handleImageError(imageId)}\r\n                            onClick={() => handleImageClick(formId, imageId)}\r\n                          />\r\n                        </div>\r\n\r\n                        <div className=\"answer-field\">\r\n                          <label>Correct Answer?</label>\r\n                          <select\r\n                            value={answers[visit.visit_id] || \"\"}\r\n                            onChange={(e) =>\r\n                              handleAnswerChange(visit.visit_id, e.target.value)\r\n                            }\r\n                          >\r\n                            <option value=\"\">-- Select --</option>\r\n                            <option value=\"Yes\">Yes</option>\r\n                            <option value=\"No\">No</option>\r\n                            <option value=\"Unclear\">Unclear</option>\r\n                          </select>\r\n                        </div>\r\n\r\n                        <div className=\"comment-field\">\r\n                          <label>Comments:</label>\r\n                          <textarea\r\n                            value={comments[visit.visit_id] || \"\"}\r\n                            onChange={(e) =>\r\n                              handleCommentsChange(\r\n                                visit.visit_id,\r\n                                e.target.value\r\n                              )\r\n                            }\r\n                            placeholder={\r\n                              answers[visit.visit_id] === \"No\"\r\n                                ? \"Required is answer is 'No'\"\r\n                                : \"Required\"\r\n                            }\r\n                            required={answers[visit.visit_id] === \"No\"}\r\n                            className={\r\n                              answers[visit.visit_id] === \"No\" &&\r\n                              !comments[visit.visit_id]\r\n                                ? \"error\" // Apply a style to indicate error\r\n                                : \"\"\r\n                            }\r\n                          />\r\n                          {answers[visit.visit_id] === \"No\" &&\r\n                            !comments[visit.visit_id] && (\r\n                              <p className=\"error-message\">\r\n                                Comment is required for 'No' answers\r\n                              </p>\r\n                            )}\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  })}\r\n              </div>\r\n              <div className=\"pagination-info\">\r\n                Reviewing{\" \"}\r\n                {Math.min((page + 1) * pageSize, filteredVisits.length)} of{\" \"}\r\n                {filteredVisits.length} records\r\n              </div>\r\n\r\n              <div className=\"pagination-controls\">\r\n                <button disabled={page === 0} onClick={() => setPage(page - 1)}>\r\n                  Previous\r\n                </button>\r\n                <span className=\"current-page\">\r\n                  Page {page + 1} of{\" \"}\r\n                  {Math.ceil(filteredVisits.length / pageSize)}\r\n                </span>\r\n                <button\r\n                  disabled={\r\n                    page >= Math.floor(filteredVisits.length / pageSize)\r\n                  }\r\n                  onClick={() => setPage(page + 1)}\r\n                >\r\n                  Next\r\n                </button>\r\n              </div>\r\n\r\n              <button\r\n                className=\"submit-button\"\r\n                onClick={handleSubmitBatch}\r\n                disabled={submitting} // Disable the button while submitting\r\n              >\r\n                {submitting ? \"Submitting...\" : \"Submit Batch\"}\r\n              </button>\r\n            </>\r\n          )}\r\n          {selectedImage && (\r\n            <div className=\"image-modal\" onClick={closeImageModal}>\r\n              <img src={selectedImage} alt=\"Fullscreen Farm Visit\" />\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst PracticeCard = ({ practice, onSelect, projectId }) => {\r\n  const { data, loading, error } = useQuery(GET_BEST_PRACTICE_STATS, {\r\n    variables: { projectId, practiceName: practice.name },\r\n  });\r\n\r\n  return (\r\n    <div className=\"practice-card\" onClick={() => onSelect(practice)}>\r\n      <h3>{practice.name}</h3>\r\n      {loading && <LoadingSpinner />}\r\n      {error && <ErrorMessage message={error.message} />}\r\n      {!loading && !error && (\r\n        <div className=\"progress\">\r\n          <p>\r\n            <strong>Reviewed:</strong>{\" \"}\r\n            {data?.getBestPracticeReviewStats?.reviewedVisits || 0}\r\n          </p>\r\n          <p>\r\n            <strong>Remaining:</strong>{\" \"}\r\n            {data?.getBestPracticeReviewStats?.remainingVisits || 0}\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FarmVisitApp;\r\n","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n"],"names":["GET_FARM_VISITS_PER_PROJECT","gql","GET_FARM_VISITS_PER_TG","GET_FARM_VISITS_PER_PART","GET_SAMPLED_VISITS_STATS","GET_BEST_PRACTICE_STATS","GET_PAGINATED_REVIEWS","GENERATE_FARM_VISIT_REPORT","SUBMIT_BATCH","practices","name","LoadingSpinner","_jsxs","className","children","_jsx","ErrorMessage","_ref","message","onClick","window","location","reload","PracticeCard","_ref3","_data$getBestPractice","_data$getBestPractice2","practice","onSelect","projectId","data","loading","error","useQuery","variables","practiceName","getBestPracticeReviewStats","reviewedVisits","remainingVisits","_ref2","selectedProject","userId","selectedPractice","setSelectedPractice","useState","page","setPage","visits","setVisits","filteredVisits","setFilteredVisits","answers","setAnswers","comments","setComments","selectedImage","setSelectedImage","loadingImages","setLoadingImages","submitting","setSubmitting","downloadingReport","setDownloadingReport","statsData","statsLoading","statsError","visitsData","visitsLoading","visitsError","refetch","refetchVisits","pageSize","skip","fetchPolicy","submitBatchMutation","useMutation","generateFarmVisitReport","useLazyQuery","useEffect","getPaginatedReviews","filtered","filter","visit","BestPractices","some","bp","practice_name","handleSelectPractice","base64ToBlob","base64Data","contentType","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob","type","totalSampledVisits","totalReviewed","getSampledVisitsStats","_Fragment","goBackToOverview","map","_bestPractice$image_u","bestPractice","find","formId","imageId","image_url","split","farmer_pima_id","farmer_tns_id","date_visited","farmer_name","farmer_trainer","question","answer","src","alt","style","display","onLoad","prev","handleImageLoad","onError","handleImageError","handleImageClick","value","visit_id","onChange","e","handleAnswerChange","visitId","target","handleCommentsChange","placeholder","required","Math","min","disabled","ceil","floor","handleSubmitBatch","currentPageVisits","allFilled","every","allCommentsFilled","toast","batchInput","practice_id","correct_answer","toLowerCase","comment","user_id","input","then","response","submitBatch","success","catch","console","closeImageModal","handleDownloadReport","status","file","blob","saveAs","b","a","autoBom","warn","test","c","d","XMLHttpRequest","open","responseType","onload","g","onerror","send","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","f","self","global","navigator","userAgent","HTMLAnchorElement","prototype","h","URL","webkitURL","j","createElement","download","rel","href","origin","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","replace","readAsDataURL","l","m","module","exports"],"sourceRoot":""}