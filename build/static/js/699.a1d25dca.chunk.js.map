{"version":3,"file":"static/js/699.a1d25dca.chunk.js","mappings":"2TAKA,MA2CA,EA3CmBA,IAA0B,IAAzB,gBAAEC,GAAiBD,EAErC,MAAME,EAAY,CAChB,CACEC,QAAS,gBACTC,QAASH,EAAgBI,OACzBC,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,IAAQ,IACfC,MAAO,WAET,CACEN,QAAS,iBACTC,QAASH,EAAgBS,QACtBC,GAA4C,OAAhCA,EAAQC,sBACrBP,OACFC,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,IAAQ,IACfC,MAAO,WAET,CACEN,QAAS,eACTC,QAASH,EAAgBS,QACtBC,GAA4C,OAAhCA,EAAQC,sBACrBP,OACFC,MAAMC,EAAAA,EAAAA,KAACM,EAAAA,IAAmB,IAC1BJ,MAAO,YAIX,OACEK,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,MAAO,OAAQC,aAAc,OAAQC,QAAS,QAASC,SAAA,CAClEjB,EAAUkB,KAAI,CAACC,EAAMC,KACpBf,EAAAA,EAAAA,KAAA,OAAAY,UACEZ,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CACRpB,QAASkB,EAAKlB,QACdC,QAASiB,EAAKjB,QACdE,KAAMe,EAAKf,KACXG,MAAOY,EAAKZ,SALNa,KAQR,MACA,E,4HCvBV,MAyZA,EAvZkBE,KAChB,MAAM,cAAEC,EAAa,OAAEC,IAAWC,EAAAA,EAAAA,OAE5B,KAAEN,EAAI,QAAEO,EAAO,MAAEC,EAAK,QAAEC,IAAYC,EAAAA,EAAAA,GAASC,EAAAA,GAAsB,CACvEC,UAAW,CAAEC,UAAWT,GACxBU,YAAa,kBAGRC,IAAoBC,EAAAA,EAAAA,GAAaC,EAAAA,GAAoB,CAC1DH,YAAa,kBAGRI,EAAoBC,IAAyBC,EAAAA,EAAAA,UAAS,KACtDC,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAS,KAClDG,IAAuBC,EAAAA,EAAAA,GAAYC,EAAAA,KACnCC,EAAkBC,IAAuBP,EAAAA,EAAAA,UAAS,CAAC,IACnDQ,EAAYC,IAAiBT,EAAAA,EAAAA,WAAS,IACtCU,EAAiBC,IAAsBX,EAAAA,EAAAA,UAAS,OAChDY,EAAeC,IAAoBb,EAAAA,EAAAA,UAAS,CAAC,IAC7Cc,EAAYC,IAAiBf,EAAAA,EAAAA,WAAS,IACtCgB,EAAeC,IAAoBjB,EAAAA,EAAAA,UAAS,MAC7CkB,GAASC,EAAAA,EAAAA,QAAO,OACfC,EAAmBC,IAAwBrB,EAAAA,EAAAA,WAAS,IACpDsB,EAAWC,IAAgBvB,EAAAA,EAAAA,WAASwB,EAAAA,EAAAA,GAAU,IAAIC,KAAQ,KAC1DC,GAASC,KAAc3B,EAAAA,EAAAA,UAAS,IAAIyB,OACpCG,GAAQC,KAAa7B,EAAAA,EAAAA,UAAS,aAErC8B,EAAAA,EAAAA,YAAU,KACJtB,GAAcU,EAAOa,SACvBC,YAAW,KACTd,EAAOa,QAAQE,gBAAgB,GAC9B,IACL,GACC,CAACzB,KAEJsB,EAAAA,EAAAA,YAAU,KACR,GAAIlD,EAAM,CACRmB,EAAsBnB,EAAKsD,yBAC3B,MAAMC,EAAsBvD,EAAKsD,wBAAwBE,QACvD,CAACC,EAAKnE,KACJmE,EAAInE,EAAQoE,KAAM,EACXD,IAET,CAAC,GAEHxB,EAAiBsB,GAGjB,MAAMI,EAAW3D,EAAKsD,wBAAwBjE,QAC3CC,GAA4C,OAAhCA,EAAQC,sBAEvB+B,EAAoBqC,EACtB,IACC,CAAC3D,IAEJ,MAOM4D,GAAyBA,IACtBvC,EACJwC,MAAM,EAlEI,GAmEVC,OAAOxE,GAAYoC,EAAiBpC,EAAQoE,MA8F3CK,GAAeA,CAACC,EAAYC,KAChC,MAAMC,EAAiBC,KAAKH,GACtBI,EAAa,GACnB,IAAK,IAAIC,EAAS,EAAGA,EAASH,EAAelF,OAAQqF,GAAU,IAAK,CAClE,MAAMR,EAAQK,EAAeL,MAAMQ,EAAQA,EAAS,KAC9CC,EAAc,IAAIC,MAAMV,EAAM7E,QACpC,IAAK,IAAIwF,EAAI,EAAGA,EAAIX,EAAM7E,OAAQwF,IAChCF,EAAYE,GAAKX,EAAMY,WAAWD,GAEpC,MAAME,EAAY,IAAIC,WAAWL,GACjCF,EAAWQ,KAAKF,EAClB,CACA,OAAO,IAAIG,KAAKT,EAAY,CAAEU,KAAMb,GAAc,EAG9Cc,GAAgBjD,EAClB,CAAEkD,IAAKlD,EAAgBmD,YAAaC,IAAKpD,EAAgBqD,cACzD,CAAEH,KAAM,OAAQE,IAAK,SAEnBE,IAASnG,EAAAA,EAAAA,MAAK,CAClBoG,QACE,oEACFC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,EAAE,GAAI,MAGrB,GAAIjF,EAAS,OAAOrB,EAAAA,EAAAA,KAACuG,EAAAA,EAAa,IAElC,GAAIjF,EACF,OACEtB,EAAAA,EAAAA,KAAA,OACEQ,MAAO,CACLG,QAAS,OACT6F,eAAgB,SAChBC,WAAY,SACZC,OAAQ,SACR9F,UAEFZ,EAAAA,EAAAA,KAAC2G,EAAAA,EAAU,CAACzG,MAAM,QAAOU,SAAC,yBAKhC,MAAMgG,GAA6C,IAA5BzE,EAAiBrC,OAExC,OACES,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,uBAAsBjG,SAAA,EAEnCL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,YAAWjG,SAAA,EACxBZ,EAAAA,EAAAA,KAAA,MAAI6G,UAAU,kBAAiBjG,SAAC,+BAEhCZ,EAAAA,EAAAA,KAAC8G,EAAU,CAACpH,gBAAiBsC,QAI/BzB,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,kBAAiBjG,SAAA,EAC9BZ,EAAAA,EAAAA,KAAC+G,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAerG,UAChDL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,gBAAejG,SAAA,EAC5BZ,EAAAA,EAAAA,KAACkH,EAAAA,EAAU,CACTC,MAAM,aACNC,MAAO5D,EACP6D,SAAWC,GAAS7D,EAAa6D,GACjCC,YAAcC,IAAWxH,EAAAA,EAAAA,KAACyH,EAAAA,EAAS,IAAKD,OAE1CxH,EAAAA,EAAAA,KAACkH,EAAAA,EAAU,CACTC,MAAM,WACNC,MAAOxD,GACPyD,SAAWC,GAASzD,GAAWyD,GAC/BC,YAAcC,IAAWxH,EAAAA,EAAAA,KAACyH,EAAAA,EAAS,IAAKD,YAK9CjH,EAAAA,EAAAA,MAACkH,EAAAA,EAAS,CACRZ,UAAU,gBACVM,MAAM,SACNO,QAAM,EACNN,MAAOtD,GACPuD,SAAWM,GAAM5D,GAAU4D,EAAEC,OAAOR,OACpCS,QAAQ,WAAUjH,SAAA,EAElBZ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAACV,MAAM,MAAKxG,SAAC,SACtBZ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAACV,MAAM,WAAUxG,SAAC,aAC3BZ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAACV,MAAM,UAASxG,SAAC,eAC1BZ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAACV,MAAM,UAASxG,SAAC,aAC1BZ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAACV,MAAM,GAAExG,SAAC,qBAGrBZ,EAAAA,EAAAA,KAAC+H,EAAAA,EAAM,CACLlB,UAAU,yBACVgB,QAAQ,YACR3H,MAAM,UACN8H,QAvIqBC,KACtB/G,GAKLqC,GAAqB,GACrB1B,EAAiB,CACfH,UAAW,CACTC,UAAWT,EACXsC,UAAWA,GAAY0E,EAAAA,EAAAA,GAAO1E,EAAW,cAAgB,KACzDI,QAASA,IAAUsE,EAAAA,EAAAA,GAAOtE,GAAS,cAAgB,KACnDE,OAAQA,IAAU,QAGnBqE,MAAMC,IACL,MAAM,yBAAEC,GAA6BD,EAAStH,KAC9C,GACsC,MAApCuH,EAAyBvE,QACzBuE,EAAyBC,KACzB,CACA,MAAMxD,EAAauD,EAAyBC,KAAKC,MAAM,KAAK,GACtDC,EAAO3D,GACXC,EACA,sEAEF2D,EAAAA,EAAAA,QAAOD,EAAM,iCACbE,EAAAA,GAAMC,QAAQ,oBAChB,MACED,EAAAA,GAAMpH,MACJ+G,EAAyBO,SAAW,8BAGxCrF,GAAqB,EAAM,IAE5BsF,OAAOvH,IACNwH,QAAQxH,MAAM,2BAA4BA,GAC1CoH,EAAAA,GAAMpH,MAAM,kDACZiC,GAAqB,EAAM,KApC7BmF,EAAAA,GAAMpH,MAAM,uBAqCV,EAiGEyH,SAAUzF,EAAkB1C,SAE3B0C,EAAoB,iBAAmB,uBAK3CsD,IACC5G,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,WAAUjG,UACvBZ,EAAAA,EAAAA,KAAA,MAAIQ,MAAO,CAAEwI,SAAU,QAASpI,SAAC,gEAKnCL,EAAAA,EAAAA,MAAA0I,EAAAA,SAAA,CAAArI,SAAA,EAEEZ,EAAAA,EAAAA,KAAA,MAAI6G,UAAU,wBAAuBjG,SAAC,qBACtCZ,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,eAAcjG,SAC1BuB,EAAiBwC,MAAM,EAjRnB,GAiRgC9D,KAAKT,IAAa,IAAD8I,EACpD,MAAOC,EAAQC,IACN,OAAPhJ,QAAO,IAAPA,GAA0B,QAAnB8I,EAAP9I,EAASiJ,yBAAiB,IAAAH,OAAnB,EAAPA,EAA4BX,MAAM,KAAK5D,OAAO,KAAM,GACtD,OACEpE,EAAAA,EAAAA,MAAA,OAAsBsG,UAAU,eAAcjG,SAAA,EAC5CL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,gBAAejG,SAAA,CAC3BkC,EAAcsG,KAAYpJ,EAAAA,EAAAA,KAACuG,EAAAA,EAAa,KACzCvG,EAAAA,EAAAA,KAAA,OACEsJ,IACS,OAAPlJ,QAAO,IAAPA,GAAAA,EAASiJ,kBACJ,8BAAyCF,KAAUC,IACpD,KAENG,IAAI,UACJvB,QAASA,IAvLJwB,EAACL,EAAQC,KAChCjG,EACG,8BAAyCgG,KAAUC,IACrD,EAoLgCI,CAAiBL,EAAQC,SAG5C7I,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,kBAAiBjG,SAAA,EAC9BZ,EAAAA,EAAAA,KAAA,MAAAY,SAAKR,EAAQqJ,wBACblJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,aAAiB,IAAER,EAAQsJ,wBAErCnJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,sBAA2B,IAClCR,EAAQuJ,qBAEXpJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,qBAA0B,IACjCR,EAAQwJ,oBAEXrJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,uBAA4B,IACnCR,EAAQyJ,sBAEXtJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,mBAAwB,KAC/BsH,EAAAA,EAAAA,GAAO,IAAIvE,KAAKvD,EAAQ0J,cAAe,qBAE1CvJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,yBAA6B,IAAER,EAAQ2J,eAGnDxJ,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,iBAAgBjG,SAAA,EAC7BZ,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,iBAAgBjG,UAC7BL,EAAAA,EAAAA,MAAA,UACE8G,SAAWM,GArQHqC,EAACC,EAAWnG,KACxCrB,GAAqByH,IAAI,IACpBA,EACH,CAACD,GAAYnG,KACZ,EAkQmBkG,CAAsB5J,EAAQoE,GAAImD,EAAEC,OAAOR,OAC5CxG,SAAA,EAEDZ,EAAAA,EAAAA,KAAA,UAAQoH,MAAM,GAAExG,SAAC,kBACjBZ,EAAAA,EAAAA,KAAA,UAAQoH,MAAM,WAAUxG,SAAC,aACzBZ,EAAAA,EAAAA,KAAA,UAAQoH,MAAM,UAASxG,SAAC,eACxBZ,EAAAA,EAAAA,KAAA,UAAQoH,MAAM,UAASxG,SAAC,kBAG5BZ,EAAAA,EAAAA,KAAA,UACE6G,UAAU,kBACVmB,QAASA,IAxND5H,KAC1ByC,EAAmBzC,GACnBuC,GAAc,EAAK,EAsNcwH,CAAmB/J,GAASQ,SAC5C,kBAtDKR,EAAQoE,GA0DZ,OAKZxE,EAAAA,EAAAA,KAAA,UACE6G,UAAU,gBACVmB,QAhRgBoC,KACxB,IAAK1F,KAEH,YADAgE,EAAAA,GAAMpH,MAAM,iDAId,MAAM+I,EAAaC,OAAOC,QAAQ/H,GAAkB3B,KAClDpB,IAAA,IAAEwK,EAAWnG,GAAOrE,EAAA,MAAM,CACxBwK,YACAnG,SACA3C,SACD,IAGEkJ,EAAWvK,QAKhBmD,GAAc,GACdZ,EAAoB,CAAEX,UAAW,CAAE8I,MAAOH,KACvClC,MAAK,KACJ1F,EAAoB,CAAC,GACrBlB,IACA0B,GAAc,GACdyF,EAAAA,GAAMC,QAAQ,gCAAgC,IAE/CE,OAAOvH,IACN2B,GAAc,GACd6F,QAAQxH,MAAM,0BAA2BA,GACzCoH,EAAAA,GAAMpH,MAAM,gDAAgD,KAf9DoH,EAAAA,GAAMpH,MAAM,gDAgBV,EAkPIyH,SAAU/F,IAAe0B,KAAyB9D,SAEjDoC,EAAa,gBAAkB,oBAMrCN,IACC1C,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,gBAAejG,UAC5BL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,QAAOjG,SAAA,EACpBL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,eAAcjG,SAAA,EAC3BZ,EAAAA,EAAAA,KAAA,MAAAY,SACGgC,EACGA,EAAgB6G,qBAChB,cAENzJ,EAAAA,EAAAA,KAAA,UACEgI,QAASA,IAAMrF,GAAc,GAC7BkE,UAAU,qBAAoBjG,SAC/B,aAIHL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,gBAAejG,SAAA,EAC5BZ,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,iBACf7G,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,gBAAejG,UAC5BL,EAAAA,EAAAA,MAACkK,EAAAA,EAAY,CACXC,OAAQ7E,GACR8E,KAAM,EACNC,iBAAiB,EACjBpK,MAAO,CAAEkG,OAAQ,QAASjG,MAAO,QACjCoK,YAAcC,GAAiB1H,EAAOa,QAAU6G,EAAclK,SAAA,EAG9DZ,EAAAA,EAAAA,KAAC+K,EAAAA,EAAS,CACRC,IAAM,iMACNC,YAAY,uJAGdjL,EAAAA,EAAAA,KAACkL,EAAAA,EAAM,CAACC,SAAUtF,GAAe9F,KAAMmG,GAAOtF,UAC5CL,EAAAA,EAAAA,MAAC6K,EAAAA,EAAK,CAACvE,UAAU,eAAcjG,SAAA,EAC7BZ,EAAAA,EAAAA,KAAA,MAAAY,SAAI,+BACJZ,EAAAA,EAAAA,KAAA,KAAAY,SACGgC,EACGA,EAAgByI,SAChB,oCAWrBnI,IACClD,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,cAAcmB,QAnSXsD,KACtBnI,EAAiB,KAAK,EAkSoCvC,UACpDZ,EAAAA,EAAAA,KAAA,OAAKsJ,IAAKpG,EAAeqG,IAAI,8BAG7B,C,2DCvaV,MAkBA,EAlBkB9J,IAAwC,IAAvC,QAAEG,EAAO,QAAEC,EAAO,KAAEE,EAAI,MAAEG,GAAOT,EAClD,OACEO,EAAAA,EAAAA,KAAA,OAAAY,UACEZ,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,kBAAiBjG,UAC9BL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,gBAAejG,SAAA,EAC5BL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,aAAYjG,SAAA,EACzBZ,EAAAA,EAAAA,KAAA,KAAG6G,UAAU,cAAajG,SAAEhB,KAC5BI,EAAAA,EAAAA,KAAA,KAAG6G,UAAU,cAAajG,SAAEf,QAE9BU,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,aAAarG,MAAO,CAAE+K,gBAAiBrL,GAAQU,SAAA,CAC3Db,EAAM,aAIT,C","sources":["features/training-session/ts-approve/statsframe.js","features/training-session/ts-approve/index.js","features/training-group/statstg/Statscard.js"],"sourcesContent":["import React from \"react\";\r\nimport Statscard from \"../../training-group/statstg/Statscard\";\r\nimport { MdGroups } from \"react-icons/md\";\r\nimport { BsPersonBoundingBox } from \"react-icons/bs\";\r\n\r\nconst Statsframe = ({ sampledSessions }) => {\r\n\r\n  const statsData = [\r\n    {\r\n      heading: \"Total Sampled\",\r\n      figures: sampledSessions.length,\r\n      icon: <MdGroups />,\r\n      color: \"#25245D\",\r\n    },\r\n    {\r\n      heading: \"Total Reviewed\",\r\n      figures: sampledSessions.filter(\r\n        (session) => session.image_review_result !== null\r\n      ).length,\r\n      icon: <MdGroups />,\r\n      color: \"#087C8F\",\r\n    },\r\n    {\r\n      heading: \"Not Reviewed\",\r\n      figures: sampledSessions.filter(\r\n        (session) => session.image_review_result === null\r\n      ).length,\r\n      icon: <BsPersonBoundingBox />,\r\n      color: \"#25245D\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div style={{ width: \"100%\", marginBottom: \"20px\", display: \"flex\" }}>\r\n      {statsData.map((data, index) => (\r\n        <div key={index}>\r\n          <Statscard\r\n            heading={data.heading}\r\n            figures={data.figures}\r\n            icon={data.icon}\r\n            color={data.color}\r\n          />\r\n        </div>\r\n      ))}{\" \"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Statsframe;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport { icon } from \"leaflet\";\r\nimport { saveAs } from \"file-saver\";\r\nimport {\r\n  GET_SAMPLED_SESSIONS,\r\n  SUBMIT_BATCH,\r\n  GENERATE_TS_REPORT,\r\n} from \"../../../graphql/queries/trainingSessionsRequests\";\r\nimport \"./styles.css\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport Statsframe from \"./statsframe\";\r\nimport { TextField, MenuItem, Button, Typography } from \"@mui/material\";\r\nimport { LocalizationProvider, DatePicker } from \"@mui/x-date-pickers\"; // Ensure correct imports\r\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\r\nimport { format, subMonths } from \"date-fns\";\r\nimport LoadingScreen from \"../../../components/LoadingScreen\";\r\nimport { useRef } from \"react\"; // Import useRef for map reference\r\nimport { useOutletContext } from \"react-router-dom\";\r\n\r\nconst pageSize = 5;\r\n\r\nconst TSApprove = () => {\r\n  const { activeProject, userId } = useOutletContext();\r\n\r\n  const { data, loading, error, refetch } = useQuery(GET_SAMPLED_SESSIONS, {\r\n    variables: { projectId: activeProject },\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n\r\n  const [generateTSReport] = useLazyQuery(GENERATE_TS_REPORT, {\r\n    fetchPolicy: \"network-only\",\r\n  });\r\n\r\n  const [unfilteredSessions, setUnfilteredSessions] = useState([]);\r\n  const [filteredSessions, setFilteredSessions] = useState([]);\r\n  const [submitBatchMutation] = useMutation(SUBMIT_BATCH);\r\n  const [selectedSessions, setSelectedSessions] = useState({});\r\n  const [mapVisible, setMapVisible] = useState(false);\r\n  const [selectedSession, setSelectedSession] = useState(null);\r\n  const [loadingImages, setLoadingImages] = useState({});\r\n  const [submitting, setSubmitting] = useState(false);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const mapRef = useRef(null); // Reference for the map\r\n  const [downloadingReport, setDownloadingReport] = useState(false);\r\n  const [startDate, setStartDate] = useState(subMonths(new Date(), 1));\r\n  const [endDate, setEndDate] = useState(new Date());\r\n  const [status, setStatus] = useState(\"approved\");\r\n\r\n  useEffect(() => {\r\n    if (mapVisible && mapRef.current) {\r\n      setTimeout(() => {\r\n        mapRef.current.invalidateSize(); // Adjust map size when the modal opens\r\n      }, 300);\r\n    }\r\n  }, [mapVisible]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setUnfilteredSessions(data.sampledTrainingSessions);\r\n      const initialLoadingState = data.sampledTrainingSessions.reduce(\r\n        (acc, session) => {\r\n          acc[session.id] = true;\r\n          return acc;\r\n        },\r\n        {}\r\n      );\r\n      setLoadingImages(initialLoadingState);\r\n\r\n      // Filter sessions with null image_review_result for the approval list\r\n      const filtered = data.sampledTrainingSessions.filter(\r\n        (session) => session.image_review_result === null\r\n      );\r\n      setFilteredSessions(filtered);\r\n    }\r\n  }, [data]);\r\n\r\n  const handleSelectionChange = (sessionId, status) => {\r\n    setSelectedSessions((prev) => ({\r\n      ...prev,\r\n      [sessionId]: status,\r\n    }));\r\n  };\r\n\r\n  const areAllSessionsReviewed = () => {\r\n    return filteredSessions\r\n      .slice(0, pageSize) // Only check sessions visible on the current page\r\n      .every((session) => selectedSessions[session.id]); // Ensure every session has a status\r\n  };\r\n\r\n  const handleSubmitBatch = () => {\r\n    if (!areAllSessionsReviewed()) {\r\n      toast.error(\"Please review all sessions before submitting.\");\r\n      return;\r\n    }\r\n\r\n    const batchInput = Object.entries(selectedSessions).map(\r\n      ([sessionId, status]) => ({\r\n        sessionId,\r\n        status,\r\n        userId,\r\n      })\r\n    );\r\n\r\n    if (!batchInput.length) {\r\n      toast.error(\"Please select at least one session to submit.\");\r\n      return;\r\n    }\r\n\r\n    setSubmitting(true);\r\n    submitBatchMutation({ variables: { input: batchInput } })\r\n      .then(() => {\r\n        setSelectedSessions({});\r\n        refetch(); // Refetch data to get updated sessions\r\n        setSubmitting(false);\r\n        toast.success(\"Batch submitted successfully!\");\r\n      })\r\n      .catch((error) => {\r\n        setSubmitting(false);\r\n        console.error(\"Error submitting batch:\", error);\r\n        toast.error(\"An error occurred while submitting the batch.\");\r\n      });\r\n  };\r\n\r\n  const handleImageClick = (formId, imageId) => {\r\n    setSelectedImage(\r\n      `${process.env.REACT_APP_API_URL}/image/${formId}/${imageId}`\r\n    );\r\n  };\r\n\r\n  const closeImageModal = () => {\r\n    setSelectedImage(null);\r\n  };\r\n\r\n  const handleViewMapClick = (session) => {\r\n    setSelectedSession(session);\r\n    setMapVisible(true);\r\n  };\r\n\r\n  const handleDownloadReport = () => {\r\n    if (!activeProject) {\r\n      toast.error(\"No project selected.\");\r\n      return;\r\n    }\r\n\r\n    setDownloadingReport(true);\r\n    generateTSReport({\r\n      variables: {\r\n        projectId: activeProject,\r\n        startDate: startDate ? format(startDate, \"yyyy-MM-dd\") : null,\r\n        endDate: endDate ? format(endDate, \"yyyy-MM-dd\") : null,\r\n        status: status || null,\r\n      },\r\n    })\r\n      .then((response) => {\r\n        const { generateTSApprovalReport } = response.data;\r\n        if (\r\n          generateTSApprovalReport.status === 200 &&\r\n          generateTSApprovalReport.file\r\n        ) {\r\n          const base64Data = generateTSApprovalReport.file.split(\",\")[1];\r\n          const blob = base64ToBlob(\r\n            base64Data,\r\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n          );\r\n          saveAs(blob, \"training-sessions-report.xlsx\");\r\n          toast.success(\"Download started.\");\r\n        } else {\r\n          toast.error(\r\n            generateTSApprovalReport.message || \"Failed to generate report.\"\r\n          );\r\n        }\r\n        setDownloadingReport(false);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error generating report:\", error);\r\n        toast.error(\"An error occurred while generating the report.\");\r\n        setDownloadingReport(false);\r\n      });\r\n  };\r\n\r\n  const base64ToBlob = (base64Data, contentType) => {\r\n    const byteCharacters = atob(base64Data);\r\n    const byteArrays = [];\r\n    for (let offset = 0; offset < byteCharacters.length; offset += 512) {\r\n      const slice = byteCharacters.slice(offset, offset + 512);\r\n      const byteNumbers = new Array(slice.length);\r\n      for (let i = 0; i < slice.length; i++) {\r\n        byteNumbers[i] = slice.charCodeAt(i);\r\n      }\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      byteArrays.push(byteArray);\r\n    }\r\n    return new Blob(byteArrays, { type: contentType });\r\n  };\r\n\r\n  const sessionCoords = selectedSession\r\n    ? { lat: selectedSession.ts_latitude, lng: selectedSession.ts_longitude }\r\n    : { lat: -1.2921, lng: 36.8219 };\r\n\r\n  const tsIcon = icon({\r\n    iconUrl:\r\n      \"https://img.icons8.com/?size=100&id=60013&format=png&color=000000\",\r\n    iconSize: [35, 35],\r\n    iconAnchor: [22, 94],\r\n    popupAnchor: [-3, -76],\r\n  });\r\n\r\n  if (loading) return <LoadingScreen />;\r\n\r\n  if (error)\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          height: \"100vh\",\r\n        }}\r\n      >\r\n        <Typography color=\"error\">Error loading data</Typography>\r\n      </div>\r\n    );\r\n\r\n  // Check if there are no sessions left to review\r\n  const noDataToReview = filteredSessions.length === 0;\r\n\r\n  return (\r\n    <div className=\"training-session-app\">\r\n      {/* Dashboard Section */}\r\n      <div className=\"dashboard\">\r\n        <h1 className=\"dashboard-title\">Training Session Overview</h1>\r\n        {/* Using unfilteredSessions for the statistics */}\r\n        <Statsframe sampledSessions={unfilteredSessions} />\r\n      </div>\r\n      {/* Download Report Button */}\r\n      {/* New Controls for Report Download */}\r\n      <div className=\"report-controls\">\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n          <div className=\"date-controls\">\r\n            <DatePicker\r\n              label=\"Start Date\"\r\n              value={startDate}\r\n              onChange={(date) => setStartDate(date)}\r\n              renderInput={(params) => <TextField {...params} />}\r\n            />\r\n            <DatePicker\r\n              label=\"End Date\"\r\n              value={endDate}\r\n              onChange={(date) => setEndDate(date)}\r\n              renderInput={(params) => <TextField {...params} />}\r\n            />\r\n          </div>\r\n        </LocalizationProvider>\r\n\r\n        <TextField\r\n          className=\"status-select\"\r\n          label=\"Status\"\r\n          select\r\n          value={status}\r\n          onChange={(e) => setStatus(e.target.value)}\r\n          variant=\"outlined\"\r\n        >\r\n          <MenuItem value=\"all\">All</MenuItem>\r\n          <MenuItem value=\"approved\">Correct</MenuItem>\r\n          <MenuItem value=\"invalid\">Incorrect</MenuItem>\r\n          <MenuItem value=\"unclear\">Unclear</MenuItem>\r\n          <MenuItem value=\"\">Not Reviewed</MenuItem>\r\n        </TextField>\r\n\r\n        <Button\r\n          className=\"download-report-button\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handleDownloadReport}\r\n          disabled={downloadingReport}\r\n        >\r\n          {downloadingReport ? \"Downloading...\" : \"Download Report\"}\r\n        </Button>\r\n      </div>\r\n\r\n      {/* No Data Message */}\r\n      {noDataToReview ? (\r\n        <div className=\"no__data\">\r\n          <h1 style={{ fontSize: \"20px\" }}>\r\n            Currently, there are no sessions to review. 🎉\r\n          </h1>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {/* List of Sessions with Multi-Approval */}\r\n          <h2 className=\"review-sessions-title\">Review Sessions</h2>\r\n          <div className=\"session-list\">\r\n            {filteredSessions.slice(0, pageSize).map((session) => {\r\n              const [formId, imageId] =\r\n                session?.session_image_url?.split(\"/\").slice(-2) || [];\r\n              return (\r\n                <div key={session.id} className=\"session-item\">\r\n                  <div className=\"session-image\">\r\n                    {loadingImages[imageId] && <LoadingScreen />}\r\n                    <img\r\n                      src={\r\n                        session?.session_image_url\r\n                          ? `${process.env.REACT_APP_API_URL}/image/${formId}/${imageId}`\r\n                          : null\r\n                      }\r\n                      alt=\"Session\"\r\n                      onClick={() => handleImageClick(formId, imageId)}\r\n                    />\r\n                  </div>\r\n                  <div className=\"session-details\">\r\n                    <h3>{session.training_module_name}</h3>\r\n                    <p>\r\n                      <strong>Trainer:</strong> {session.farmer_trainer_name}\r\n                    </p>\r\n                    <p>\r\n                      <strong>Total Attendance:</strong>{\" \"}\r\n                      {session.total_attendance}\r\n                    </p>\r\n                    <p>\r\n                      <strong>Male Attendance:</strong>{\" \"}\r\n                      {session.male_attendance}\r\n                    </p>\r\n                    <p>\r\n                      <strong>Female Attendance:</strong>{\" \"}\r\n                      {session.female_attendance}\r\n                    </p>\r\n                    <p>\r\n                      <strong>Training Date:</strong>{\" \"}\r\n                      {format(new Date(session.session_date), \"MMMM dd, yyyy\")}\r\n                    </p>\r\n                    <p>\r\n                      <strong>Training Group Name:</strong> {session.tg_name}\r\n                    </p>\r\n                  </div>\r\n                  <div className=\"actions-column\">\r\n                    <div className=\"review-actions\">\r\n                      <select\r\n                        onChange={(e) =>\r\n                          handleSelectionChange(session.id, e.target.value)\r\n                        }\r\n                      >\r\n                        <option value=\"\">-- Select --</option>\r\n                        <option value=\"approved\">Correct</option>\r\n                        <option value=\"invalid\">Incorrect</option>\r\n                        <option value=\"unclear\">Unclear</option>\r\n                      </select>\r\n                    </div>\r\n                    <button\r\n                      className=\"view-map-button\"\r\n                      onClick={() => handleViewMapClick(session)}\r\n                    >\r\n                      View Map\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n          {/* Submit Button for Batch */}\r\n          <button\r\n            className=\"submit-button\"\r\n            onClick={handleSubmitBatch}\r\n            disabled={submitting || !areAllSessionsReviewed()}\r\n          >\r\n            {submitting ? \"Submitting...\" : \"Submit Batch\"}\r\n          </button>\r\n        </>\r\n      )}\r\n\r\n      {/* Map Modal */}\r\n      {mapVisible && (\r\n        <div className=\"modal-overlay\">\r\n          <div className=\"modal\">\r\n            <div className=\"modal-header\">\r\n              <h2>\r\n                {selectedSession\r\n                  ? selectedSession.training_module_name\r\n                  : \"Map View\"}\r\n              </h2>\r\n              <button\r\n                onClick={() => setMapVisible(false)}\r\n                className=\"modal-close-button\"\r\n              >\r\n                &times;\r\n              </button>\r\n            </div>\r\n            <div className=\"modal-content\">\r\n              <div className=\"map-toolbar\"></div>\r\n              <div className=\"map-container\">\r\n                <MapContainer\r\n                  center={sessionCoords}\r\n                  zoom={6}\r\n                  scrollWheelZoom={false}\r\n                  style={{ height: \"500px\", width: \"100%\" }}\r\n                  whenCreated={(mapInstance) => (mapRef.current = mapInstance)} // Assign map instance to ref\r\n                >\r\n                  {/* Satellite and Streets Hybrid Layer */}\r\n                  <TileLayer\r\n                    url={`https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v11/tiles/512/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoieW11Z2VuZ2EiLCJhIjoiY20xN3NhOWJwMHFvcTJsc2Iyc2Z0Znd0aCJ9.A3EBUziAdNrV3nwrGvkv3g`}\r\n                    attribution='Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors | Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>'\r\n                  />\r\n                  {/* Marker for session location */}\r\n                  <Marker position={sessionCoords} icon={tsIcon}>\r\n                    <Popup className=\"custom-popup\">\r\n                      <h3>Training Session Location</h3>\r\n                      <p>\r\n                        {selectedSession\r\n                          ? selectedSession.location\r\n                          : \"San Francisco\"}\r\n                      </p>\r\n                    </Popup>\r\n                  </Marker>\r\n                </MapContainer>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {/* Image Modal */}\r\n      {selectedImage && (\r\n        <div className=\"image-modal\" onClick={closeImageModal}>\r\n          <img src={selectedImage} alt=\"Fullscreen Farm Visit\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TSApprove;\r\n","import React from 'react'\r\nimport './statscard.css'\r\n\r\nconst Statscard = ({ heading, figures, icon, color }) => {\r\n  return (\r\n    <div>\r\n      <div className='card__container'>\r\n        <div className='card__content'>\r\n          <div className='card__text'>\r\n            <p className='card__text1'>{heading}</p>\r\n            <p className='card__text2'>{figures}</p>\r\n          </div>\r\n          <div className='card__icon' style={{ backgroundColor: color }}>\r\n            {icon}{' '}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Statscard\r\n"],"names":["_ref","sampledSessions","statsData","heading","figures","length","icon","_jsx","MdGroups","color","filter","session","image_review_result","BsPersonBoundingBox","_jsxs","style","width","marginBottom","display","children","map","data","index","Statscard","TSApprove","activeProject","userId","useOutletContext","loading","error","refetch","useQuery","GET_SAMPLED_SESSIONS","variables","projectId","fetchPolicy","generateTSReport","useLazyQuery","GENERATE_TS_REPORT","unfilteredSessions","setUnfilteredSessions","useState","filteredSessions","setFilteredSessions","submitBatchMutation","useMutation","SUBMIT_BATCH","selectedSessions","setSelectedSessions","mapVisible","setMapVisible","selectedSession","setSelectedSession","loadingImages","setLoadingImages","submitting","setSubmitting","selectedImage","setSelectedImage","mapRef","useRef","downloadingReport","setDownloadingReport","startDate","setStartDate","subMonths","Date","endDate","setEndDate","status","setStatus","useEffect","current","setTimeout","invalidateSize","sampledTrainingSessions","initialLoadingState","reduce","acc","id","filtered","areAllSessionsReviewed","slice","every","base64ToBlob","base64Data","contentType","byteCharacters","atob","byteArrays","offset","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob","type","sessionCoords","lat","ts_latitude","lng","ts_longitude","tsIcon","iconUrl","iconSize","iconAnchor","popupAnchor","LoadingScreen","justifyContent","alignItems","height","Typography","noDataToReview","className","Statsframe","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","label","value","onChange","date","renderInput","params","TextField","select","e","target","variant","MenuItem","Button","onClick","handleDownloadReport","format","then","response","generateTSApprovalReport","file","split","blob","saveAs","toast","success","message","catch","console","disabled","fontSize","_Fragment","_session$session_imag","formId","imageId","session_image_url","src","alt","handleImageClick","training_module_name","farmer_trainer_name","total_attendance","male_attendance","female_attendance","session_date","tg_name","handleSelectionChange","sessionId","prev","handleViewMapClick","handleSubmitBatch","batchInput","Object","entries","input","MapContainer","center","zoom","scrollWheelZoom","whenCreated","mapInstance","TileLayer","url","attribution","Marker","position","Popup","location","closeImageModal","backgroundColor"],"sourceRoot":""}