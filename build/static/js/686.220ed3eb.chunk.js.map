{"version":3,"file":"static/js/686.220ed3eb.chunk.js","mappings":"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","sources":["pages/AAPerformance.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n} from \"recharts\";\r\nimport { BsDownload } from \"react-icons/bs\";\r\nimport * as XLSX from \"xlsx\";\r\nimport \"./AAList.css\";\r\n\r\nconst GET_AAS = gql`\r\n  query GetAAs($project_id: String!) {\r\n    getPerformanceByAA(project_id: $project_id) {\r\n      message\r\n      status\r\n      data {\r\n        id\r\n        name\r\n        monthlyCounts {\r\n          date\r\n          trainingCount\r\n          dpoCount\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst AAList = ({ selectedProject }) => {\r\n  const { loading, error, data } = useQuery(GET_AAS, {\r\n    variables: { project_id: selectedProject },\r\n  });\r\n  const [selectedAA, setSelectedAA] = useState(null);\r\n  const [selectWidth, setSelectWidth] = useState(\"auto\");\r\n  const selectRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (selectRef.current && data?.getPerformanceByAA?.data.length > 0) {\r\n      const longestOptionWidth = Math.max(\r\n        ...(data.getPerformanceByAA.data || []).map((aa) => aa.name.length * 8)\r\n      );\r\n      setSelectWidth(`${longestOptionWidth}px`);\r\n    }\r\n  }, [data]);\r\n\r\n  const handleAASelect = (selectedOption) => {\r\n    const selectedAAData = data?.getPerformanceByAA?.data.find(\r\n      (aa) => aa.id === selectedOption.value\r\n    );\r\n    setSelectedAA(selectedAAData);\r\n  };\r\n\r\n  const exportToExcel = () => {\r\n    const fileName = \"AA_Performance_Data.xlsx\";\r\n    const wsData = [];\r\n    data?.getPerformanceByAA?.data.forEach((aa) => {\r\n      aa.monthlyCounts.forEach((mc) => {\r\n        wsData.push({\r\n          Name: aa.name,\r\n          Date: mc.date,\r\n          \"DPO Count\": mc.dpoCount,\r\n          \"Training Count\": mc.trainingCount,\r\n        });\r\n      });\r\n    });\r\n\r\n    const ws = XLSX.utils.json_to_sheet(wsData);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"AA_Performance\");\r\n    XLSX.writeFile(wb, fileName);\r\n  };\r\n\r\n  return (\r\n    <div className=\"aa-list-container\">\r\n      <h1 className=\"title\">Agronomy Advisor Performance</h1>\r\n      <div className=\"select-export-container\">\r\n        <Select\r\n          className=\"select\"\r\n          options={data?.getPerformanceByAA?.data.map((aa) => ({\r\n            label: aa.name,\r\n            value: aa.id,\r\n          }))}\r\n          onChange={handleAASelect}\r\n          placeholder=\"Select an Agronomy Advisor...\"\r\n          value={\r\n            selectedAA ? { label: selectedAA.name, value: selectedAA.id } : null\r\n          }\r\n          styles={{\r\n            menuPortal: (base) => ({ ...base, zIndex: 9999 }),\r\n          }}\r\n          menuPortalTarget={document.body}\r\n          menuPlacement=\"auto\"\r\n          width={selectWidth}\r\n          ref={selectRef}\r\n        />\r\n        <button className=\"export-button\" onClick={exportToExcel}>\r\n          <BsDownload /> Export to Excel\r\n        </button>\r\n      </div>\r\n      {selectedAA && (\r\n        <div className=\"graph-container\">\r\n          <div className=\"graph-aa\">\r\n            <h4 className=\"graph-title\">\r\n              Performance Chart for {selectedAA.name}\r\n            </h4>\r\n            <LineChart width={600} height={300} data={selectedAA.monthlyCounts}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" />\r\n              <XAxis dataKey=\"date\" tick={{ fontSize: 12 }} />\r\n              <YAxis\r\n                label={{ value: \"Count\", angle: -90, position: \"insideLeft\" }}\r\n                ticks={[0, 20, 40, 60]}\r\n              />\r\n              <Tooltip />\r\n              <Legend />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey=\"trainingCount\"\r\n                name=\"Training Observations\"\r\n                stroke=\"#007bff\"\r\n              />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey=\"dpoCount\"\r\n                name=\"Demo Plot Observations\"\r\n                stroke=\"#28a745\"\r\n              />\r\n            </LineChart>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {loading && <p className=\"loading-message\">Loading...</p>}\r\n      {error && <p className=\"error-message\">Error: {error.message}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AAList;\r\n"],"names":["GET_AAS","gql","_ref","_data$getPerformanceB4","selectedProject","loading","error","data","useQuery","variables","project_id","selectedAA","setSelectedAA","useState","selectWidth","setSelectWidth","selectRef","useRef","useEffect","_data$getPerformanceB","current","getPerformanceByAA","length","longestOptionWidth","Math","max","map","aa","name","_jsxs","className","children","_jsx","Select","options","label","value","id","onChange","selectedOption","_data$getPerformanceB2","selectedAAData","find","placeholder","styles","menuPortal","base","zIndex","menuPortalTarget","document","body","menuPlacement","width","ref","onClick","exportToExcel","_data$getPerformanceB3","wsData","forEach","monthlyCounts","mc","push","Name","Date","date","dpoCount","trainingCount","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","BsDownload","LineChart","height","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","fontSize","YAxis","angle","position","ticks","Tooltip","Legend","Line","type","stroke","message"],"sourceRoot":""}