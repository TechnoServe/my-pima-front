{"version":3,"file":"static/js/25.0f96e124.chunk.js","mappings":"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","sources":["features/wetmill/index.jsx","graphql/queries/wetmills.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\r\nimport { GET_WETMILLS, EXPORT_WETMILLS_EXCEL } from \"../../graphql/queries/wetmills\";\r\nimport Table from \"../../components/Table/Table\";\r\nimport { toast } from \"react-hot-toast\";\r\nimport { Typography, Button, CircularProgress } from \"@mui/material\";\r\nimport LoadingScreen from \"../../components/LoadingScreen\";\r\nimport \"./Wetmills.css\";\r\n\r\nconst Wetmills = () => {\r\n  const [wetmills, setWetmills] = useState([]);\r\n  const { data, error, loading } = useQuery(GET_WETMILLS);\r\n\r\n  // useLazyQuery for export, matching the actual field name\r\n  const [exportExcel, { loading: exportLoading }] = useLazyQuery(\r\n    EXPORT_WETMILLS_EXCEL,\r\n    {\r\n      fetchPolicy: \"no-cache\",\r\n      onCompleted: ({ exportWetMillsDataExcel }) => {\r\n        // destructure the exact response key\r\n        const { filename, contentBase64 } = exportWetMillsDataExcel;\r\n\r\n        try {\r\n          // decode & download\r\n          const byteChars = atob(contentBase64);\r\n          const byteNumbers = Array.from(byteChars, (c) => c.charCodeAt(0));\r\n          const blob = new Blob([new Uint8Array(byteNumbers)], {\r\n            type:\r\n              \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n          });\r\n          const url = URL.createObjectURL(blob);\r\n          const link = document.createElement(\"a\");\r\n          link.href = url;\r\n          link.download = filename;\r\n          document.body.appendChild(link);\r\n          link.click();\r\n          link.remove();\r\n          URL.revokeObjectURL(url);\r\n          toast.success(\"Download started\");\r\n        } catch (e) {\r\n          console.error(e);\r\n          toast.error(\"Failed to download file\");\r\n        }\r\n      },\r\n      onError: (err) => {\r\n        console.error(err);\r\n        toast.error(err.message || \"Export failed\");\r\n      },\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (data?.getWetmills?.status === 200) {\r\n      setWetmills(data.getWetmills.wetmills);\r\n    }\r\n    if (error) {\r\n      toast.error(error.message);\r\n    }\r\n  }, [data, error]);\r\n\r\n  const columns = [\r\n    { id: \"num\", name: \"No.\", selector: (r) => r.num, sortable: true },\r\n    {\r\n      id: \"wet_mill_unique_id\",\r\n      name: \"Wetmill ID\",\r\n      selector: (r) => r.wet_mill_unique_id,\r\n      sortable: true,\r\n    },\r\n    { id: \"name\", name: \"Wetmill Name\", selector: (r) => r.name, sortable: true },\r\n    { id: \"country\", name: \"Country\", selector: (r) => r.country, sortable: true },\r\n    {\r\n      id: \"mill_status\",\r\n      name: \"Ownership\",\r\n      selector: (r) => r.mill_status || \"N/A\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"exporting_status\",\r\n      name: \"Exporting Status\",\r\n      selector: (r) => r.exporting_status || \"N/A\",\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"registration_date\",\r\n      name: \"Registered On\",\r\n      selector: (r) => r.registration_date,\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  const rows = wetmills.map((w, i) => ({ num: i + 1, ...w }));\r\n\r\n  if (error)\r\n    return (\r\n      <div className=\"circular_progress\">\r\n        <Typography color=\"error\">Error loading data</Typography>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"page__container\">\r\n      <h1 className=\"module__heading\">Wetmills</h1>\r\n\r\n      <div className=\"page__actions\">\r\n        <Button\r\n          className=\"export__button\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={() => exportExcel()}\r\n          disabled={exportLoading}\r\n          startIcon={exportLoading ? <CircularProgress size={20} /> : null}\r\n        >\r\n          {exportLoading ? \"Exporting...\" : \"Export Wet Mills Data\"}\r\n        </Button>\r\n      </div>\r\n\r\n      {loading ? (\r\n        <LoadingScreen />\r\n      ) : rows.length > 0 ? (\r\n        <Table columns={columns} data={rows} tableRowItem=\"wetmill\" />\r\n      ) : (\r\n        <div className=\"no__data\">\r\n          <h1 style={{ fontSize: \"20px\" }}>No Wetmills Found</h1>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Wetmills;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_WETMILLS = gql`\r\n  query GetWetmills {\r\n    getWetmills {\r\n      message\r\n      status\r\n      wetmills {\r\n        id\r\n        wet_mill_unique_id\r\n        commcare_case_id\r\n        name\r\n        mill_status\r\n        exporting_status\r\n        programe\r\n        country\r\n        manager_name\r\n        manager_role\r\n        comments\r\n        wetmill_counter\r\n        ba_signature\r\n        manager_signature\r\n        tor_page_picture\r\n        registration_date\r\n        created_at\r\n        updated_at\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const EXPORT_WETMILLS_EXCEL = gql`\r\n  query ExportWetmillsExcel {\r\n    exportWetMillsDataExcel {\r\n      filename\r\n      contentBase64\r\n    }\r\n  }\r\n`;\r\n"],"names":["Wetmills","wetmills","setWetmills","useState","data","error","loading","useQuery","GET_WETMILLS","exportExcel","exportLoading","useLazyQuery","EXPORT_WETMILLS_EXCEL","fetchPolicy","onCompleted","_ref","exportWetMillsDataExcel","filename","contentBase64","byteChars","atob","byteNumbers","Array","from","c","charCodeAt","blob","Blob","Uint8Array","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","remove","revokeObjectURL","toast","success","e","console","onError","err","message","useEffect","_data$getWetmills","getWetmills","status","rows","map","w","i","num","_jsx","className","children","Typography","color","_jsxs","Button","variant","onClick","disabled","startIcon","CircularProgress","size","LoadingScreen","length","Table","columns","id","name","selector","r","sortable","wet_mill_unique_id","country","mill_status","exporting_status","registration_date","tableRowItem","style","fontSize","gql"],"sourceRoot":""}