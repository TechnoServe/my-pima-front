{"version":3,"file":"static/js/686.19c66dff.chunk.js","mappings":"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","sources":["pages/AAPerformance.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from \"recharts\";\nimport { BsDownload } from \"react-icons/bs\";\nimport * as XLSX from \"xlsx\";\nimport \"./AAList.css\";\nimport { useOutletContext } from \"react-router-dom\";\nimport { Typography } from \"@mui/material\";\nimport LoadingScreen from \"../components/LoadingScreen\";\n\nconst GET_AAS = gql`\n  query GetAAs($project_id: String!) {\n    getPerformanceByAA(project_id: $project_id) {\n      message\n      status\n      data {\n        id\n        name\n        monthlyCounts {\n          date\n          trainingCount\n          dpoCount\n        }\n      }\n    }\n  }\n`;\n\nconst AAList = () => {\n  const { activeProject } = useOutletContext();\n\n  const { loading, error, data } = useQuery(GET_AAS, {\n    variables: { project_id: activeProject },\n  });\n  \n  const [selectedAA, setSelectedAA] = useState(null);\n  const [selectWidth, setSelectWidth] = useState(\"auto\");\n  const selectRef = useRef(null);\n\n  useEffect(() => {\n    if (selectRef.current && data?.getPerformanceByAA?.data.length > 0) {\n      const longestOptionWidth = Math.max(\n        ...(data.getPerformanceByAA.data || []).map((aa) => aa.name.length * 8)\n      );\n      setSelectWidth(`${longestOptionWidth}px`);\n    }\n  }, [data]);\n\n  const handleAASelect = (selectedOption) => {\n    const selectedAAData = data?.getPerformanceByAA?.data.find(\n      (aa) => aa.id === selectedOption.value\n    );\n    setSelectedAA(selectedAAData);\n  };\n\n  const exportToExcel = () => {\n    const fileName = \"AA_Performance_Data.xlsx\";\n    const wsData = [];\n    data?.getPerformanceByAA?.data.forEach((aa) => {\n      aa.monthlyCounts.forEach((mc) => {\n        wsData.push({\n          Name: aa.name,\n          Date: mc.date,\n          \"DPO Count\": mc.dpoCount,\n          \"Training Count\": mc.trainingCount,\n        });\n      });\n    });\n\n    const ws = XLSX.utils.json_to_sheet(wsData);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"AA_Performance\");\n    XLSX.writeFile(wb, fileName);\n  };\n\n  if (loading) return <LoadingScreen />;\n\n  if (error)\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100vh\",\n        }}\n      >\n        <Typography color=\"error\">Error loading data</Typography>\n      </div>\n    );\n\n  return (\n    <div className=\"aa-list-container\">\n      <h1 className=\"title\">Agronomy Advisor Performance</h1>\n      <div className=\"select-export-container\">\n        <Select\n          className=\"select\"\n          options={data?.getPerformanceByAA?.data.map((aa) => ({\n            label: aa.name,\n            value: aa.id,\n          }))}\n          onChange={handleAASelect}\n          placeholder=\"Select an Agronomy Advisor...\"\n          value={\n            selectedAA ? { label: selectedAA.name, value: selectedAA.id } : null\n          }\n          styles={{\n            menuPortal: (base) => ({ ...base, zIndex: 9999 }),\n          }}\n          menuPortalTarget={document.body}\n          menuPlacement=\"auto\"\n          width={selectWidth}\n          ref={selectRef}\n        />\n        <button className=\"export-button\" onClick={exportToExcel}>\n          <BsDownload /> Export to Excel\n        </button>\n      </div>\n      {selectedAA && (\n        <div className=\"graph-container\">\n          <div className=\"graph-aa\">\n            <h4 className=\"graph-title\">\n              Performance Chart for {selectedAA.name}\n            </h4>\n            <LineChart width={600} height={300} data={selectedAA.monthlyCounts}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" tick={{ fontSize: 12 }} />\n              <YAxis\n                label={{ value: \"Count\", angle: -90, position: \"insideLeft\" }}\n                ticks={[0, 20, 40, 60]}\n              />\n              <Tooltip />\n              <Legend />\n              <Line\n                type=\"monotone\"\n                dataKey=\"trainingCount\"\n                name=\"Training Observations\"\n                stroke=\"#007bff\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"dpoCount\"\n                name=\"Demo Plot Observations\"\n                stroke=\"#28a745\"\n              />\n            </LineChart>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AAList;\n"],"names":["GET_AAS","gql","AAList","_data$getPerformanceB4","activeProject","useOutletContext","loading","error","data","useQuery","variables","project_id","selectedAA","setSelectedAA","useState","selectWidth","setSelectWidth","selectRef","useRef","useEffect","_data$getPerformanceB","current","getPerformanceByAA","length","longestOptionWidth","Math","max","map","aa","name","_jsx","LoadingScreen","style","display","justifyContent","alignItems","height","children","Typography","color","_jsxs","className","Select","options","label","value","id","onChange","selectedOption","_data$getPerformanceB2","selectedAAData","find","placeholder","styles","menuPortal","base","zIndex","menuPortalTarget","document","body","menuPlacement","width","ref","onClick","exportToExcel","_data$getPerformanceB3","wsData","forEach","monthlyCounts","mc","push","Name","Date","date","dpoCount","trainingCount","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","BsDownload","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","fontSize","YAxis","angle","position","ticks","Tooltip","Legend","Line","type","stroke"],"sourceRoot":""}