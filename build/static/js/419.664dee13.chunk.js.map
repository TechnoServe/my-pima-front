{"version":3,"file":"static/js/419.664dee13.chunk.js","mappings":"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","sources":["../node_modules/recharts/es6/chart/BarChart.js","pages/FTPerformance.js"],"sourcesContent":["/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import React, { useState, useRef, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  BarChart,\n  Bar,\n} from \"recharts\";\nimport \"./FTPerformance.css\";\nimport * as XLSX from \"xlsx\";\n\nimport LoadingScreen from \"../components/LoadingScreen\";\nimport { Typography } from \"@mui/material\";\nimport { useOutletContext } from \"react-router-dom\";\n\nconst GET_PERFORMANCE_BY_FT = gql`\n  query GetPerformanceByFT($projectId: String!) {\n    getPerformanceByFT(project_id: $projectId) {\n      message\n      status\n      data {\n        id\n        name\n        monthlyPerformance {\n          month\n          year\n          percentage\n        }\n        monthlyVisitedFarms {\n          month\n          year\n          totalVisitedFarms\n        }\n        monthlyRating {\n          month\n          year\n          avgScore\n        }\n        monthlyAttDifference {\n          month\n          year\n          difference\n          ftAttendance\n          aaAttendance\n        }\n      }\n    }\n  }\n`;\n\nconst FTPerformance = () => {\n  const { activeProject } = useOutletContext();\n  const { loading, error, data } = useQuery(GET_PERFORMANCE_BY_FT, {\n    variables: { projectId: activeProject },\n  });\n\n  const [selectedFT, setSelectedFT] = useState(null);\n  const [selectWidth, setSelectWidth] = useState(\"auto\");\n  const selectRef = useRef(null);\n\n  useEffect(() => {\n    if (selectRef.current && data?.getPerformanceByFT?.data.length > 0) {\n      const longestOptionWidth = Math.max(\n        ...data.getPerformanceByFT.data.map((ft) => ft.name.length * 8)\n      );\n      setSelectWidth(`${longestOptionWidth}px`);\n    }\n  }, [data]);\n\n  const handleFTSelect = (selectedOption) => {\n    const selectedFTData = data?.getPerformanceByFT?.data.find(\n      (ft) => ft.id === selectedOption.value\n    );\n    setSelectedFT(selectedFTData);\n  };\n\n  const formatLabel = ({ month, year }) => `${month}/${year}`;\n\n  const exportToExcel = () => {\n    if (!data || !data.getPerformanceByFT || !data.getPerformanceByFT.data)\n      return;\n\n    const fileName = `FT_Performance_Data.xlsx`;\n    const wsData = [];\n\n    data.getPerformanceByFT.data.forEach((ft) => {\n      ft.monthlyPerformance.forEach((mp, index) => {\n        const rowData = {\n          Name: ft.name,\n          Month: `${mp.month}/${mp.year}`,\n          \"% FFGs Submitted\": mp.percentage || \"\",\n          \"Total Visited Farms\": \"\",\n          \"Average Performance Grade\": \"\",\n          \"TO vs AA Attendance difference\": \"\",\n          \"FT Attendance\": \"\",\n          \"AA Attendance\": \"\",\n        };\n\n        const mvf = ft.monthlyVisitedFarms.find(\n          (item) => item.month === mp.month && item.year === mp.year\n        );\n        if (mvf) rowData[\"Total Visited Farms\"] = mvf.totalVisitedFarms;\n\n        const mr = ft.monthlyRating.find(\n          (item) => item.month === mp.month && item.year === mp.year\n        );\n        if (mr) rowData[\"Average Performance Grade\"] = mr.avgScore;\n\n        const mad = ft.monthlyAttDifference.find(\n          (item) => item.month === mp.month && item.year === mp.year\n        );\n        if (mad) {\n          rowData[\"TO vs AA Attendance difference\"] = mad.difference;\n          rowData[\"FT Attendance\"] = mad.ftAttendance;\n          rowData[\"AA Attendance\"] = mad.aaAttendance;\n        }\n\n        wsData.push(rowData);\n      });\n    });\n\n    const ws = XLSX.utils.json_to_sheet(wsData);\n    const wb = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(wb, ws, \"FT_Performance\");\n    XLSX.writeFile(wb, fileName);\n  };\n\n  if (loading) return <LoadingScreen />;\n\n  if (error)\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100vh\",\n        }}\n      >\n        <Typography color=\"error\">Error loading data</Typography>\n      </div>\n    );\n\n  return (\n    <div className=\"ft-performance-container\">\n      <h4 className=\"page-title\">Select a Farmer Trainer</h4>\n      <div className=\"select-download-container\">\n        {loading ? (\n          <p className=\"loading-message\">Loading...</p>\n        ) : error ? (\n          <p className=\"error-message\">\n            Error: Unable to fetch data. Refresh page, if it doesn't work please\n            contact the PIMA team.\n          </p>\n        ) : (\n          <>\n            <Select\n              className=\"select\"\n              options={data?.getPerformanceByFT?.data.map((ft) => ({\n                label: ft.name,\n                value: ft.id,\n              }))}\n              onChange={handleFTSelect}\n              placeholder=\"Search Farmer Trainers...\"\n              value={\n                selectedFT\n                  ? { label: selectedFT.name, value: selectedFT.id }\n                  : null\n              }\n              styles={{\n                menuPortal: (base) => ({ ...base, zIndex: 9999 }),\n              }}\n              menuPortalTarget={document.body}\n              menuPlacement=\"auto\"\n              width={selectWidth}\n              ref={selectRef}\n            />\n            <button className=\"download-button\" onClick={exportToExcel}>\n              Download Performance Data\n            </button>\n          </>\n        )}\n      </div>\n\n      {selectedFT && (\n        <div>\n          <h3 className=\"section-title\">Graphs for {selectedFT.name}</h3>\n          <div className=\"graph-container\">\n            <div className=\"graph\">\n              <h4>% of FFGs submitted on PIMA per month</h4>\n              <BarChart\n                width={600}\n                height={300}\n                data={selectedFT.monthlyPerformance}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey={({ month, year }) => formatLabel({ month, year })}\n                  allowDataOverflow={false}\n                />\n                <YAxis ticks={[0, 20, 40, 60, 80, 100]} />\n                <Tooltip />\n                <Legend />\n                <Bar\n                  dataKey=\"percentage\"\n                  name=\"% FFGs Submitted\"\n                  fill=\"#82ca9d\"\n                />\n              </BarChart>\n            </div>\n\n            <div className=\"graph\">\n              <h4>Number of Farm Visits performed per month</h4>\n              <LineChart\n                width={600}\n                height={300}\n                data={selectedFT.monthlyVisitedFarms}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey={({ month, year }) => formatLabel({ month, year })}\n                />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"totalVisitedFarms\"\n                  name=\"Farm Visits\"\n                  stroke=\"#8884d8\"\n                />\n              </LineChart>\n            </div>\n\n            <div className=\"graph\">\n              <h4>FT Average Performance Grade per month</h4>\n              <LineChart\n                width={600}\n                height={300}\n                data={selectedFT.monthlyRating}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey={({ month, year }) => formatLabel({ month, year })}\n                />\n                <YAxis ticks={[0, 1, 2, 3, 4]} />\n                <Tooltip />\n                <Legend />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"avgScore\"\n                  name=\"Average Performance Grade\"\n                  stroke=\"#ff7300\"\n                />\n              </LineChart>\n            </div>\n\n            <div className=\"graph\">\n              <h4>FT VS AA Attendance Numbers</h4>\n              <LineChart\n                width={600}\n                height={300}\n                data={selectedFT.monthlyAttDifference}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis\n                  dataKey={({ month, year }) => formatLabel({ month, year })}\n                />\n                <YAxis ticks={[0, 20, 40, 60]} />\n                <Tooltip />\n                <Legend />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"difference\"\n                  name=\"TO vs AA Attendance difference\"\n                  stroke=\"#ff0000\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"ftAttendance\"\n                  name=\"FT Attendance\"\n                  stroke=\"#00ff00\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"aaAttendance\"\n                  name=\"AA Attendance\"\n                  stroke=\"#0000ff\"\n                />\n              </LineChart>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FTPerformance;\n"],"names":["BarChart","generateCategoricalChart","chartName","GraphicalChild","Bar","defaultTooltipEventType","validateTooltipEventTypes","axisComponents","axisType","AxisComp","XAxis","YAxis","formatAxisMap","GET_PERFORMANCE_BY_FT","gql","FTPerformance","_data$getPerformanceB3","activeProject","useOutletContext","loading","error","data","useQuery","variables","projectId","selectedFT","setSelectedFT","useState","selectWidth","setSelectWidth","selectRef","useRef","useEffect","_data$getPerformanceB","current","getPerformanceByFT","length","longestOptionWidth","Math","max","map","ft","name","formatLabel","_ref","month","year","_jsx","LoadingScreen","style","display","justifyContent","alignItems","height","children","Typography","color","_jsxs","className","_Fragment","Select","options","label","value","id","onChange","selectedOption","_data$getPerformanceB2","selectedFTData","find","placeholder","styles","menuPortal","base","zIndex","menuPortalTarget","document","body","menuPlacement","width","ref","onClick","exportToExcel","wsData","forEach","monthlyPerformance","mp","index","rowData","Name","Month","percentage","mvf","monthlyVisitedFarms","item","totalVisitedFarms","mr","monthlyRating","avgScore","mad","monthlyAttDifference","difference","ftAttendance","aaAttendance","push","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","dataKey","_ref2","allowDataOverflow","ticks","Tooltip","Legend","fill","LineChart","_ref3","Line","type","stroke","_ref4","_ref5"],"sourceRoot":""}