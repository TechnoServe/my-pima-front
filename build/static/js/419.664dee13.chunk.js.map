{"version":3,"file":"static/js/419.664dee13.chunk.js","mappings":"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","sources":["../node_modules/recharts/es6/chart/BarChart.js","pages/FTPerformance.js"],"sourcesContent":["/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Select from \"react-select\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  BarChart,\r\n  Bar,\r\n} from \"recharts\";\r\nimport \"./FTPerformance.css\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\nimport LoadingScreen from \"../components/LoadingScreen\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useOutletContext } from \"react-router-dom\";\r\n\r\nconst GET_PERFORMANCE_BY_FT = gql`\r\n  query GetPerformanceByFT($projectId: String!) {\r\n    getPerformanceByFT(project_id: $projectId) {\r\n      message\r\n      status\r\n      data {\r\n        id\r\n        name\r\n        monthlyPerformance {\r\n          month\r\n          year\r\n          percentage\r\n        }\r\n        monthlyVisitedFarms {\r\n          month\r\n          year\r\n          totalVisitedFarms\r\n        }\r\n        monthlyRating {\r\n          month\r\n          year\r\n          avgScore\r\n        }\r\n        monthlyAttDifference {\r\n          month\r\n          year\r\n          difference\r\n          ftAttendance\r\n          aaAttendance\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst FTPerformance = () => {\r\n  const { activeProject } = useOutletContext();\r\n  const { loading, error, data } = useQuery(GET_PERFORMANCE_BY_FT, {\r\n    variables: { projectId: activeProject },\r\n  });\r\n\r\n  const [selectedFT, setSelectedFT] = useState(null);\r\n  const [selectWidth, setSelectWidth] = useState(\"auto\");\r\n  const selectRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (selectRef.current && data?.getPerformanceByFT?.data.length > 0) {\r\n      const longestOptionWidth = Math.max(\r\n        ...data.getPerformanceByFT.data.map((ft) => ft.name.length * 8)\r\n      );\r\n      setSelectWidth(`${longestOptionWidth}px`);\r\n    }\r\n  }, [data]);\r\n\r\n  const handleFTSelect = (selectedOption) => {\r\n    const selectedFTData = data?.getPerformanceByFT?.data.find(\r\n      (ft) => ft.id === selectedOption.value\r\n    );\r\n    setSelectedFT(selectedFTData);\r\n  };\r\n\r\n  const formatLabel = ({ month, year }) => `${month}/${year}`;\r\n\r\n  const exportToExcel = () => {\r\n    if (!data || !data.getPerformanceByFT || !data.getPerformanceByFT.data)\r\n      return;\r\n\r\n    const fileName = `FT_Performance_Data.xlsx`;\r\n    const wsData = [];\r\n\r\n    data.getPerformanceByFT.data.forEach((ft) => {\r\n      ft.monthlyPerformance.forEach((mp, index) => {\r\n        const rowData = {\r\n          Name: ft.name,\r\n          Month: `${mp.month}/${mp.year}`,\r\n          \"% FFGs Submitted\": mp.percentage || \"\",\r\n          \"Total Visited Farms\": \"\",\r\n          \"Average Performance Grade\": \"\",\r\n          \"TO vs AA Attendance difference\": \"\",\r\n          \"FT Attendance\": \"\",\r\n          \"AA Attendance\": \"\",\r\n        };\r\n\r\n        const mvf = ft.monthlyVisitedFarms.find(\r\n          (item) => item.month === mp.month && item.year === mp.year\r\n        );\r\n        if (mvf) rowData[\"Total Visited Farms\"] = mvf.totalVisitedFarms;\r\n\r\n        const mr = ft.monthlyRating.find(\r\n          (item) => item.month === mp.month && item.year === mp.year\r\n        );\r\n        if (mr) rowData[\"Average Performance Grade\"] = mr.avgScore;\r\n\r\n        const mad = ft.monthlyAttDifference.find(\r\n          (item) => item.month === mp.month && item.year === mp.year\r\n        );\r\n        if (mad) {\r\n          rowData[\"TO vs AA Attendance difference\"] = mad.difference;\r\n          rowData[\"FT Attendance\"] = mad.ftAttendance;\r\n          rowData[\"AA Attendance\"] = mad.aaAttendance;\r\n        }\r\n\r\n        wsData.push(rowData);\r\n      });\r\n    });\r\n\r\n    const ws = XLSX.utils.json_to_sheet(wsData);\r\n    const wb = XLSX.utils.book_new();\r\n    XLSX.utils.book_append_sheet(wb, ws, \"FT_Performance\");\r\n    XLSX.writeFile(wb, fileName);\r\n  };\r\n\r\n  if (loading) return <LoadingScreen />;\r\n\r\n  if (error)\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n          height: \"100vh\",\r\n        }}\r\n      >\r\n        <Typography color=\"error\">Error loading data</Typography>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"ft-performance-container\">\r\n      <h4 className=\"page-title\">Select a Farmer Trainer</h4>\r\n      <div className=\"select-download-container\">\r\n        {loading ? (\r\n          <p className=\"loading-message\">Loading...</p>\r\n        ) : error ? (\r\n          <p className=\"error-message\">\r\n            Error: Unable to fetch data. Refresh page, if it doesn't work please\r\n            contact the PIMA team.\r\n          </p>\r\n        ) : (\r\n          <>\r\n            <Select\r\n              className=\"select\"\r\n              options={data?.getPerformanceByFT?.data.map((ft) => ({\r\n                label: ft.name,\r\n                value: ft.id,\r\n              }))}\r\n              onChange={handleFTSelect}\r\n              placeholder=\"Search Farmer Trainers...\"\r\n              value={\r\n                selectedFT\r\n                  ? { label: selectedFT.name, value: selectedFT.id }\r\n                  : null\r\n              }\r\n              styles={{\r\n                menuPortal: (base) => ({ ...base, zIndex: 9999 }),\r\n              }}\r\n              menuPortalTarget={document.body}\r\n              menuPlacement=\"auto\"\r\n              width={selectWidth}\r\n              ref={selectRef}\r\n            />\r\n            <button className=\"download-button\" onClick={exportToExcel}>\r\n              Download Performance Data\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n\r\n      {selectedFT && (\r\n        <div>\r\n          <h3 className=\"section-title\">Graphs for {selectedFT.name}</h3>\r\n          <div className=\"graph-container\">\r\n            <div className=\"graph\">\r\n              <h4>% of FFGs submitted on PIMA per month</h4>\r\n              <BarChart\r\n                width={600}\r\n                height={300}\r\n                data={selectedFT.monthlyPerformance}\r\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis\r\n                  dataKey={({ month, year }) => formatLabel({ month, year })}\r\n                  allowDataOverflow={false}\r\n                />\r\n                <YAxis ticks={[0, 20, 40, 60, 80, 100]} />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Bar\r\n                  dataKey=\"percentage\"\r\n                  name=\"% FFGs Submitted\"\r\n                  fill=\"#82ca9d\"\r\n                />\r\n              </BarChart>\r\n            </div>\r\n\r\n            <div className=\"graph\">\r\n              <h4>Number of Farm Visits performed per month</h4>\r\n              <LineChart\r\n                width={600}\r\n                height={300}\r\n                data={selectedFT.monthlyVisitedFarms}\r\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis\r\n                  dataKey={({ month, year }) => formatLabel({ month, year })}\r\n                />\r\n                <YAxis />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line\r\n                  type=\"monotone\"\r\n                  dataKey=\"totalVisitedFarms\"\r\n                  name=\"Farm Visits\"\r\n                  stroke=\"#8884d8\"\r\n                />\r\n              </LineChart>\r\n            </div>\r\n\r\n            <div className=\"graph\">\r\n              <h4>FT Average Performance Grade per month</h4>\r\n              <LineChart\r\n                width={600}\r\n                height={300}\r\n                data={selectedFT.monthlyRating}\r\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis\r\n                  dataKey={({ month, year }) => formatLabel({ month, year })}\r\n                />\r\n                <YAxis ticks={[0, 1, 2, 3, 4]} />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line\r\n                  type=\"monotone\"\r\n                  dataKey=\"avgScore\"\r\n                  name=\"Average Performance Grade\"\r\n                  stroke=\"#ff7300\"\r\n                />\r\n              </LineChart>\r\n            </div>\r\n\r\n            <div className=\"graph\">\r\n              <h4>FT VS AA Attendance Numbers</h4>\r\n              <LineChart\r\n                width={600}\r\n                height={300}\r\n                data={selectedFT.monthlyAttDifference}\r\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\r\n              >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <XAxis\r\n                  dataKey={({ month, year }) => formatLabel({ month, year })}\r\n                />\r\n                <YAxis ticks={[0, 20, 40, 60]} />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line\r\n                  type=\"monotone\"\r\n                  dataKey=\"difference\"\r\n                  name=\"TO vs AA Attendance difference\"\r\n                  stroke=\"#ff0000\"\r\n                />\r\n                <Line\r\n                  type=\"monotone\"\r\n                  dataKey=\"ftAttendance\"\r\n                  name=\"FT Attendance\"\r\n                  stroke=\"#00ff00\"\r\n                />\r\n                <Line\r\n                  type=\"monotone\"\r\n                  dataKey=\"aaAttendance\"\r\n                  name=\"AA Attendance\"\r\n                  stroke=\"#0000ff\"\r\n                />\r\n              </LineChart>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FTPerformance;\r\n"],"names":["BarChart","generateCategoricalChart","chartName","GraphicalChild","Bar","defaultTooltipEventType","validateTooltipEventTypes","axisComponents","axisType","AxisComp","XAxis","YAxis","formatAxisMap","GET_PERFORMANCE_BY_FT","gql","FTPerformance","_data$getPerformanceB3","activeProject","useOutletContext","loading","error","data","useQuery","variables","projectId","selectedFT","setSelectedFT","useState","selectWidth","setSelectWidth","selectRef","useRef","useEffect","_data$getPerformanceB","current","getPerformanceByFT","length","longestOptionWidth","Math","max","map","ft","name","formatLabel","_ref","month","year","_jsx","LoadingScreen","style","display","justifyContent","alignItems","height","children","Typography","color","_jsxs","className","_Fragment","Select","options","label","value","id","onChange","selectedOption","_data$getPerformanceB2","selectedFTData","find","placeholder","styles","menuPortal","base","zIndex","menuPortalTarget","document","body","menuPlacement","width","ref","onClick","exportToExcel","wsData","forEach","monthlyPerformance","mp","index","rowData","Name","Month","percentage","mvf","monthlyVisitedFarms","item","totalVisitedFarms","mr","monthlyRating","avgScore","mad","monthlyAttDifference","difference","ftAttendance","aaAttendance","push","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","dataKey","_ref2","allowDataOverflow","ticks","Tooltip","Legend","fill","LineChart","_ref3","Line","type","stroke","_ref4","_ref5"],"sourceRoot":""}