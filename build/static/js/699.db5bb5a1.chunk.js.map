{"version":3,"file":"static/js/699.db5bb5a1.chunk.js","mappings":"2TAKA,MA2CA,EA3CmBA,IAA0B,IAAzB,gBAAEC,GAAiBD,EAErC,MAAME,EAAY,CAChB,CACEC,QAAS,gBACTC,QAASH,EAAgBI,OACzBC,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,IAAQ,IACfC,MAAO,WAET,CACEN,QAAS,iBACTC,QAASH,EAAgBS,QACtBC,GAA4C,OAAhCA,EAAQC,sBACrBP,OACFC,MAAMC,EAAAA,EAAAA,KAACC,EAAAA,IAAQ,IACfC,MAAO,WAET,CACEN,QAAS,eACTC,QAASH,EAAgBS,QACtBC,GAA4C,OAAhCA,EAAQC,sBACrBP,OACFC,MAAMC,EAAAA,EAAAA,KAACM,EAAAA,IAAmB,IAC1BJ,MAAO,YAIX,OACEK,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,MAAO,OAAQC,aAAc,OAAQC,QAAS,QAASC,SAAA,CAClEjB,EAAUkB,KAAI,CAACC,EAAMC,KACpBf,EAAAA,EAAAA,KAAA,OAAAY,UACEZ,EAAAA,EAAAA,KAACgB,EAAAA,EAAS,CACRpB,QAASkB,EAAKlB,QACdC,QAASiB,EAAKjB,QACdE,KAAMe,EAAKf,KACXG,MAAOY,EAAKZ,SALNa,KAQR,MACA,E,4HCvBV,MAyZA,EAvZkBE,KAChB,MAAM,cAAEC,EAAa,OAAEC,IAAWC,EAAAA,EAAAA,OAE5B,KAAEN,EAAI,QAAEO,EAAO,MAAEC,EAAK,QAAEC,IAAYC,EAAAA,EAAAA,GAASC,EAAAA,GAAsB,CACvEC,UAAW,CAAEC,UAAWT,GACxBU,YAAa,kBAGRC,IAAoBC,EAAAA,EAAAA,GAAaC,EAAAA,GAAoB,CAC1DH,YAAa,kBAGRI,EAAoBC,IAAyBC,EAAAA,EAAAA,UAAS,KACtDC,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAS,KAClDG,IAAuBC,EAAAA,EAAAA,GAAYC,EAAAA,KACnCC,EAAkBC,IAAuBP,EAAAA,EAAAA,UAAS,CAAC,IACnDQ,EAAYC,IAAiBT,EAAAA,EAAAA,WAAS,IACtCU,EAAiBC,IAAsBX,EAAAA,EAAAA,UAAS,OAChDY,EAAeC,IAAoBb,EAAAA,EAAAA,UAAS,CAAC,IAC7Cc,EAAYC,IAAiBf,EAAAA,EAAAA,WAAS,IACtCgB,EAAeC,IAAoBjB,EAAAA,EAAAA,UAAS,MAC7CkB,GAASC,EAAAA,EAAAA,QAAO,OACfC,EAAmBC,IAAwBrB,EAAAA,EAAAA,WAAS,IACpDsB,EAAWC,IAAgBvB,EAAAA,EAAAA,WAASwB,EAAAA,EAAAA,GAAU,IAAIC,KAAQ,KAC1DC,GAASC,KAAc3B,EAAAA,EAAAA,UAAS,IAAIyB,OACpCG,GAAQC,KAAa7B,EAAAA,EAAAA,UAAS,aAErC8B,EAAAA,EAAAA,YAAU,KACJtB,GAAcU,EAAOa,SACvBC,YAAW,KACTd,EAAOa,QAAQE,gBAAgB,GAC9B,IACL,GACC,CAACzB,KAEJsB,EAAAA,EAAAA,YAAU,KACR,GAAIlD,EAAM,CACRmB,EAAsBnB,EAAKsD,yBAC3B,MAAMC,EAAsBvD,EAAKsD,wBAAwBE,QACvD,CAACC,EAAKnE,KACJmE,EAAInE,EAAQoE,KAAM,EACXD,IAET,CAAC,GAEHxB,EAAiBsB,GAGjB,MAAMI,EAAW3D,EAAKsD,wBAAwBjE,QAC3CC,GAA4C,OAAhCA,EAAQC,sBAEvB+B,EAAoBqC,EACtB,IACC,CAAC3D,IAEJ,MAOM4D,GAAyBA,IACtBvC,EACJwC,MAAM,EAlEI,GAmEVC,OAAOxE,GAAYoC,EAAiBpC,EAAQoE,MA8F3CK,GAAeA,CAACC,EAAYC,KAChC,MAAMC,EAAiBC,KAAKH,GACtBI,EAAa,GACnB,IAAK,IAAIC,EAAS,EAAGA,EAASH,EAAelF,OAAQqF,GAAU,IAAK,CAClE,MAAMR,EAAQK,EAAeL,MAAMQ,EAAQA,EAAS,KAC9CC,EAAc,IAAIC,MAAMV,EAAM7E,QACpC,IAAK,IAAIwF,EAAI,EAAGA,EAAIX,EAAM7E,OAAQwF,IAChCF,EAAYE,GAAKX,EAAMY,WAAWD,GAEpC,MAAME,EAAY,IAAIC,WAAWL,GACjCF,EAAWQ,KAAKF,EAClB,CACA,OAAO,IAAIG,KAAKT,EAAY,CAAEU,KAAMb,GAAc,EAG9Cc,GAAgBjD,EAClB,CAAEkD,IAAKlD,EAAgBmD,YAAaC,IAAKpD,EAAgBqD,cACzD,CAAEH,KAAM,OAAQE,IAAK,SAEnBE,IAASnG,EAAAA,EAAAA,MAAK,CAClBoG,QACE,oEACFC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,EAAE,GAAI,MAGrB,GAAIjF,EAAS,OAAOrB,EAAAA,EAAAA,KAACuG,EAAAA,EAAa,IAElC,GAAIjF,EACF,OACEtB,EAAAA,EAAAA,KAAA,OACEQ,MAAO,CACLG,QAAS,OACT6F,eAAgB,SAChBC,WAAY,SACZC,OAAQ,SACR9F,UAEFZ,EAAAA,EAAAA,KAAC2G,EAAAA,EAAU,CAACzG,MAAM,QAAOU,SAAC,yBAKhC,MAAMgG,GAA6C,IAA5BzE,EAAiBrC,OAExC,OACES,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,uBAAsBjG,SAAA,EAEnCL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,YAAWjG,SAAA,EACxBZ,EAAAA,EAAAA,KAAA,MAAI6G,UAAU,kBAAiBjG,SAAC,+BAEhCZ,EAAAA,EAAAA,KAAC8G,EAAU,CAACpH,gBAAiBsC,QAI/BzB,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,kBAAiBjG,SAAA,EAC9BZ,EAAAA,EAAAA,KAAC+G,EAAAA,EAAoB,CAACC,YAAaC,EAAAA,EAAerG,UAChDL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,gBAAejG,SAAA,EAC5BZ,EAAAA,EAAAA,KAACkH,EAAAA,EAAU,CACTC,MAAM,aACNC,MAAO5D,EACP6D,SAAWC,GAAS7D,EAAa6D,GACjCC,YAAcC,IAAWxH,EAAAA,EAAAA,KAACyH,EAAAA,EAAS,IAAKD,OAE1CxH,EAAAA,EAAAA,KAACkH,EAAAA,EAAU,CACTC,MAAM,WACNC,MAAOxD,GACPyD,SAAWC,GAASzD,GAAWyD,GAC/BC,YAAcC,IAAWxH,EAAAA,EAAAA,KAACyH,EAAAA,EAAS,IAAKD,YAK9CjH,EAAAA,EAAAA,MAACkH,EAAAA,EAAS,CACRZ,UAAU,gBACVM,MAAM,SACNO,QAAM,EACNN,MAAOtD,GACPuD,SAAWM,GAAM5D,GAAU4D,EAAEC,OAAOR,OACpCS,QAAQ,WAAUjH,SAAA,EAElBZ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAACV,MAAM,MAAKxG,SAAC,SACtBZ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAACV,MAAM,WAAUxG,SAAC,aAC3BZ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAACV,MAAM,UAASxG,SAAC,eAC1BZ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAACV,MAAM,UAASxG,SAAC,aAC1BZ,EAAAA,EAAAA,KAAC8H,EAAAA,EAAQ,CAACV,MAAM,GAAExG,SAAC,qBAGrBZ,EAAAA,EAAAA,KAAC+H,EAAAA,EAAM,CACLlB,UAAU,yBACVgB,QAAQ,YACR3H,MAAM,UACN8H,QAvIqBC,KACtB/G,GAKLqC,GAAqB,GACrB1B,EAAiB,CACfH,UAAW,CACTC,UAAWT,EACXsC,UAAWA,GAAY0E,EAAAA,EAAAA,GAAO1E,EAAW,cAAgB,KACzDI,QAASA,IAAUsE,EAAAA,EAAAA,GAAOtE,GAAS,cAAgB,KACnDE,OAAQA,IAAU,QAGnBqE,MAAMC,IACL,MAAM,yBAAEC,GAA6BD,EAAStH,KAC9C,GACsC,MAApCuH,EAAyBvE,QACzBuE,EAAyBC,KACzB,CACA,MAAMxD,EAAauD,EAAyBC,KAAKC,MAAM,KAAK,GACtDC,EAAO3D,GACXC,EACA,sEAEF2D,EAAAA,EAAAA,QAAOD,EAAM,iCACbE,EAAAA,GAAMC,QAAQ,oBAChB,MACED,EAAAA,GAAMpH,MACJ+G,EAAyBO,SAAW,8BAGxCrF,GAAqB,EAAM,IAE5BsF,OAAOvH,IACNwH,QAAQxH,MAAM,2BAA4BA,GAC1CoH,EAAAA,GAAMpH,MAAM,kDACZiC,GAAqB,EAAM,KApC7BmF,EAAAA,GAAMpH,MAAM,uBAqCV,EAiGEyH,SAAUzF,EAAkB1C,SAE3B0C,EAAoB,iBAAmB,uBAK3CsD,IACC5G,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,WAAUjG,UACvBZ,EAAAA,EAAAA,KAAA,MAAIQ,MAAO,CAAEwI,SAAU,QAASpI,SAAC,gEAKnCL,EAAAA,EAAAA,MAAA0I,EAAAA,SAAA,CAAArI,SAAA,EAEEZ,EAAAA,EAAAA,KAAA,MAAI6G,UAAU,wBAAuBjG,SAAC,qBACtCZ,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,eAAcjG,SAC1BuB,EAAiBwC,MAAM,EAjRnB,GAiRgC9D,KAAKT,IAAa,IAAD8I,EACpD,MAAOC,EAAQC,IACN,OAAPhJ,QAAO,IAAPA,GAA0B,QAAnB8I,EAAP9I,EAASiJ,yBAAiB,IAAAH,OAAnB,EAAPA,EAA4BX,MAAM,KAAK5D,OAAO,KAAM,GACtD,OACEpE,EAAAA,EAAAA,MAAA,OAAsBsG,UAAU,eAAcjG,SAAA,EAC5CL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,gBAAejG,SAAA,CAC3BkC,EAAcsG,KAAYpJ,EAAAA,EAAAA,KAACuG,EAAAA,EAAa,KACzCvG,EAAAA,EAAAA,KAAA,OACEsJ,IACS,OAAPlJ,QAAO,IAAPA,GAAAA,EAASiJ,kBACJ,8BAAyCF,KAAUC,IACpD,KAENG,IAAI,UACJvB,QAASA,IAvLJwB,EAACL,EAAQC,KAChCjG,EACG,8BAAyCgG,KAAUC,IACrD,EAoLgCI,CAAiBL,EAAQC,SAG5C7I,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,kBAAiBjG,SAAA,EAC9BZ,EAAAA,EAAAA,KAAA,MAAAY,SAAKR,EAAQqJ,wBACblJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,aAAiB,IAAER,EAAQsJ,wBAErCnJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,sBAA2B,IAClCR,EAAQuJ,qBAEXpJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,qBAA0B,IACjCR,EAAQwJ,oBAEXrJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,uBAA4B,IACnCR,EAAQyJ,sBAEXtJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,mBAAwB,KAC/BsH,EAAAA,EAAAA,GAAO,IAAIvE,KAAKvD,EAAQ0J,cAAe,qBAE1CvJ,EAAAA,EAAAA,MAAA,KAAAK,SAAA,EACEZ,EAAAA,EAAAA,KAAA,UAAAY,SAAQ,yBAA6B,IAAER,EAAQ2J,eAGnDxJ,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,iBAAgBjG,SAAA,EAC7BZ,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,iBAAgBjG,UAC7BL,EAAAA,EAAAA,MAAA,UACE8G,SAAWM,GArQHqC,EAACC,EAAWnG,KACxCrB,GAAqByH,IAAI,IACpBA,EACH,CAACD,GAAYnG,KACZ,EAkQmBkG,CAAsB5J,EAAQoE,GAAImD,EAAEC,OAAOR,OAC5CxG,SAAA,EAEDZ,EAAAA,EAAAA,KAAA,UAAQoH,MAAM,GAAExG,SAAC,kBACjBZ,EAAAA,EAAAA,KAAA,UAAQoH,MAAM,WAAUxG,SAAC,aACzBZ,EAAAA,EAAAA,KAAA,UAAQoH,MAAM,UAASxG,SAAC,eACxBZ,EAAAA,EAAAA,KAAA,UAAQoH,MAAM,UAASxG,SAAC,kBAG5BZ,EAAAA,EAAAA,KAAA,UACE6G,UAAU,kBACVmB,QAASA,IAxND5H,KAC1ByC,EAAmBzC,GACnBuC,GAAc,EAAK,EAsNcwH,CAAmB/J,GAASQ,SAC5C,kBAtDKR,EAAQoE,GA0DZ,OAKZxE,EAAAA,EAAAA,KAAA,UACE6G,UAAU,gBACVmB,QAhRgBoC,KACxB,IAAK1F,KAEH,YADAgE,EAAAA,GAAMpH,MAAM,iDAId,MAAM+I,EAAaC,OAAOC,QAAQ/H,GAAkB3B,KAClDpB,IAAA,IAAEwK,EAAWnG,GAAOrE,EAAA,MAAM,CACxBwK,YACAnG,SACA3C,SACD,IAGEkJ,EAAWvK,QAKhBmD,GAAc,GACdZ,EAAoB,CAAEX,UAAW,CAAE8I,MAAOH,KACvClC,MAAK,KACJ1F,EAAoB,CAAC,GACrBlB,IACA0B,GAAc,GACdyF,EAAAA,GAAMC,QAAQ,gCAAgC,IAE/CE,OAAOvH,IACN2B,GAAc,GACd6F,QAAQxH,MAAM,0BAA2BA,GACzCoH,EAAAA,GAAMpH,MAAM,gDAAgD,KAf9DoH,EAAAA,GAAMpH,MAAM,gDAgBV,EAkPIyH,SAAU/F,IAAe0B,KAAyB9D,SAEjDoC,EAAa,gBAAkB,oBAMrCN,IACC1C,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,gBAAejG,UAC5BL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,QAAOjG,SAAA,EACpBL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,eAAcjG,SAAA,EAC3BZ,EAAAA,EAAAA,KAAA,MAAAY,SACGgC,EACGA,EAAgB6G,qBAChB,cAENzJ,EAAAA,EAAAA,KAAA,UACEgI,QAASA,IAAMrF,GAAc,GAC7BkE,UAAU,qBAAoBjG,SAC/B,aAIHL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,gBAAejG,SAAA,EAC5BZ,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,iBACf7G,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,gBAAejG,UAC5BL,EAAAA,EAAAA,MAACkK,EAAAA,EAAY,CACXC,OAAQ7E,GACR8E,KAAM,EACNC,iBAAiB,EACjBpK,MAAO,CAAEkG,OAAQ,QAASjG,MAAO,QACjCoK,YAAcC,GAAiB1H,EAAOa,QAAU6G,EAAclK,SAAA,EAG9DZ,EAAAA,EAAAA,KAAC+K,EAAAA,EAAS,CACRC,IAAM,iMACNC,YAAY,uJAGdjL,EAAAA,EAAAA,KAACkL,EAAAA,EAAM,CAACC,SAAUtF,GAAe9F,KAAMmG,GAAOtF,UAC5CL,EAAAA,EAAAA,MAAC6K,EAAAA,EAAK,CAACvE,UAAU,eAAcjG,SAAA,EAC7BZ,EAAAA,EAAAA,KAAA,MAAAY,SAAI,+BACJZ,EAAAA,EAAAA,KAAA,KAAAY,SACGgC,EACGA,EAAgByI,SAChB,oCAWrBnI,IACClD,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,cAAcmB,QAnSXsD,KACtBnI,EAAiB,KAAK,EAkSoCvC,UACpDZ,EAAAA,EAAAA,KAAA,OAAKsJ,IAAKpG,EAAeqG,IAAI,8BAG7B,C,2DCvaV,MAkBA,EAlBkB9J,IAAwC,IAAvC,QAAEG,EAAO,QAAEC,EAAO,KAAEE,EAAI,MAAEG,GAAOT,EAClD,OACEO,EAAAA,EAAAA,KAAA,OAAAY,UACEZ,EAAAA,EAAAA,KAAA,OAAK6G,UAAU,kBAAiBjG,UAC9BL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,gBAAejG,SAAA,EAC5BL,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,aAAYjG,SAAA,EACzBZ,EAAAA,EAAAA,KAAA,KAAG6G,UAAU,cAAajG,SAAEhB,KAC5BI,EAAAA,EAAAA,KAAA,KAAG6G,UAAU,cAAajG,SAAEf,QAE9BU,EAAAA,EAAAA,MAAA,OAAKsG,UAAU,aAAarG,MAAO,CAAE+K,gBAAiBrL,GAAQU,SAAA,CAC3Db,EAAM,aAIT,C","sources":["features/training-session/ts-approve/statsframe.js","features/training-session/ts-approve/index.js","features/training-group/statstg/Statscard.js"],"sourcesContent":["import React from \"react\";\nimport Statscard from \"../../training-group/statstg/Statscard\";\nimport { MdGroups } from \"react-icons/md\";\nimport { BsPersonBoundingBox } from \"react-icons/bs\";\n\nconst Statsframe = ({ sampledSessions }) => {\n\n  const statsData = [\n    {\n      heading: \"Total Sampled\",\n      figures: sampledSessions.length,\n      icon: <MdGroups />,\n      color: \"#25245D\",\n    },\n    {\n      heading: \"Total Reviewed\",\n      figures: sampledSessions.filter(\n        (session) => session.image_review_result !== null\n      ).length,\n      icon: <MdGroups />,\n      color: \"#087C8F\",\n    },\n    {\n      heading: \"Not Reviewed\",\n      figures: sampledSessions.filter(\n        (session) => session.image_review_result === null\n      ).length,\n      icon: <BsPersonBoundingBox />,\n      color: \"#25245D\",\n    },\n  ];\n\n  return (\n    <div style={{ width: \"100%\", marginBottom: \"20px\", display: \"flex\" }}>\n      {statsData.map((data, index) => (\n        <div key={index}>\n          <Statscard\n            heading={data.heading}\n            figures={data.figures}\n            icon={data.icon}\n            color={data.color}\n          />\n        </div>\n      ))}{\" \"}\n    </div>\n  );\n};\n\nexport default Statsframe;\n","import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport { icon } from \"leaflet\";\nimport { saveAs } from \"file-saver\";\nimport {\n  GET_SAMPLED_SESSIONS,\n  SUBMIT_BATCH,\n  GENERATE_TS_REPORT,\n} from \"../../../graphql/queries/trainingSessionsRequests\";\nimport \"./styles.css\";\nimport { toast } from \"react-hot-toast\";\nimport Statsframe from \"./statsframe\";\nimport { TextField, MenuItem, Button, Typography } from \"@mui/material\";\nimport { LocalizationProvider, DatePicker } from \"@mui/x-date-pickers\"; // Ensure correct imports\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport { format, subMonths } from \"date-fns\";\nimport LoadingScreen from \"../../../components/LoadingScreen\";\nimport { useRef } from \"react\"; // Import useRef for map reference\nimport { useOutletContext } from \"react-router-dom\";\n\nconst pageSize = 5;\n\nconst TSApprove = () => {\n  const { activeProject, userId } = useOutletContext();\n\n  const { data, loading, error, refetch } = useQuery(GET_SAMPLED_SESSIONS, {\n    variables: { projectId: activeProject },\n    fetchPolicy: \"network-only\",\n  });\n\n  const [generateTSReport] = useLazyQuery(GENERATE_TS_REPORT, {\n    fetchPolicy: \"network-only\",\n  });\n\n  const [unfilteredSessions, setUnfilteredSessions] = useState([]);\n  const [filteredSessions, setFilteredSessions] = useState([]);\n  const [submitBatchMutation] = useMutation(SUBMIT_BATCH);\n  const [selectedSessions, setSelectedSessions] = useState({});\n  const [mapVisible, setMapVisible] = useState(false);\n  const [selectedSession, setSelectedSession] = useState(null);\n  const [loadingImages, setLoadingImages] = useState({});\n  const [submitting, setSubmitting] = useState(false);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const mapRef = useRef(null); // Reference for the map\n  const [downloadingReport, setDownloadingReport] = useState(false);\n  const [startDate, setStartDate] = useState(subMonths(new Date(), 1));\n  const [endDate, setEndDate] = useState(new Date());\n  const [status, setStatus] = useState(\"approved\");\n\n  useEffect(() => {\n    if (mapVisible && mapRef.current) {\n      setTimeout(() => {\n        mapRef.current.invalidateSize(); // Adjust map size when the modal opens\n      }, 300);\n    }\n  }, [mapVisible]);\n\n  useEffect(() => {\n    if (data) {\n      setUnfilteredSessions(data.sampledTrainingSessions);\n      const initialLoadingState = data.sampledTrainingSessions.reduce(\n        (acc, session) => {\n          acc[session.id] = true;\n          return acc;\n        },\n        {}\n      );\n      setLoadingImages(initialLoadingState);\n\n      // Filter sessions with null image_review_result for the approval list\n      const filtered = data.sampledTrainingSessions.filter(\n        (session) => session.image_review_result === null\n      );\n      setFilteredSessions(filtered);\n    }\n  }, [data]);\n\n  const handleSelectionChange = (sessionId, status) => {\n    setSelectedSessions((prev) => ({\n      ...prev,\n      [sessionId]: status,\n    }));\n  };\n\n  const areAllSessionsReviewed = () => {\n    return filteredSessions\n      .slice(0, pageSize) // Only check sessions visible on the current page\n      .every((session) => selectedSessions[session.id]); // Ensure every session has a status\n  };\n\n  const handleSubmitBatch = () => {\n    if (!areAllSessionsReviewed()) {\n      toast.error(\"Please review all sessions before submitting.\");\n      return;\n    }\n\n    const batchInput = Object.entries(selectedSessions).map(\n      ([sessionId, status]) => ({\n        sessionId,\n        status,\n        userId,\n      })\n    );\n\n    if (!batchInput.length) {\n      toast.error(\"Please select at least one session to submit.\");\n      return;\n    }\n\n    setSubmitting(true);\n    submitBatchMutation({ variables: { input: batchInput } })\n      .then(() => {\n        setSelectedSessions({});\n        refetch(); // Refetch data to get updated sessions\n        setSubmitting(false);\n        toast.success(\"Batch submitted successfully!\");\n      })\n      .catch((error) => {\n        setSubmitting(false);\n        console.error(\"Error submitting batch:\", error);\n        toast.error(\"An error occurred while submitting the batch.\");\n      });\n  };\n\n  const handleImageClick = (formId, imageId) => {\n    setSelectedImage(\n      `${process.env.REACT_APP_API_URL}/image/${formId}/${imageId}`\n    );\n  };\n\n  const closeImageModal = () => {\n    setSelectedImage(null);\n  };\n\n  const handleViewMapClick = (session) => {\n    setSelectedSession(session);\n    setMapVisible(true);\n  };\n\n  const handleDownloadReport = () => {\n    if (!activeProject) {\n      toast.error(\"No project selected.\");\n      return;\n    }\n\n    setDownloadingReport(true);\n    generateTSReport({\n      variables: {\n        projectId: activeProject,\n        startDate: startDate ? format(startDate, \"yyyy-MM-dd\") : null,\n        endDate: endDate ? format(endDate, \"yyyy-MM-dd\") : null,\n        status: status || null,\n      },\n    })\n      .then((response) => {\n        const { generateTSApprovalReport } = response.data;\n        if (\n          generateTSApprovalReport.status === 200 &&\n          generateTSApprovalReport.file\n        ) {\n          const base64Data = generateTSApprovalReport.file.split(\",\")[1];\n          const blob = base64ToBlob(\n            base64Data,\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n          );\n          saveAs(blob, \"training-sessions-report.xlsx\");\n          toast.success(\"Download started.\");\n        } else {\n          toast.error(\n            generateTSApprovalReport.message || \"Failed to generate report.\"\n          );\n        }\n        setDownloadingReport(false);\n      })\n      .catch((error) => {\n        console.error(\"Error generating report:\", error);\n        toast.error(\"An error occurred while generating the report.\");\n        setDownloadingReport(false);\n      });\n  };\n\n  const base64ToBlob = (base64Data, contentType) => {\n    const byteCharacters = atob(base64Data);\n    const byteArrays = [];\n    for (let offset = 0; offset < byteCharacters.length; offset += 512) {\n      const slice = byteCharacters.slice(offset, offset + 512);\n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    return new Blob(byteArrays, { type: contentType });\n  };\n\n  const sessionCoords = selectedSession\n    ? { lat: selectedSession.ts_latitude, lng: selectedSession.ts_longitude }\n    : { lat: -1.2921, lng: 36.8219 };\n\n  const tsIcon = icon({\n    iconUrl:\n      \"https://img.icons8.com/?size=100&id=60013&format=png&color=000000\",\n    iconSize: [35, 35],\n    iconAnchor: [22, 94],\n    popupAnchor: [-3, -76],\n  });\n\n  if (loading) return <LoadingScreen />;\n\n  if (error)\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100vh\",\n        }}\n      >\n        <Typography color=\"error\">Error loading data</Typography>\n      </div>\n    );\n\n  // Check if there are no sessions left to review\n  const noDataToReview = filteredSessions.length === 0;\n\n  return (\n    <div className=\"training-session-app\">\n      {/* Dashboard Section */}\n      <div className=\"dashboard\">\n        <h1 className=\"dashboard-title\">Training Session Overview</h1>\n        {/* Using unfilteredSessions for the statistics */}\n        <Statsframe sampledSessions={unfilteredSessions} />\n      </div>\n      {/* Download Report Button */}\n      {/* New Controls for Report Download */}\n      <div className=\"report-controls\">\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <div className=\"date-controls\">\n            <DatePicker\n              label=\"Start Date\"\n              value={startDate}\n              onChange={(date) => setStartDate(date)}\n              renderInput={(params) => <TextField {...params} />}\n            />\n            <DatePicker\n              label=\"End Date\"\n              value={endDate}\n              onChange={(date) => setEndDate(date)}\n              renderInput={(params) => <TextField {...params} />}\n            />\n          </div>\n        </LocalizationProvider>\n\n        <TextField\n          className=\"status-select\"\n          label=\"Status\"\n          select\n          value={status}\n          onChange={(e) => setStatus(e.target.value)}\n          variant=\"outlined\"\n        >\n          <MenuItem value=\"all\">All</MenuItem>\n          <MenuItem value=\"approved\">Correct</MenuItem>\n          <MenuItem value=\"invalid\">Incorrect</MenuItem>\n          <MenuItem value=\"unclear\">Unclear</MenuItem>\n          <MenuItem value=\"\">Not Reviewed</MenuItem>\n        </TextField>\n\n        <Button\n          className=\"download-report-button\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleDownloadReport}\n          disabled={downloadingReport}\n        >\n          {downloadingReport ? \"Downloading...\" : \"Download Report\"}\n        </Button>\n      </div>\n\n      {/* No Data Message */}\n      {noDataToReview ? (\n        <div className=\"no__data\">\n          <h1 style={{ fontSize: \"20px\" }}>\n            Currently, there are no sessions to review. 🎉\n          </h1>\n        </div>\n      ) : (\n        <>\n          {/* List of Sessions with Multi-Approval */}\n          <h2 className=\"review-sessions-title\">Review Sessions</h2>\n          <div className=\"session-list\">\n            {filteredSessions.slice(0, pageSize).map((session) => {\n              const [formId, imageId] =\n                session?.session_image_url?.split(\"/\").slice(-2) || [];\n              return (\n                <div key={session.id} className=\"session-item\">\n                  <div className=\"session-image\">\n                    {loadingImages[imageId] && <LoadingScreen />}\n                    <img\n                      src={\n                        session?.session_image_url\n                          ? `${process.env.REACT_APP_API_URL}/image/${formId}/${imageId}`\n                          : null\n                      }\n                      alt=\"Session\"\n                      onClick={() => handleImageClick(formId, imageId)}\n                    />\n                  </div>\n                  <div className=\"session-details\">\n                    <h3>{session.training_module_name}</h3>\n                    <p>\n                      <strong>Trainer:</strong> {session.farmer_trainer_name}\n                    </p>\n                    <p>\n                      <strong>Total Attendance:</strong>{\" \"}\n                      {session.total_attendance}\n                    </p>\n                    <p>\n                      <strong>Male Attendance:</strong>{\" \"}\n                      {session.male_attendance}\n                    </p>\n                    <p>\n                      <strong>Female Attendance:</strong>{\" \"}\n                      {session.female_attendance}\n                    </p>\n                    <p>\n                      <strong>Training Date:</strong>{\" \"}\n                      {format(new Date(session.session_date), \"MMMM dd, yyyy\")}\n                    </p>\n                    <p>\n                      <strong>Training Group Name:</strong> {session.tg_name}\n                    </p>\n                  </div>\n                  <div className=\"actions-column\">\n                    <div className=\"review-actions\">\n                      <select\n                        onChange={(e) =>\n                          handleSelectionChange(session.id, e.target.value)\n                        }\n                      >\n                        <option value=\"\">-- Select --</option>\n                        <option value=\"approved\">Correct</option>\n                        <option value=\"invalid\">Incorrect</option>\n                        <option value=\"unclear\">Unclear</option>\n                      </select>\n                    </div>\n                    <button\n                      className=\"view-map-button\"\n                      onClick={() => handleViewMapClick(session)}\n                    >\n                      View Map\n                    </button>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n          {/* Submit Button for Batch */}\n          <button\n            className=\"submit-button\"\n            onClick={handleSubmitBatch}\n            disabled={submitting || !areAllSessionsReviewed()}\n          >\n            {submitting ? \"Submitting...\" : \"Submit Batch\"}\n          </button>\n        </>\n      )}\n\n      {/* Map Modal */}\n      {mapVisible && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal\">\n            <div className=\"modal-header\">\n              <h2>\n                {selectedSession\n                  ? selectedSession.training_module_name\n                  : \"Map View\"}\n              </h2>\n              <button\n                onClick={() => setMapVisible(false)}\n                className=\"modal-close-button\"\n              >\n                &times;\n              </button>\n            </div>\n            <div className=\"modal-content\">\n              <div className=\"map-toolbar\"></div>\n              <div className=\"map-container\">\n                <MapContainer\n                  center={sessionCoords}\n                  zoom={6}\n                  scrollWheelZoom={false}\n                  style={{ height: \"500px\", width: \"100%\" }}\n                  whenCreated={(mapInstance) => (mapRef.current = mapInstance)} // Assign map instance to ref\n                >\n                  {/* Satellite and Streets Hybrid Layer */}\n                  <TileLayer\n                    url={`https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v11/tiles/512/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoieW11Z2VuZ2EiLCJhIjoiY20xN3NhOWJwMHFvcTJsc2Iyc2Z0Znd0aCJ9.A3EBUziAdNrV3nwrGvkv3g`}\n                    attribution='Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors | Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>'\n                  />\n                  {/* Marker for session location */}\n                  <Marker position={sessionCoords} icon={tsIcon}>\n                    <Popup className=\"custom-popup\">\n                      <h3>Training Session Location</h3>\n                      <p>\n                        {selectedSession\n                          ? selectedSession.location\n                          : \"San Francisco\"}\n                      </p>\n                    </Popup>\n                  </Marker>\n                </MapContainer>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      {/* Image Modal */}\n      {selectedImage && (\n        <div className=\"image-modal\" onClick={closeImageModal}>\n          <img src={selectedImage} alt=\"Fullscreen Farm Visit\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TSApprove;\n","import React from 'react'\nimport './statscard.css'\n\nconst Statscard = ({ heading, figures, icon, color }) => {\n  return (\n    <div>\n      <div className='card__container'>\n        <div className='card__content'>\n          <div className='card__text'>\n            <p className='card__text1'>{heading}</p>\n            <p className='card__text2'>{figures}</p>\n          </div>\n          <div className='card__icon' style={{ backgroundColor: color }}>\n            {icon}{' '}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Statscard\n"],"names":["_ref","sampledSessions","statsData","heading","figures","length","icon","_jsx","MdGroups","color","filter","session","image_review_result","BsPersonBoundingBox","_jsxs","style","width","marginBottom","display","children","map","data","index","Statscard","TSApprove","activeProject","userId","useOutletContext","loading","error","refetch","useQuery","GET_SAMPLED_SESSIONS","variables","projectId","fetchPolicy","generateTSReport","useLazyQuery","GENERATE_TS_REPORT","unfilteredSessions","setUnfilteredSessions","useState","filteredSessions","setFilteredSessions","submitBatchMutation","useMutation","SUBMIT_BATCH","selectedSessions","setSelectedSessions","mapVisible","setMapVisible","selectedSession","setSelectedSession","loadingImages","setLoadingImages","submitting","setSubmitting","selectedImage","setSelectedImage","mapRef","useRef","downloadingReport","setDownloadingReport","startDate","setStartDate","subMonths","Date","endDate","setEndDate","status","setStatus","useEffect","current","setTimeout","invalidateSize","sampledTrainingSessions","initialLoadingState","reduce","acc","id","filtered","areAllSessionsReviewed","slice","every","base64ToBlob","base64Data","contentType","byteCharacters","atob","byteArrays","offset","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob","type","sessionCoords","lat","ts_latitude","lng","ts_longitude","tsIcon","iconUrl","iconSize","iconAnchor","popupAnchor","LoadingScreen","justifyContent","alignItems","height","Typography","noDataToReview","className","Statsframe","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","label","value","onChange","date","renderInput","params","TextField","select","e","target","variant","MenuItem","Button","onClick","handleDownloadReport","format","then","response","generateTSApprovalReport","file","split","blob","saveAs","toast","success","message","catch","console","disabled","fontSize","_Fragment","_session$session_imag","formId","imageId","session_image_url","src","alt","handleImageClick","training_module_name","farmer_trainer_name","total_attendance","male_attendance","female_attendance","session_date","tg_name","handleSelectionChange","sessionId","prev","handleViewMapClick","handleSubmitBatch","batchInput","Object","entries","input","MapContainer","center","zoom","scrollWheelZoom","whenCreated","mapInstance","TileLayer","url","attribution","Marker","position","Popup","location","closeImageModal","backgroundColor"],"sourceRoot":""}