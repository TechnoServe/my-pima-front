{"version":3,"file":"static/js/770.ab1b2aba.chunk.js","mappings":"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","sources":["components/Filter/FilterContent.js","components/Filter/FilterContainer.js","utils/timezone.js","components/Modals/FVQAModal.js","components/Table/Table.js","features/tsdetail/sessionimage/Imagecontainer.js","graphql/queries/farmVisitsRequests.js","graphql/queries/trainingModulesRequests.js"],"sourcesContent":["import {\r\n  Chip,\r\n  Dialog,\r\n  Button,\r\n  DialogContent,\r\n  Divider,\r\n  IconButton,\r\n  DialogActions,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport {\r\n  MdClose,\r\n  MdClass,\r\n  MdPending,\r\n  MdLibraryBooks,\r\n  MdCalendarToday,\r\n} from \"react-icons/md\";\r\nimport { AiOutlineReload } from \"react-icons/ai\";\r\nimport BAFilter from \"./Filteroptions/BAFillter\";\r\nimport MDFilter from \"./Filteroptions/MDFilter\";\r\nimport DateFilter from \"./Filteroptions/DateFilter\";\r\nimport StatusFilter from \"./Filteroptions/StatusFilter\";\r\nimport \"./Filter.css\";\r\nimport { useState } from \"react\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n  \"&:hover\": {\r\n    backgroundColor: \"rgba(244, 103, 0, 0.5)\",\r\n    transition: \"background-color 0.3s ease-in-out\",\r\n  },\r\n}));\r\n\r\nconst FilterContent = ({\r\n  open,\r\n  handleClose,\r\n  handleReset,\r\n  filter,\r\n  setFilter,\r\n  setFilteredGroups,\r\n  setFilteredSessions,\r\n  data,\r\n  selectedProject,\r\n}) => {\r\n  const [activeTab, setActiveTab] = useState(\"\");\r\n\r\n  // get url\r\n  const location = useLocation();\r\n\r\n  const pathname = location.pathname.split(\"/\")[2];\r\n\r\n  const handleTabChange = (tab) => {\r\n    setActiveTab(tab);\r\n  };\r\n\r\n  const handleSearch = () => {\r\n    handleClose();\r\n\r\n    if (filter.farmerTrainer) {\r\n      setFilteredGroups(\r\n        data.filter((group) => group.farmer_trainer === filter.farmerTrainer)\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (filter.businessAdvisor) {\r\n      setFilteredGroups(\r\n        data.filter(\r\n          (group) => group.business_advisor === filter.businessAdvisor\r\n        )\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (filter.moduleName) {\r\n      setFilteredSessions(\r\n        data.filter((session) => session.ts_module === filter.moduleName)\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (filter.sessionDate) {\r\n      setFilteredSessions(\r\n        data.filter((session) => session.session_date === filter.sessionDate)\r\n      );\r\n      return;\r\n    }\r\n\r\n    if (filter.sessionApproval) {\r\n      setFilteredSessions(\r\n        data.filter(\r\n          (session) => session.session_image_status === filter.sessionApproval\r\n        )\r\n      );\r\n\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ maxheight: \"100%\" }}>\r\n      <Dialog\r\n        open={open}\r\n        keepMounted\r\n        fullWidth\r\n        aria-describedby=\"alert-dialog-slide-description\"\r\n      >\r\n        <div style={{ margin: \"20px\" }}>\r\n          <IconButton\r\n            aria-label=\"close\"\r\n            onClick={handleClose}\r\n            sx={{\r\n              position: \"absolute\",\r\n              right: 8,\r\n              top: 8,\r\n              color: \"#2b2b2b\",\r\n            }}\r\n          >\r\n            <MdClose />\r\n          </IconButton>\r\n          <div>\r\n            <Typography\r\n              sx={{\r\n                fontSize: \"16px\",\r\n                color: \"#2b2b2b\",\r\n                marginRight: \"5px\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              Selected filters:\r\n            </Typography>\r\n            {\r\n              // display selected filters here, get non-empty values from filter object\r\n              filter && filter.businessAdvisor && (\r\n                <>\r\n                  <Typography\r\n                    sx={{\r\n                      fontSize: \"12px\",\r\n                      color: \"#2b2b2b\",\r\n                      marginRight: \"5px\",\r\n                    }}\r\n                  >\r\n                    Business Advisor:\r\n                  </Typography>\r\n                  <Chip\r\n                    label={filter.businessAdvisor}\r\n                    defaultValue={filter.businessAdvisor}\r\n                    size=\"small\"\r\n                    onDelete={() => {\r\n                      setFilter({\r\n                        businessAdvisor: \"\",\r\n                        farmerTrainer: \"\",\r\n                      });\r\n                    }}\r\n                  />\r\n                </>\r\n              )\r\n            }\r\n            {\r\n              // display selected filters here, get non-empty values from filter object\r\n              filter && filter.farmerTrainer && (\r\n                <>\r\n                  <Typography\r\n                    sx={{\r\n                      fontSize: \"12px\",\r\n                      color: \"#2b2b2b\",\r\n                      marginRight: \"5px\",\r\n                    }}\r\n                  >\r\n                    Farmer Trainer:\r\n                  </Typography>\r\n                  <Chip\r\n                    label={filter.farmerTrainer}\r\n                    size=\"small\"\r\n                    onDelete={() => {\r\n                      setFilter((prevState) => ({\r\n                        ...prevState,\r\n                        farmerTrainer: \"\",\r\n                      }));\r\n                    }}\r\n                  />\r\n                </>\r\n              )\r\n            }\r\n\r\n            {filter && filter.moduleName && (\r\n              <>\r\n                <Typography\r\n                  sx={{\r\n                    fontSize: \"12px\",\r\n                    color: \"#2b2b2b\",\r\n                    marginRight: \"5px\",\r\n                  }}\r\n                >\r\n                  Module Name:\r\n                </Typography>\r\n                <Chip\r\n                  label={filter.moduleName}\r\n                  size=\"small\"\r\n                  onDelete={() => {\r\n                    setFilter((prevState) => ({\r\n                      ...prevState,\r\n                      moduleName: \"\",\r\n                    }));\r\n                  }}\r\n                />\r\n              </>\r\n            )}\r\n\r\n            {filter && filter.sessionDate && (\r\n              <>\r\n                <Typography\r\n                  sx={{\r\n                    fontSize: \"12px\",\r\n                    color: \"#2b2b2b\",\r\n                    marginRight: \"5px\",\r\n                  }}\r\n                >\r\n                  Session Date:\r\n                </Typography>\r\n                <Chip\r\n                  label={filter.sessionDate}\r\n                  size=\"small\"\r\n                  onDelete={() => {\r\n                    setFilter((prevState) => ({\r\n                      ...prevState,\r\n                      sessionDate: \"\",\r\n                    }));\r\n                  }}\r\n                />\r\n              </>\r\n            )}\r\n\r\n            {filter && filter.sessionApproval && (\r\n              <>\r\n                <Typography\r\n                  sx={{\r\n                    fontSize: \"12px\",\r\n                    color: \"#2b2b2b\",\r\n                    marginRight: \"5px\",\r\n                  }}\r\n                >\r\n                  Status:\r\n                </Typography>\r\n                <Chip\r\n                  label={filter.sessionApproval}\r\n                  size=\"small\"\r\n                  onDelete={() => {\r\n                    setFilter((prevState) => ({\r\n                      ...prevState,\r\n                      sessionApproval: \"\",\r\n                    }));\r\n                  }}\r\n                />\r\n              </>\r\n            )}\r\n\r\n            {\r\n              // if no filter is selected, display this\r\n              filter &&\r\n                filter.businessAdvisor === \"\" &&\r\n                filter.farmerTrainer === \"\" &&\r\n                filter.moduleName === \"\" &&\r\n                filter.sessionDate === \"\" &&\r\n                filter.sessionApproval === \"\" && (\r\n                  <em style={{ fontSize: \"11px\", color: \"#969696\" }}>\r\n                    Nothing yet\r\n                  </em>\r\n                )\r\n            }\r\n          </div>{\" \"}\r\n          <Divider sx={{ marginBottom: \"0\", marginTop: \"10px\" }} />\r\n          <DialogContent sx={{ paddingLeft: \"10px\" }}>\r\n            <div className=\"filter__content\">\r\n              <p\r\n                style={{\r\n                  fontSize: \"12px\",\r\n                  color: \"#2b2b2b\",\r\n                  paddingBottom: \"10px\",\r\n                }}\r\n              >\r\n                Filter by :\r\n              </p>\r\n\r\n              <div\r\n                className=\"filter__options\"\r\n                style={{ display: \"flex\", gap: \"20px\" }}\r\n              >\r\n                {pathname === \"traingroup\" ? (\r\n                  <Chip\r\n                    variant=\"outlined\"\r\n                    label=\"Business Advisor\"\r\n                    icon={<MdClass size={15} />}\r\n                    color={\r\n                      activeTab === \"businessAdvisor\" ? \"primary\" : \"default\"\r\n                    }\r\n                    onClick={() => handleTabChange(\"businessAdvisor\")}\r\n                  />\r\n                ) : (\r\n                  <>\r\n                    <Chip\r\n                      variant=\"outlined\"\r\n                      label=\"Module Name\"\r\n                      icon={<MdLibraryBooks size={15} />}\r\n                      color={activeTab === \"moduleName\" ? \"primary\" : \"default\"}\r\n                      onClick={() => handleTabChange(\"moduleName\")}\r\n                    />\r\n                    <Chip\r\n                      variant=\"outlined\"\r\n                      label=\"Verification Status\"\r\n                      icon={<MdPending size={15} />}\r\n                      color={activeTab === \"status\" ? \"primary\" : \"default\"}\r\n                      onClick={() => handleTabChange(\"status\")}\r\n                    />\r\n                    <Chip\r\n                      variant=\"outlined\"\r\n                      label=\"Session Date\"\r\n                      icon={<MdCalendarToday size={15} />}\r\n                      color={\r\n                        activeTab === \"sessionDate\" ? \"primary\" : \"default\"\r\n                      }\r\n                      onClick={() => handleTabChange(\"sessionDate\")}\r\n                    />\r\n                  </>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"filter__content-container\">\r\n                {activeTab === \"businessAdvisor\" && (\r\n                  <BAFilter\r\n                    setFilter={setFilter}\r\n                    setFilteredGroups={setFilteredGroups}\r\n                    groups={data}\r\n                  />\r\n                )}\r\n                {activeTab === \"moduleName\" && (\r\n                  <MDFilter\r\n                    setFilter={setFilter}\r\n                    setFilteredSessions={setFilteredSessions}\r\n                    data={data}\r\n                    selectedProject={selectedProject}\r\n                  />\r\n                )}\r\n                {activeTab === \"sessionDate\" && (\r\n                  <DateFilter setFilter={setFilter} />\r\n                )}\r\n                {activeTab === \"status\" && (\r\n                  <StatusFilter setFilter={setFilter} />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button\r\n              onClick={handleReset}\r\n              startIcon={<AiOutlineReload />}\r\n              sx={{ textTransform: \"initial\", color: \"#087C8F\" }}\r\n            >\r\n              Reset all\r\n            </Button>\r\n            <StyledButton\r\n              autoFocus\r\n              onClick={handleSearch}\r\n              sx={{\r\n                backgroundColor: \"#F46700\",\r\n                textTransform: \"initial\",\r\n                color: \"#fff\",\r\n              }}\r\n            >\r\n              Search\r\n            </StyledButton>\r\n          </DialogActions>\r\n        </div>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterContent;\r\n","import { useEffect, useState } from \"react\";\r\n\r\nimport { HiFilter } from \"react-icons/hi\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { Button } from \"@mui/material\";\r\nimport FilterContent from \"./FilterContent\";\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n  marginBottom: \"10px\",\r\n  marginRight: \"10px\",\r\n  textTransform: \"initial\",\r\n  backgroundColor: \"rgba(0, 165, 163, 1)\",\r\n\r\n  \"&:hover\": {\r\n    backgroundColor: \"rgba(0, 165, 163, 0.5)\",\r\n    transition: \"background-color 0.3s ease-in-out\",\r\n  },\r\n}));\r\n\r\nconst FilterContainer = ({\r\n  filter,\r\n  setFilter,\r\n  setFilteredGroups,\r\n  setFilteredSessions,\r\n  data,\r\n  tableRowItem,\r\n  selectedProject\r\n}) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    setFilter({\r\n      businessAdvisor: \"\",\r\n      farmerTrainer: \"\",\r\n      moduleName: \"\",\r\n      sessionDate: \"\",\r\n      sessionApproval: \"\",\r\n    });\r\n\r\n    setFilteredGroups && setFilteredGroups([]);\r\n    setFilteredSessions && setFilteredSessions([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // if tableRowItem changes, reset filter\r\n    handleReset();\r\n  }, [tableRowItem]);\r\n\r\n  return (\r\n    <>\r\n      <StyledButton\r\n        id=\"demo-customized-button\"\r\n        aria-controls={open ? \"demo-customized-menu\" : undefined}\r\n        aria-haspopup=\"true\"\r\n        aria-expanded={open ? \"true\" : undefined}\r\n        variant=\"contained\"\r\n        disableElevation\r\n        onClick={handleClick}\r\n        startIcon={<HiFilter />}\r\n      >\r\n        Filter\r\n      </StyledButton>\r\n      {open && (\r\n        <FilterContent\r\n          open={open}\r\n          handleClose={handleClose}\r\n          handleReset={handleReset}\r\n          filter={filter}\r\n          setFilter={setFilter}\r\n          setFilteredGroups={setFilteredGroups}\r\n          setFilteredSessions={setFilteredSessions}\r\n          data={data}\r\n          selectedProject={selectedProject}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterContainer;\r\n","const TimeZone = () => {\r\n  // Get the current date and time\r\n  const now = new Date();\r\n\r\n  // Get the user's timezone\r\n  const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\r\n  // Format the date and time according to the user's timezone\r\n  const formattedDate = now.toLocaleDateString(\"en-US\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  });\r\n\r\n  const formattedTime = now.toLocaleTimeString(\"en-US\", {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    timeZone: userTimezone,\r\n  });\r\n\r\n  // Output the date and time\r\n  return `${formattedDate}_at_${formattedTime}`;\r\n};\r\n\r\nexport default TimeZone;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogActions,\r\n  Button,\r\n  Accordion,\r\n  AccordionSummary,\r\n  AccordionDetails,\r\n  Typography,\r\n  Chip,\r\n  Box,\r\n  Divider,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport { AiOutlineCheck, AiOutlineClose } from \"react-icons/ai\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport {\r\n  GET_FARM_VISIT_QAs,\r\n  UPDATE_QA_IMAGE,\r\n} from \"../../graphql/queries/farmVisitsRequests\";\r\nimport { BeatLoader } from \"react-spinners\";\r\nimport { BsFillCaretDownFill } from \"react-icons/bs\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst FVQAModal = ({ open, handleClose, fvId, rowDetails }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [fvQAs, setFvQAs] = useState([]);\r\n  const userDetails = JSON.parse(window.localStorage.getItem(\"myPimaUserData\"));\r\n\r\n  const getFarmVisitQAs = useQuery(GET_FARM_VISIT_QAs, {\r\n    variables: { fvId: fvId },\r\n  });\r\n\r\n  const [updateQAImage] = useMutation(UPDATE_QA_IMAGE);\r\n\r\n  const handleImageStatus = async (bpId, practiceName, status) => {\r\n    setIsLoading(true);\r\n\r\n    // if practiceName is more than one word, remove the spaces\r\n    const practiceNameNoSpace = practiceName.replace(/\\s/g, \"\");\r\n\r\n    await updateQAImage({\r\n      variables: {\r\n        bpId: bpId,\r\n        fieldName: practiceNameNoSpace,\r\n        imageStatus: status,\r\n      },\r\n    })\r\n      .then((res) => {\r\n        if (res.data.updateFVQAImageStatus.status === 200) {\r\n          toast.success(\"Image Status Updated Successfully\");\r\n\r\n          getFarmVisitQAs\r\n            .refetch()\r\n            .then((res) => {\r\n              setIsLoading(false);\r\n            })\r\n            .catch((err) => {\r\n              toast.error(\"Something went wrong\");\r\n\r\n              setIsLoading(false);\r\n            });\r\n        } else {\r\n          toast.error(\"Something went wrong\");\r\n          setIsLoading(false);\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n\r\n        toast.error(\"Something went wrong\");\r\n\r\n        setIsLoading(false);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (getFarmVisitQAs.data?.getFVQAsByFarmVisits.status === 200) {\r\n      setFvQAs(getFarmVisitQAs.data.getFVQAsByFarmVisits.fvQAs.qas);\r\n    }\r\n  }, [getFarmVisitQAs.data]);\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"sm\">\r\n      <DialogContent>\r\n        <h3>Questions and Answers</h3>\r\n        {rowDetails && (\r\n          <List\r\n            sx={{\r\n              display: \"flex\",\r\n              flexWrap: \"wrap\",\r\n              width: \"100%\",\r\n              bgcolor: \"background.paper\",\r\n            }}\r\n          >\r\n            <ListItem\r\n              sx={{\r\n                width: \"50%\",\r\n              }}\r\n            >\r\n              <ListItemText\r\n                primary=\"Farm Visit Name:\"\r\n                secondary={rowDetails.fv_name}\r\n              />\r\n            </ListItem>\r\n            <ListItem\r\n              sx={{\r\n                width: \"50%\",\r\n              }}\r\n            >\r\n              <ListItemText\r\n                primary=\"Training Group:\"\r\n                secondary={rowDetails.training_group}\r\n              />\r\n            </ListItem>\r\n            <ListItem\r\n              sx={{\r\n                width: \"50%\",\r\n              }}\r\n            >\r\n              <ListItemText\r\n                primary=\"Training Session:\"\r\n                secondary={rowDetails.training_session}\r\n              />\r\n            </ListItem>\r\n            <ListItem\r\n              sx={{\r\n                width: \"50%\",\r\n              }}\r\n            >\r\n              <ListItemText primary=\"TNS Id:\" secondary={rowDetails.tns_id} />\r\n            </ListItem>\r\n            <ListItem\r\n              sx={{\r\n                width: \"50%\",\r\n              }}\r\n            >\r\n              <ListItemText\r\n                primary=\"Farmer Trainer:\"\r\n                secondary={rowDetails.farmer_trainer}\r\n              />\r\n            </ListItem>\r\n            <ListItem\r\n              sx={{\r\n                width: \"50%\",\r\n              }}\r\n            >\r\n              <ListItemText\r\n                primary=\"Visit Date:\"\r\n                secondary={rowDetails.date_visited}\r\n              />\r\n            </ListItem>\r\n          </List>\r\n        )}\r\n\r\n        {getFarmVisitQAs.loading ? (\r\n          <BeatLoader\r\n            color=\"#087C8F\"\r\n            size={10}\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              margin: \"0 auto\",\r\n            }}\r\n          />\r\n        ) : fvQAs.length > 0 ? (\r\n          fvQAs.map((qa, index) => (\r\n            <div key={index}>\r\n              <div\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"space-between\",\r\n                  marginBottom: \".5rem\",\r\n                }}\r\n              >\r\n                <Chip label={qa.practice_name} color=\"primary\" />\r\n              </div>\r\n              {qa.questions.length > 0 ? (\r\n                qa.questions.map(\r\n                  (item, index) =>\r\n                    item !== \"Status of the photo\" && (\r\n                      <Accordion\r\n                        style={{\r\n                          marginBottom: \"1rem\",\r\n                        }}\r\n                        key={index}\r\n                      >\r\n                        <AccordionSummary\r\n                          expandIcon={<BsFillCaretDownFill />}\r\n                          aria-controls=\"panel1a-content\"\r\n                          id=\"panel1a-header\"\r\n                        >\r\n                          <Typography>\r\n                            {`(${index + 1}) ${item}`}\r\n                            {qa.answers[index] &&\r\n                              /^(data:image\\/[a-zA-Z+]+;base64,)[\\w/+=]+$/.test(\r\n                                qa.answers[index]\r\n                              ) && (\r\n                                <Chip\r\n                                  label=\"Image\"\r\n                                  variant=\"outlined\"\r\n                                  size=\"10\"\r\n                                  color=\"secondary\"\r\n                                  style={{\r\n                                    marginLeft: \"1rem\",\r\n                                  }}\r\n                                />\r\n                              )}\r\n                            {\r\n                              // if image is approved or rejected, show chip\r\n                              qa.answers[index + 1] === \"approved\" ? (\r\n                                <Chip\r\n                                  label=\"Approved\"\r\n                                  variant=\"outlined\"\r\n                                  size=\"10\"\r\n                                  color=\"success\"\r\n                                  style={{\r\n                                    marginLeft: \"1rem\",\r\n                                  }}\r\n                                />\r\n                              ) : qa.answers[index + 1] === \"invalid\" ? (\r\n                                <Chip\r\n                                  label=\"Invalid\"\r\n                                  variant=\"outlined\"\r\n                                  size=\"10\"\r\n                                  color=\"error\"\r\n                                  style={{\r\n                                    marginLeft: \"1rem\",\r\n                                  }}\r\n                                />\r\n                              ) : qa.answers[index + 1] === \"unclear\" ? (\r\n                                <Chip\r\n                                  label=\"Unclear\"\r\n                                  variant=\"outlined\"\r\n                                  size=\"10\"\r\n                                  color=\"warning\"\r\n                                  style={{\r\n                                    marginLeft: \"1rem\",\r\n                                  }}\r\n                                />\r\n                              ) : null\r\n                            }\r\n                          </Typography>\r\n                        </AccordionSummary>\r\n                        <AccordionDetails>\r\n                          {!qa.answers[index] ? (\r\n                            \"N/A\"\r\n                          ) : /^(data:image\\/[a-zA-Z+]+;base64,)[\\w/+=]+$/.test(\r\n                              qa.answers[index]\r\n                            ) ? (\r\n                            <Box\r\n                              style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"column\",\r\n                                justifyContent: \"center\",\r\n                                alignItems: \"center\",\r\n                              }}\r\n                            >\r\n                              <img\r\n                                src={qa.answers[index]}\r\n                                alt=\"img\"\r\n                                style={{\r\n                                  width: \"100%\",\r\n                                  height: \"auto\",\r\n                                }}\r\n                              />\r\n                              {\r\n                                // if image is approved or rejected, don't show the buttons\r\n                                (userDetails?.role === \"super_admin\" ||\r\n                                  userDetails?.role === \"ci_leadership\" ||\r\n                                  userDetails?.role ===\r\n                                    \"senior_business_advisor\" ||\r\n                                  userDetails?.role === \"business_advisor\" ||\r\n                                  userDetails?.role === \"project_manager\" ||\r\n                                  userDetails?.role === \"farmer_trainer\") &&\r\n                                  !(\r\n                                    qa.answers[index + 1] === \"approved\" ||\r\n                                    qa.answers[index + 1] === \"invalid\" ||\r\n                                    qa.answers[index + 1] === \"unclear\"\r\n                                  ) && (\r\n                                    <div\r\n                                      style={{\r\n                                        display: \"flex\",\r\n                                        justifyContent: \"space-between\",\r\n                                        width: \"100%\",\r\n                                        marginTop: \"1rem\",\r\n                                      }}\r\n                                    >\r\n                                      <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"success\"\r\n                                        onClick={() =>\r\n                                          handleImageStatus(\r\n                                            getFarmVisitQAs.data\r\n                                              .getFVQAsByFarmVisits.fvQAs.bp_id,\r\n                                            qa.practice_name_id,\r\n                                            \"approved\"\r\n                                          )\r\n                                        }\r\n                                        disabled={isLoading}\r\n                                      >\r\n                                        {isLoading ? (\r\n                                          <BeatLoader\r\n                                            size={8}\r\n                                            color={\"#fff\"}\r\n                                            loading={isLoading}\r\n                                          />\r\n                                        ) : (\r\n                                          <>\r\n                                            <AiOutlineCheck />\r\n                                            Approve\r\n                                          </>\r\n                                        )}\r\n                                      </Button>\r\n                                      <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"error\"\r\n                                        onClick={() =>\r\n                                          handleImageStatus(\r\n                                            getFarmVisitQAs.data\r\n                                              .getFVQAsByFarmVisits.fvQAs.bp_id,\r\n                                            qa.practice_name_id,\r\n                                            \"invalid\"\r\n                                          )\r\n                                        }\r\n                                        disabled={isLoading}\r\n                                      >\r\n                                        {isLoading ? (\r\n                                          <BeatLoader\r\n                                            size={8}\r\n                                            color={\"#fff\"}\r\n                                            loading={isLoading}\r\n                                          />\r\n                                        ) : (\r\n                                          <>\r\n                                            <AiOutlineClose />\r\n                                            Invalid\r\n                                          </>\r\n                                        )}\r\n                                      </Button>\r\n                                      <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"warning\"\r\n                                        onClick={() =>\r\n                                          handleImageStatus(\r\n                                            getFarmVisitQAs.data\r\n                                              .getFVQAsByFarmVisits.fvQAs.bp_id,\r\n                                            qa.practice_name_id,\r\n                                            \"unclear\"\r\n                                          )\r\n                                        }\r\n                                        disabled={isLoading}\r\n                                      >\r\n                                        {isLoading ? (\r\n                                          <BeatLoader\r\n                                            size={8}\r\n                                            color={\"#fff\"}\r\n                                            loading={isLoading}\r\n                                          />\r\n                                        ) : (\r\n                                          <>\r\n                                            <AiOutlineClose />\r\n                                            Unclear\r\n                                          </>\r\n                                        )}\r\n                                      </Button>\r\n                                    </div>\r\n                                  )\r\n                              }\r\n                            </Box>\r\n                          ) : (\r\n                            <Typography variant=\"subtitle2\" >\r\n                              <div dangerouslySetInnerHTML={{ __html: qa.answers[index] ?? \"N/A\" }} />\r\n                            </Typography>\r\n                          )}\r\n                        </AccordionDetails>\r\n                      </Accordion>\r\n                    )\r\n                )\r\n              ) : (\r\n                <Typography\r\n                  variant=\"caption\"\r\n                  display=\"block\"\r\n                  color=\"text.secondary\"\r\n                  gutterBottom\r\n                >\r\n                  No Questions and Answers found for this Best Practice\r\n                </Typography>\r\n              )}\r\n              <Divider\r\n                variant=\"middle\"\r\n                style={{\r\n                  marginBottom: \"1.5rem\",\r\n                }}\r\n              />\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <Typography variant=\"body1\" color=\"text.secondary\">\r\n            No Questions and Answers found for this Farm Visit\r\n          </Typography>\r\n        )}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default FVQAModal;\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./table.css\";\r\nimport FilterContainer from \"../Filter/FilterContainer\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { BiSearchAlt } from \"react-icons/bi\";\r\nimport { Button } from \"@mui/material\";\r\nimport { FaFileExport } from \"react-icons/fa\";\r\nimport { ExportToCsv } from \"export-to-csv\";\r\nimport { utils, writeFile } from \"xlsx\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport TimeZone from \"../../utils/timezone\";\r\nimport FVQAModal from \"../Modals/FVQAModal\";\r\nimport Imagecontainer from \"../../features/tsdetail/sessionimage/Imagecontainer\";\r\nimport { GET_TRAINING_SESSION_IMAGE } from \"../../graphql/queries/trainingSessionsRequests\";\r\n\r\nconst customStyles = {\r\n  rows: {\r\n    style: {\r\n      minHeight: \"30px\",\r\n      cursor: \"pointer\",\r\n    },\r\n  },\r\n  headCells: {\r\n    style: {\r\n      paddingLeft: \"8px\",\r\n      paddingRight: \"8px\",\r\n      backgroundColor: \"#1b2a4e\" /* Matching sidebar color */,\r\n      color: \"white\",\r\n    },\r\n  },\r\n  cells: {\r\n    style: {\r\n      paddingLeft: \"5px\",\r\n      paddingRight: \"5px\",\r\n      paddingTop: \"5px\",\r\n      paddingBottom: \"5px\",\r\n    },\r\n  },\r\n};\r\n\r\n// Export Buttons Component\r\nconst ExportButtons = ({\r\n  handleCSVExport,\r\n  handleExcelExport,\r\n  tableRowItem,\r\n}) => (\r\n  <div className=\"export-buttons\">\r\n    {tableRowItem !== \"trainsessionapprov\" && (\r\n      <Button\r\n        variant=\"outlined\"\r\n        sx={{ color: \"#1b2a4e\", borderColor: \"#1b2a4e\" }}\r\n        onClick={handleCSVExport}\r\n      >\r\n        <FaFileExport style={{ marginRight: \"5px\" }} /> CSV\r\n      </Button>\r\n    )}\r\n    <Button\r\n      variant=\"outlined\"\r\n      sx={{ color: \"#1b2a4e\", borderColor: \"#1b2a4e\" }}\r\n      onClick={handleExcelExport}\r\n    >\r\n      <FaFileExport style={{ marginRight: \"5px\" }} />\r\n      {tableRowItem !== \"trainsessionapprov\" ? \"Excel\" : \"Download Report\"}\r\n    </Button>\r\n  </div>\r\n);\r\n\r\nconst Table = ({\r\n  columns,\r\n  data,\r\n  filter,\r\n  setFilter,\r\n  setFilteredGroups,\r\n  setFilteredSessions,\r\n  tableRowItem,\r\n  allAttendances,\r\n  details,\r\n  selectedProject,\r\n}) => {\r\n  const pathName = tableRowItem || window.location.pathname.split(\"/\")[2];\r\n  const [rowDetails, setRowDetails] = useState({ ts_id: null });\r\n  const [open, setOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [session_image, setSession_image] = useState(null);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [fvId, setFvId] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const imageData = useQuery(GET_TRAINING_SESSION_IMAGE, {\r\n    variables: { tsId: rowDetails && rowDetails.ts_id ? rowDetails.ts_id : \"\" },\r\n    skip: !rowDetails,\r\n  });\r\n\r\n  // Restore original filename variable\r\n  const filename =\r\n    pathName === \"traingroup\"\r\n      ? \"mypima_training_group\"\r\n      : pathName === \"trainsession\"\r\n      ? \"mypima_training_session\"\r\n      : pathName === \"participants\"\r\n      ? \"Participants Data\"\r\n      : pathName === \"farmvisit\"\r\n      ? \"mypima_farm_visit\"\r\n      : \"mypima_attendance\";\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !imageData.loading &&\r\n      imageData.data?.trainingSessionImage?.status === 200\r\n    ) {\r\n      setLoading(false);\r\n      setSession_image(\r\n        imageData.data.trainingSessionImage.trainingSessionImage\r\n      );\r\n    }\r\n  }, [imageData]);\r\n\r\n  const handleOpenModal = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const handleRowClick = (row) => {\r\n    setRowDetails(row);\r\n\r\n    const idMapping = {\r\n      trainsession: row.ts_id,\r\n      traingroup: row.tg_id,\r\n      participants: row.p_id,\r\n      farmvisit: row.fv_ids,\r\n      trainsessionapprov: row.ts_id,\r\n    };\r\n\r\n    const id = idMapping[tableRowItem] || row.attendance_id;\r\n\r\n    if (tableRowItem !== \"farmvisit\" && tableRowItem !== \"trainsessionapprov\") {\r\n      navigate(`/in/${tableRowItem}/${id}`);\r\n    } else if (tableRowItem === \"farmvisit\") {\r\n      setFvId(row.fv_id);\r\n      handleOpenModal();\r\n    } else if (tableRowItem === \"trainsessionapprov\") {\r\n      setOpen(true);\r\n      setLoading(true);\r\n    }\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    const value = e.target.value.toLowerCase();\r\n    const filteredItems = data.filter((item) =>\r\n      columns.some((column) => {\r\n        const field = item[column.id];\r\n        return field?.toString().toLowerCase().includes(value);\r\n      })\r\n    );\r\n    setFilteredData(filteredItems);\r\n    setSearchText(e.target.value);\r\n  };\r\n\r\n  const handleCSVExport = () => {\r\n    if (data.length === 0) {\r\n      alert(\"No data available for export.\");\r\n      return;\r\n    }\r\n\r\n    if (pathName === \"farmvisit\") {\r\n      const new_columns = [\r\n        { id: \"farmer_tns_id\" },\r\n        { id: \"household_tns_id\" },\r\n        { id: \"pima_household_id\" },\r\n        { id: \"pima_farmer_id\" },\r\n      ];\r\n\r\n      // Use concat to add new columns\r\n      columns = columns.concat(new_columns);\r\n    }\r\n\r\n    // Create an array of headers for the CSV file\r\n    const partsHeaders = [\r\n      \"num\",\r\n      \"Project\",\r\n      \"first_name\",\r\n      \"middle_name\",\r\n      \"last_name\",\r\n      \"gender\",\r\n      \"age\",\r\n      \"coffee_tree_numbers\",\r\n      \"number_of_coffee_plots\",\r\n      \"phone_number\",\r\n      selectedProject === \"a0EOj000002FMGnMAO\" ||\r\n      selectedProject === \"a0EOj000002C7ivMAC\"\r\n        ? \"national_identification_id\"\r\n        : \"coop_membership_number\",\r\n      \"location\",\r\n      \"farmer_sf_id\",\r\n      \"tns_id\",\r\n      \"hh_number\",\r\n      \"sf_household_id\",\r\n      \"farmer_number\",\r\n      \"ffg_id\",\r\n      \"training_group\",\r\n      \"status\",\r\n      \"farmer_trainer\",\r\n      \"business_advisor\",\r\n      \"create_in_commcare\",\r\n    ];\r\n\r\n    if (tableRowItem === \"participants\") {\r\n      // Create a map to store monthly attendance data\r\n      const monthlyAttendanceMap = new Map();\r\n\r\n      // filter all attendances by data's participant ids\r\n      const filteredAttendances = allAttendances.filter((attendance) =>\r\n        data.some(\r\n          (participant) => participant.p_id === attendance.participant_id\r\n        )\r\n      );\r\n\r\n      // Iterate through the attendance data to calculate monthly attendance\r\n      filteredAttendances.forEach((attendance) => {\r\n        const {\r\n          attendance_status,\r\n          participant_id,\r\n          module_number,\r\n          module_name,\r\n          module_id,\r\n        } = attendance;\r\n        // const [year, month] = attendance_date.split(\"-\");\r\n        const key = `${module_number}-${module_name}-${module_id}`;\r\n\r\n        // Initialize the monthly attendance object if it doesn't exist\r\n        if (!monthlyAttendanceMap.has(key)) {\r\n          monthlyAttendanceMap.set(key, {});\r\n        }\r\n\r\n        // Set the attendance status for the participant in the corresponding month\r\n        const monthlyAttendance = monthlyAttendanceMap.get(key);\r\n        monthlyAttendance[participant_id] =\r\n          attendance_status === \"Present\" ? \"1\" : \"0\";\r\n      });\r\n\r\n      // Add monthly columns to the headers\r\n      for (const [monthKey] of monthlyAttendanceMap) {\r\n        partsHeaders.push(monthKey);\r\n      }\r\n\r\n      // Prepare data for writing to the CSV file\r\n      const csvRows =\r\n        searchText.length > 0\r\n          ? filteredData.map((participant) => {\r\n              const rowData = { ...participant };\r\n              for (const [\r\n                monthKey,\r\n                monthlyAttendance,\r\n              ] of monthlyAttendanceMap) {\r\n                rowData[monthKey] = monthlyAttendance[participant.p_id] || \"\";\r\n              }\r\n              return rowData;\r\n            })\r\n          : data.map((participant) => {\r\n              const rowData = { ...participant };\r\n              for (const [\r\n                monthKey,\r\n                monthlyAttendance,\r\n              ] of monthlyAttendanceMap) {\r\n                rowData[monthKey] = monthlyAttendance[participant.p_id] || \"\";\r\n              }\r\n              return rowData;\r\n            });\r\n\r\n      data = csvRows;\r\n\r\n      console.log(\"CSV Participants export\");\r\n\r\n      console.log(data);\r\n    }\r\n\r\n    const csvExporter = new ExportToCsv({\r\n      fieldSeparator: \",\",\r\n      quoteStrings: '\"',\r\n      decimalSeparator: \".\",\r\n      showLabels: true,\r\n      useTextFile: false,\r\n      useBom: true,\r\n      filename: `${filename}`,\r\n      // headers: columns.map((column) => column.id),\r\n      headers:\r\n        tableRowItem === \"participants\"\r\n          ? partsHeaders\r\n          : columns.map((column) => column.id),\r\n    });\r\n\r\n    csvExporter.generateCsv(\r\n      data.map(\r\n        ({ tg_id, ts_id, p_id, attendance_id, fv_id, __typename, ...rest }) =>\r\n          rest\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleExcelExport = () => {\r\n    const sheetName = \"Sessions Data\";\r\n    const summarySheetName = \"Summary by Trainer\";\r\n\r\n    const sessionsData = {\r\n      header: columns.map((column) => column.id),\r\n      body: data.map(\r\n        ({ tg_id, ts_id, p_id, attendance_id, fv_id, __typename, ...rest }) =>\r\n          Object.values(rest)\r\n      ),\r\n    };\r\n\r\n    const trainerSummary = data.reduce(\r\n      (acc, { farmer_trainer, session_image_status }) => {\r\n        const key = `${farmer_trainer}_${session_image_status}`;\r\n        if (!acc[key]) {\r\n          acc[key] = { farmer_trainer, session_image_status, count: 0 };\r\n        }\r\n        acc[key].count += 1;\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n\r\n    const summaryData = Object.values(trainerSummary);\r\n\r\n    const trainerSummaryData = {\r\n      header: [\"farmer_trainer\", \"session_image_status\", \"count\"],\r\n      body: summaryData.map((data) => Object.values(data)),\r\n    };\r\n\r\n    const workbook = utils.book_new();\r\n    const sessionsWorksheet = utils.json_to_sheet(\r\n      [sessionsData.header, ...sessionsData.body],\r\n      { skipHeader: true }\r\n    );\r\n    const summaryWorksheet = utils.json_to_sheet(\r\n      [trainerSummaryData.header, ...trainerSummaryData.body],\r\n      { skipHeader: true }\r\n    );\r\n\r\n    utils.book_append_sheet(workbook, summaryWorksheet, summarySheetName);\r\n    utils.book_append_sheet(workbook, sessionsWorksheet, sheetName);\r\n\r\n    writeFile(workbook, `${filename}_${TimeZone()}.xlsx`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={`table-header-actions ${!filter ? \"no-filter\" : \"\"}`}>\r\n        {/* Filter Button (if filter exists) */}\r\n        {filter && <Button className=\"filter-button\">Filter</Button>}\r\n\r\n        {/* Search and Export Buttons */}\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <div className=\"search-container\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search...\"\r\n              value={searchText}\r\n              onChange={handleSearch}\r\n            />\r\n            <span className=\"search-icon\">\r\n              <BiSearchAlt />\r\n            </span>\r\n          </div>\r\n\r\n          {/* Export Buttons */}\r\n          <ExportButtons\r\n            handleCSVExport={handleCSVExport}\r\n            handleExcelExport={handleExcelExport}\r\n            tableRowItem={tableRowItem}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <DataTable\r\n        columns={columns}\r\n        data={searchText.length > 0 ? filteredData : data}\r\n        onRowClicked={handleRowClick}\r\n        pagination\r\n        highlightOnHover\r\n        customStyles={customStyles}\r\n        className=\"table-container\"\r\n      />\r\n\r\n      <FVQAModal\r\n        open={modalOpen}\r\n        handleClose={handleCloseModal}\r\n        fvId={fvId}\r\n        details={details}\r\n        rowDetails={rowDetails}\r\n      />\r\n\r\n      {open && (\r\n        <Imagecontainer\r\n          open={open}\r\n          handleClose={() => setOpen(false)}\r\n          id={rowDetails.ts_id}\r\n          data={rowDetails}\r\n          isVerified={rowDetails.is_verified}\r\n          imageStatus={rowDetails.session_image_status}\r\n          sessionImageUrl={session_image}\r\n          selectedProject={selectedProject}\r\n          loading={loading}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Dialog,\r\n  // Button,\r\n  DialogContent,\r\n  // DialogActions,\r\n  IconButton,\r\n  Typography,\r\n  Grid,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { MdClose, MdFullscreen, MdFullscreenExit } from \"react-icons/md\";\r\nimport { styled } from \"@mui/material/styles\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport {\r\n  GET_TRAINING_SESSIONS_PER_PROJECT,\r\n  VALIDATE_TRAINING_SESSION,\r\n} from \"../../../graphql/queries/trainingSessionsRequests\";\r\nimport { toast } from \"react-hot-toast\";\r\n// import { BeatLoader } from \"react-spinners\";\r\n\r\n// const StyledButton = styled(Button)(({ theme }) => ({\r\n//   marginBottom: \"10px\",\r\n//   marginRight: \"10px\",\r\n//   textTransform: \"initial\",\r\n//   backgroundColor: \"rgba(23, 177, 94, 1)\",\r\n//   color: \"#fff\",\r\n//   fontSize: \"12px\",\r\n\r\n//   \"&:hover\": {\r\n//     backgroundColor: \"rgba(23, 177, 94, 0.5)\",\r\n//     transition: \"background-color 0.3s ease-in-out\",\r\n//   },\r\n// }));\r\n\r\n// const StyledButton2 = styled(Button)(({ theme }) => ({\r\n//   marginBottom: \"10px\",\r\n//   marginRight: \"10px\",\r\n//   textTransform: \"initial\",\r\n//   fontSize: \"12px\",\r\n//   color: \"rgba(200, 27, 27, 1)\",\r\n//   borderColor: \"rgba(200, 27, 27, 1)\",\r\n\r\n//   \"&:hover\": {\r\n//     backgroundColor: \"rgba(235, 87, 87, 0.1)\",\r\n//     transition: \"background-color 0.3s ease-in-out\",\r\n//     borderColor: \"rgba(200, 27, 27, 1)\",\r\n//   },\r\n//   \".MuiButton-outlined\": {\r\n//     color: \"rgba(235, 87, 87, 1)\",\r\n//   },\r\n// }));\r\n\r\nconst LoadingOverlay = styled(\"div\")({\r\n  position: \"fixed\",\r\n  top: 0,\r\n  left: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n  backgroundColor: \"rgba(255, 255, 255, 0.7)\",\r\n  zIndex: 9999,\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n});\r\n\r\nconst Imagecontainer = ({\r\n  open,\r\n  handleClose,\r\n  sessionImageUrl,\r\n  // id,\r\n  data,\r\n  // isVerified,\r\n  // imageStatus,\r\n  selectedProject,\r\n  loading,\r\n}) => {\r\n  console.log(data);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  // const userDetails = JSON.parse(window.localStorage.getItem(\"myPimaUserData\"));\r\n\r\n  // const [validateSession] = useMutation(VALIDATE_TRAINING_SESSION);\r\n\r\n  // const trainingSessionsPerProject = useQuery(\r\n  //   GET_TRAINING_SESSIONS_PER_PROJECT,\r\n  //   {\r\n  //     variables: { sfProjectId: selectedProject },\r\n  //   }\r\n  // );\r\n\r\n  const toggleExpand = () => {\r\n    setIsExpanded((prev) => !prev);\r\n  };\r\n\r\n  // const handleSessionValidation = async (id, session_image_status) => {\r\n  //   setIsLoading(true);\r\n\r\n  //   try {\r\n  //     await validateSession({\r\n  //       variables: {\r\n  //         tsId: id,\r\n  //         status: session_image_status,\r\n  //       },\r\n  //     });\r\n\r\n  //     // refetch training sessions\r\n  //     trainingSessionsPerProject\r\n  //       .refetch()\r\n  //       .then(() => {\r\n  //         toast.success(\"Session validated successfully\");\r\n  //         setIsLoading(false);\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.log(error);\r\n\r\n  //         toast.error(\"Error validating session\");\r\n  //       });\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n\r\n  //     toast.error(\"Error validating session\");\r\n\r\n  //     setIsLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Dialog\r\n          open={open}\r\n          keepMounted\r\n          fullWidth\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n          <div style={{ margin: \"20px\" }}>\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              onClick={handleClose}\r\n              sx={{\r\n                position: \"absolute\",\r\n                right: 8,\r\n                top: 8,\r\n                color: \"#2b2b2b\",\r\n              }}\r\n            >\r\n              <MdClose />\r\n            </IconButton>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <CircularProgress />\r\n            <Typography variant=\"h6\" style={{ marginLeft: \"10px\" }}>\r\n              Loading Image...\r\n            </Typography>\r\n          </div>\r\n        </Dialog>\r\n      ) : (\r\n        <Dialog\r\n          open={open}\r\n          keepMounted\r\n          fullWidth\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n          {isLoading && (\r\n            <LoadingOverlay>\r\n              <CircularProgress />\r\n            </LoadingOverlay>\r\n          )}\r\n          <div style={{ margin: \"20px\" }}>\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              onClick={handleClose}\r\n              sx={{\r\n                position: \"absolute\",\r\n                right: 8,\r\n                top: 8,\r\n                color: \"#2b2b2b\",\r\n              }}\r\n            >\r\n              <MdClose />\r\n            </IconButton>\r\n            <Typography variant=\"h6\">Session Image</Typography>\r\n          </div>\r\n\r\n          <DialogContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Male Attendees:</strong> {data.total_males}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Female Attendees:</strong> {data.total_females}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Total Attendees:</strong>{\" \"}\r\n                  {data.total_males + data.total_females}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Session Date:</strong> {data.session_date}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Farmer Trainer:</strong> {data.farmer_trainer}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Session Module:</strong> {data.ts_module}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>FFG:</strong> {data.ts_group}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <div style={{ position: \"relative\" }}>\r\n                  <img\r\n                    src={sessionImageUrl}\r\n                    alt=\"session_pic\"\r\n                    style={{\r\n                      width: \"100%\",\r\n                      height: \"auto\",\r\n                      cursor: isExpanded ? \"zoom-out\" : \"zoom-in\",\r\n                    }}\r\n                    onClick={toggleExpand}\r\n                  />\r\n                  {isExpanded ? (\r\n                    <IconButton\r\n                      aria-label=\"shrink\"\r\n                      onClick={toggleExpand}\r\n                      sx={{\r\n                        position: \"absolute\",\r\n                        bottom: 8,\r\n                        right: 8,\r\n                        color: \"#fff\",\r\n                      }}\r\n                    >\r\n                      <MdFullscreenExit />\r\n                    </IconButton>\r\n                  ) : (\r\n                    <IconButton\r\n                      aria-label=\"expand\"\r\n                      onClick={toggleExpand}\r\n                      sx={{\r\n                        position: \"absolute\",\r\n                        bottom: 8,\r\n                        right: 8,\r\n                        color: \"#fff\",\r\n                      }}\r\n                    >\r\n                      <MdFullscreen />\r\n                    </IconButton>\r\n                  )}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n\r\n          {/* <DialogActions>\r\n            {(userDetails?.role === \"super_admin\" ||\r\n              userDetails?.role === \"ci_leadership\" ||\r\n              userDetails?.role === \"project_manager\" ||\r\n              userDetails?.role === \"mel_analyst\") &&\r\n              (!isVerified || imageStatus === \"not_verified\") && (\r\n                <>\r\n                  <StyledButton2 onClick={() => handleSessionValidation(id, \"invalid\")} variant=\"outlined\" disabled={isLoading}>\r\n                    {isLoading ? <BeatLoader size={8} color={\"#fff\"} loading={isLoading} /> : \"Invalid\"}\r\n                  </StyledButton2>\r\n                  <StyledButton2 onClick={() => handleSessionValidation(id, \"unclear\")} variant=\"outlined\" disabled={isLoading}>\r\n                    {isLoading ? <BeatLoader size={8} color={\"#fff\"} loading={isLoading} /> : \"Unclear\"}\r\n                  </StyledButton2>\r\n                  <StyledButton onClick={() => handleSessionValidation(id, \"approved\")} disabled={isLoading}>\r\n                    {isLoading ? <BeatLoader size={8} color={\"#fff\"} loading={isLoading} /> : \"Approve\"}\r\n                  </StyledButton>\r\n                </>\r\n              )}\r\n          </DialogActions> */}\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Imagecontainer;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst GET_FARM_VISITS_PER_PROJECT = gql`\r\n  query GetFarmVisitsByProject($projectId: String!) {\r\n    getFarmVisitsByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        training_group\r\n        farmer_tns_id\r\n        household_tns_id\r\n        farm_visited\r\n        farmer_trainer\r\n        date_visited\r\n        pima_household_id\r\n        pima_farmer_id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_TG = gql`\r\n  query GetFarmVisitsByGroup($tgId: String!) {\r\n    getFarmVisitsByGroup(tg_id: $tgId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_TS = gql`\r\n  query GetFarmVisitsBySession($tsId: String!) {\r\n    getFarmVisitsBySession(ts_id: $tsId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_PART = gql`\r\n  query GetFarmVisitsByParticipant($partId: String!) {\r\n    getFarmVisitsByParticipant(part_id: $partId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        farmer_tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISIT_QAs = gql`\r\n  query GetFVQAsByFarmVisits($fvId: String!) {\r\n    getFVQAsByFarmVisits(fv_id: $fvId) {\r\n      message\r\n      status\r\n      fvQAs {\r\n        bp_id\r\n        fv_id\r\n        qas {\r\n          practice_name_id\r\n          practice_name\r\n          questions\r\n          answers\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_QA_IMAGE = gql`\r\n  mutation UpdateFVQAImageStatus(\r\n    $bpId: String!\r\n    $fieldName: FieldNames!\r\n    $imageStatus: Status!\r\n  ) {\r\n    updateFVQAImageStatus(\r\n      bp_id: $bpId\r\n      field_name: $fieldName\r\n      image_status: $imageStatus\r\n    ) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FVQAS_BY_PROJECT_FOR_REVIEW = gql`\r\n  query getFVQAsByProjectForReview(\r\n    $projectId: String!\r\n    $limit: Int!\r\n    $offset: Int!\r\n  ) {\r\n    getFVQAsByProjectForReview(\r\n      project_id: $projectId\r\n      limit: $limit\r\n      offset: $offset\r\n    ) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n        status\r\n        qas {\r\n          practice_name_id\r\n          practice_name\r\n          questions\r\n          answers\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FVQAS_BY_PROJECT_IN_EXCEL = gql`\r\n  query getFVQAsByProjectInExcel($projectId: String!, $practiceName: String!) {\r\n    getFVQAsByProjectInExcel(\r\n      project_id: $projectId\r\n      practice_name: $practiceName\r\n    ) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_OVERALL_REPORT = gql`\r\n  query getFVQAsByProjectInExcel($projectId: String!, $practiceName: String!) {\r\n    getFVQAsByProjectInExcel(\r\n      project_id: $projectId\r\n      practice_name: $practiceName\r\n    ) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPLOAD_APPROVED_FV = gql`\r\n  mutation UploadParticipants($partsFile: Upload!) {\r\n    uploadParticipants(parts_file: $partsFile) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_SAMPLED_VISITS_STATS = gql`\r\n  query GetSampledVisitsStats($projectId: String!) {\r\n    getSampledVisitsStats(projectId: $projectId) {\r\n      totalSampledVisits\r\n      totalReviewed\r\n      remainingVisits\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_BEST_PRACTICE_STATS = gql`\r\n  query GetBestPracticeStats($projectId: String!, $practiceName: String!) {\r\n    getBestPracticeReviewStats(\r\n      projectId: $projectId\r\n      practiceName: $practiceName\r\n    ) {\r\n      reviewedVisits\r\n      remainingVisits\r\n      totalVisits\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PAGINATED_REVIEWS = gql`\r\n  query GetPaginatedReviews(\r\n    $projectId: String!\r\n    $practiceName: String!\r\n    $page: Int!\r\n    $pageSize: Int!\r\n  ) {\r\n    getPaginatedReviews(\r\n      projectId: $projectId\r\n      practiceName: $practiceName\r\n      page: $page\r\n      pageSize: $pageSize\r\n    ) {\r\n      visit_id\r\n      sf_visit_id\r\n      farmer_name\r\n      farmer_pima_id\r\n      farmer_tns_id\r\n      date_visited\r\n      farmer_trainer\r\n      BestPractices {\r\n        practice_id\r\n        practice_name\r\n        image_url\r\n        sf_practice_id\r\n        question\r\n        answer\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GENERATE_FARM_VISIT_REPORT = gql`\r\n  query GenerateFarmVisitReport($projectId: String!) {\r\n    generateFarmVisitReport(projectId: $projectId) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst SUBMIT_BATCH_APPROVED_VISITS = gql`\r\n  mutation SubmitBatch($input: [BatchInput!]!) {\r\n    submitBatch(input: $input) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nconst SUBMIT_BATCH = gql`\r\n  mutation SubmitBatch($input: [BatchInput!]!) {\r\n    submitBatch(input: $input) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  GET_FARM_VISITS_PER_PROJECT,\r\n  GET_FARM_VISITS_PER_TG,\r\n  GET_FARM_VISITS_PER_TS,\r\n  GET_FARM_VISITS_PER_PART,\r\n  GET_FARM_VISIT_QAs,\r\n  GET_FVQAS_BY_PROJECT_FOR_REVIEW,\r\n  GET_FVQAS_BY_PROJECT_IN_EXCEL,\r\n  GET_OVERALL_REPORT,\r\n  GET_PAGINATED_REVIEWS,\r\n  GET_BEST_PRACTICE_STATS,\r\n  GET_SAMPLED_VISITS_STATS,\r\n  GENERATE_FARM_VISIT_REPORT,\r\n  SUBMIT_BATCH_APPROVED_VISITS,\r\n  SUBMIT_BATCH,\r\n  UPLOAD_APPROVED_FV,\r\n  UPDATE_QA_IMAGE,\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst GET_ALL_TRAINING_MODULES = gql`\r\n  query GetAllTrainingModules {\r\n    getAllTrainingModules {\r\n      message\r\n      status\r\n      training_modules {\r\n        tm_id\r\n        tm_name\r\n        tm_title\r\n        tm_module_number\r\n        tm_project\r\n        tm_status\r\n        tm_is_current\r\n        tm_date\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TRAINING_MODULES_PER_PROJECT = gql`\r\n  query GetTrainingModulesByProject($projectId: String!) {\r\n    getTrainingModulesByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      training_modules {\r\n        tm_id\r\n        tm_name\r\n        tm_title\r\n        tm_module_number\r\n        tm_project\r\n        tm_status\r\n        tm_is_current\r\n        tm_date\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { GET_ALL_TRAINING_MODULES, GET_TRAINING_MODULES_PER_PROJECT };\r\n"],"names":["styled","Button","_ref","theme","backgroundColor","transition","marginBottom","marginRight","textTransform","now","Date","userTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","formattedDate","toLocaleDateString","year","month","day","formattedTime","toLocaleTimeString","hour","minute","second","concat","_ref2","open","handleClose","fvId","rowDetails","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","fvQAs","setFvQAs","userDetails","JSON","parse","window","localStorage","getItem","getFarmVisitQAs","useQuery","GET_FARM_VISIT_QAs","variables","_useMutation","useMutation","UPDATE_QA_IMAGE","updateQAImage","handleImageStatus","_x","_x2","_x3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","bpId","practiceName","status","practiceNameNoSpace","wrap","_context","prev","next","replace","fieldName","imageStatus","then","res","data","updateFVQAImageStatus","toast","success","refetch","catch","err","error","console","log","stop","apply","arguments","useEffect","_getFarmVisitQAs$data","getFVQAsByFarmVisits","qas","_jsxs","Dialog","onClose","fullWidth","maxWidth","children","DialogContent","_jsx","List","sx","display","flexWrap","width","bgcolor","ListItem","ListItemText","primary","secondary","fv_name","training_group","training_session","tns_id","farmer_trainer","date_visited","loading","BeatLoader","color","size","style","justifyContent","alignItems","margin","length","map","qa","index","Chip","label","practice_name","questions","item","_qa$answers$index","Accordion","AccordionSummary","expandIcon","BsFillCaretDownFill","id","Typography","answers","test","variant","marginLeft","AccordionDetails","Box","flexDirection","src","alt","height","role","marginTop","onClick","bp_id","practice_name_id","disabled","_Fragment","AiOutlineCheck","AiOutlineClose","dangerouslySetInnerHTML","__html","gutterBottom","Divider","DialogActions","customStyles","rows","minHeight","cursor","headCells","paddingLeft","paddingRight","cells","paddingTop","paddingBottom","ExportButtons","handleCSVExport","handleExcelExport","tableRowItem","className","borderColor","FaFileExport","columns","filter","setFilter","setFilteredGroups","setFilteredSessions","allAttendances","details","selectedProject","pathName","location","pathname","split","ts_id","setRowDetails","setOpen","_useState5","_useState6","setLoading","_useState7","_useState8","session_image","setSession_image","_useState9","_useState10","searchText","setSearchText","_useState11","_useState12","filteredData","setFilteredData","_useState13","_useState14","modalOpen","setModalOpen","_useState15","_useState16","setFvId","navigate","useNavigate","imageData","GET_TRAINING_SESSION_IMAGE","tsId","skip","filename","_imageData$data","_imageData$data$train","trainingSessionImage","type","placeholder","value","onChange","e","target","toLowerCase","filteredItems","some","column","field","toString","includes","BiSearchAlt","partsHeaders","monthlyAttendanceMap","Map","attendance","participant","p_id","participant_id","forEach","attendance_status","module_number","module_name","module_id","key","has","set","get","_step","_iterator","_createForOfIteratorHelper","s","n","done","monthKey","push","f","csvRows","_step2","rowData","_objectSpread","_iterator2","_step2$value","monthlyAttendance","_step3","_iterator3","_step3$value","ExportToCsv","fieldSeparator","quoteStrings","decimalSeparator","showLabels","useTextFile","useBom","headers","generateCsv","_ref3","tg_id","attendance_id","fv_id","__typename","_objectWithoutProperties","_excluded","alert","sessionsData","header","body","_ref4","rest","_excluded2","Object","values","trainerSummary","reduce","acc","_ref5","session_image_status","count","trainerSummaryData","workbook","utils","book_new","sessionsWorksheet","json_to_sheet","_toConsumableArray","skipHeader","summaryWorksheet","book_append_sheet","writeFile","TimeZone","DataTable","onRowClicked","row","trainsession","traingroup","participants","farmvisit","fv_ids","trainsessionapprov","pagination","highlightOnHover","FVQAModal","Imagecontainer","isVerified","is_verified","sessionImageUrl","LoadingOverlay","position","top","left","right","bottom","zIndex","isExpanded","setIsExpanded","toggleExpand","keepMounted","IconButton","MdClose","CircularProgress","Grid","container","spacing","xs","sm","total_males","total_females","session_date","ts_module","ts_group","MdFullscreenExit","MdFullscreen","GET_FARM_VISITS_PER_PROJECT","gql","_templateObject","_taggedTemplateLiteral","GET_FARM_VISITS_PER_TG","_templateObject2","GET_FARM_VISITS_PER_PART","_templateObject3","_templateObject4","_templateObject5","_templateObject6","GET_SAMPLED_VISITS_STATS","_templateObject7","_templateObject8","_templateObject9","_templateObject10","_templateObject11","GET_BEST_PRACTICE_STATS","_templateObject12","GET_PAGINATED_REVIEWS","_templateObject13","GENERATE_FARM_VISIT_REPORT","_templateObject14","SUBMIT_BATCH","_templateObject15","_templateObject16","GET_TRAINING_MODULES_PER_PROJECT"],"sourceRoot":""}