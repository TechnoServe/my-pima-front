{"version":3,"file":"static/js/544.218d9478.chunk.js","mappings":"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","sources":["graphql/queries/usersRequests.js","graphql/queries/wetmillVisit.js","features/sustainabilityDashboard/hooks/useDashboardData.js","features/sustainabilityDashboard/components/DashboardGraphs.js","features/sustainabilityDashboard/index.jsx"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nconst GET_ALL_USERS = gql`\n  query GetUsers {\n    getUsers {\n      message\n      status\n      users {\n        user_id\n        sf_user_id\n        user_name\n        user_email\n        mobile_no\n        account_status\n        role {\n          role_id\n          role_name\n        }\n      }\n    }\n  }\n`;\n\nconst ADD_USER = gql`\n  mutation AddUser(\n    $userName: String!\n    $userEmail: String!\n    $mobileNo: String!\n    $userPassword: String!\n    $roleId: ID\n  ) {\n    addUser(\n      user_name: $userName\n      user_email: $userEmail\n      mobile_no: $mobileNo\n      user_password: $userPassword\n      role_id: $roleId\n    ) {\n      message\n      status\n      user {\n        user_id\n        sf_user_id\n        user_name\n        user_email\n        mobile_no\n        role_id\n        role {\n          role_desc\n          role_id\n          role_name\n          role_status\n        }\n        account_status\n      }\n    }\n  }\n`;\n\nconst UPDATE_USER = gql`\n  mutation UpdateUser(\n    $userId: ID!\n    $accountStatus: String\n    $userEmail: String\n    $mobileNo: String\n    $userName: String\n    $roleId: ID\n  ) {\n    updateUser(\n      user_id: $userId\n      account_status: $accountStatus\n      user_email: $userEmail\n      mobile_no: $mobileNo\n      user_name: $userName\n      role_id: $roleId\n    ) {\n      message\n      status\n      user {\n        user_id\n        sf_user_id\n        user_name\n        user_email\n        mobile_no\n        role_id\n        account_status\n        role {\n          role_id\n          role_name\n          role_desc\n          permissions\n          is_default\n          role_status\n        }\n      }\n    }\n  }\n`;\n\nconst GET_WETMILL_BAS = gql`\n  query GetWetmillBas($sfProjectId: String!) {\n    getWetMillBusinessAdvisors(sfProjectId: $sfProjectId) {\n      advisors {\n        id\n        name\n        wetmillId\n      }\n      message\n      status\n    }\n  }\n`;\n\n\nexport { GET_ALL_USERS, ADD_USER, UPDATE_USER, GET_WETMILL_BAS};\n","import { gql } from \"@apollo/client\";\n\nexport const GET_WETMILL_VISITS = gql`\n  query GetWetmillVisits($program: String!) {\n    getVisits(program: $program) {\n      message\n      status\n      visits {\n        id\n        visited_at\n        wetmillId\n      }\n    }\n  }\n`;\n","import { useQuery } from \"@apollo/client\";\nimport { useMemo } from \"react\";\nimport { GET_WETMILLS } from \"../../../graphql/queries/wetmills\";\nimport { GET_WETMILL_VISITS } from \"../../../graphql/queries/wetmillVisit\";\nimport { GET_WETMILL_BAS } from \"../../../graphql/queries/usersRequests\";\nimport { de } from \"date-fns/locale\";\nimport { useOutletContext } from \"react-router-dom\";\n\nlet DEFAULT_SF_PROJECT_ID = \"a0EOj000004XC1hMAG\"; // Default project ID for Ethiopia Regrow USDA\n\n\n\nexport const useDashboardData = () => {\n\n  const { program } = useOutletContext();\n\n  console.log(\"Program in useDashboardData:\", program);\n\n  if (program === \"Ethiopia Regrow USDA\") {\n    DEFAULT_SF_PROJECT_ID = \"a0EOj000004XC1hMAG\";\n  }\n  else if (program === \"Ethiopia CREW GAC\") {\n    DEFAULT_SF_PROJECT_ID = \"a0EOj000004XC3JMAW\";\n\n  }\n  else if (program === \"Ethiopia Nespresso\") {\n    DEFAULT_SF_PROJECT_ID = \"a0EOj000004XC4vMAG\";\n\n  }\n  else {\n    DEFAULT_SF_PROJECT_ID = \"a0EOj000004FvmrMAC\";\n  }\n\n  const {\n    data: millsData,\n    loading: millsLoading,\n    error: millsError,\n  } = useQuery(GET_WETMILLS, {\n    variables: { program }\n  });\n  const {\n    data: baData,\n    loading: baLoading,\n    error: baError,\n  } = useQuery(GET_WETMILL_BAS, {\n    variables: { sfProjectId: DEFAULT_SF_PROJECT_ID },\n  });\n  const {\n    data: visitsData,\n    loading: visitsLoading,\n    error: visitsError,\n  } = useQuery(GET_WETMILL_VISITS, { variables: { program: program } });\n\n  const wetmills = millsData?.getWetmills?.wetmills || [];\n  const businessAdvisors = baData?.getWetMillBusinessAdvisors?.advisors || [];\n  const visits = visitsData?.getVisits?.visits || [];\n\n  console.log(\"Visits Data:\", visits);\n\n  const millsCount = wetmills.length;\n  const basCount = businessAdvisors.length;\n\n  const visitsPerWeekData = useMemo(() => {\n    const map = {};\n\n    visits.forEach((v) => {\n      const date = new Date(v.visited_at);\n\n      const year = date.getFullYear();\n      const month = date.getMonth(); // 0-based\n      const day = date.getDate();\n\n      const firstDayOfMonth = new Date(year, month, 1);\n      const week = Math.ceil((day + firstDayOfMonth.getDay()) / 7); // Week of the month\n      const monthLabel = date.toLocaleString(\"default\", { month: \"short\" }); // \"Apr\"\n\n      const label = `${monthLabel} W${week}`;\n\n      // Use first day of that week as a consistent timestamp\n      const sortKey = new Date(year, month, (week - 1) * 7 + 1).getTime();\n\n      if (!map[label]) {\n        map[label] = { count: 0, sortKey };\n      }\n\n      map[label].count += 1;\n    });\n\n    return Object.entries(map)\n      .map(([week, { count, sortKey }]) => ({ week, count, sortKey }))\n      .sort((a, b) => a.sortKey - b.sortKey) // Oldest first\n      .map(({ week, count }) => ({ week, count })); // Strip sortKey\n  }, [visits]);\n\n  const ownershipData = useMemo(() => {\n    const map = {};\n    wetmills.forEach((w) => {\n      const key = w.mill_status || \"Unknown\";\n      map[key] = (map[key] || 0) + 1;\n    });\n    return Object.entries(map).map(([label, count]) => ({ label, count }));\n  }, [wetmills]);\n\n  const exportingStatusData = useMemo(() => {\n    const map = {};\n    wetmills.forEach((w) => {\n      const key = w.exporting_status ? \"Exporter\" : \"Non-exporter\";\n      map[key] = (map[key] || 0) + 1;\n    });\n    return Object.entries(map).map(([label, count]) => ({ label, count }));\n  }, [wetmills]);\n\n  const registrationTimelineData = useMemo(() => {\n    const map = {};\n    wetmills.forEach((w) => {\n      const year = new Date(w.created_at).getFullYear();\n      map[year] = (map[year] || 0) + 1;\n    });\n    return Object.entries(map)\n      .map(([year, count]) => ({ year, count }))\n      .sort((a, b) => a.year - b.year);\n  }, [wetmills]);\n\n  return {\n    loading: millsLoading || baLoading || visitsLoading,\n    error: millsError || baError || visitsError,\n    millsCount,\n    basCount,\n    visitsPerWeekData,\n    ownershipData,\n    exportingStatusData,\n    registrationTimelineData,\n  };\n};\n","import React from \"react\";\nimport { Pie, Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  ArcElement,\n  LineElement,\n  PointElement,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport \"../dashboard.css\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  ArcElement,\n  LineElement,\n  PointElement,\n  Tooltip,\n  Legend\n);\n\nconst DashboardGraphs = ({\n  millsCount,\n  basCount,\n  visitsPerWeekData,\n  ownershipData,\n  exportingStatusData,\n}) => {\n  return (\n    <>\n      {/* Summary stats */}\n      <div className=\"graphs__stats\">\n        <div className=\"stat-card\">\n          <h2>Total Registered Wet Mills</h2>\n          <p>{millsCount}</p>\n        </div>\n        <div className=\"stat-card\">\n          <h2>Total BAs</h2>\n          <p>{basCount}</p>\n        </div>\n      </div>\n\n      {/* Visits per week */}\n      <div className=\"sustain__card sustain__full\">\n        <h3 className=\"sustain__cardTitle\">Wet Mill Visits per Week</h3>\n        <Line\n          data={{\n            labels: visitsPerWeekData.map((d) => d.week),\n            datasets: [\n              {\n                label: \"Wet Mill Visits\",\n                data: visitsPerWeekData.map((d) => d.count),\n                fill: true,\n                borderColor: \"#087c8f\",\n                backgroundColor: \"rgba(8, 124, 143, 0.15)\",\n                tension: 0.4,\n              },\n            ],\n          }}\n          options={{\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: { legend: { position: \"top\" } },\n            scales: {\n              x: { grid: { display: false } }, y: {\n                ticks: {\n                  // Force integer ticks\n                  callback: function (value) {\n                    return Number.isInteger(value) ? value : '';\n                  },\n                  stepSize: 1, // Optional: ensures spacing is in whole numbers\n                }\n              }\n            },\n          }}\n          height={200}\n        />\n      </div>\n\n      {/* Four-grid charts */}\n      <div className=\"sustain__grid\">\n        {/* Ownership Type */}\n        <div className=\"sustain__card\">\n          <h3 className=\"sustain__cardTitle\">Ownership Type</h3>\n          <Pie\n            data={{\n              labels: ownershipData.map((d) => d.label),\n              datasets: [\n                {\n                  data: ownershipData.map((d) => d.count),\n                  backgroundColor: [\"#087c8f\", \"#cccccc\"],\n                  borderColor: \"#ffffff\",\n                  borderWidth: 2,\n                },\n              ],\n            }}\n            options={{\n              responsive: true,\n              maintainAspectRatio: false,\n              plugins: { legend: { position: \"top\" } },\n            }}\n            height={200}\n          />\n        </div>\n\n        {/* Exporter Status */}\n        <div className=\"sustain__card\">\n          <h3 className=\"sustain__cardTitle\">Exporter Status</h3>\n          <Pie\n            data={{\n              labels: exportingStatusData.map((d) => d.label),\n              datasets: [\n                {\n                  data: exportingStatusData.map((d) => d.count),\n                  backgroundColor: [\"#f7931e\", \"#333333\"],\n                  borderColor: \"#ffffff\",\n                  borderWidth: 2,\n                },\n              ],\n            }}\n            options={{\n              responsive: true,\n              maintainAspectRatio: false,\n              plugins: { legend: { position: \"top\" } },\n            }}\n            height={200}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DashboardGraphs;\n","// sustainabilityDashboard/index.jsx\n\nimport React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { useDashboardData } from \"./hooks/useDashboardData\";\nimport DashboardGraphs from \"./components/DashboardGraphs\";\nimport LoadingScreen from \"../../components/LoadingScreen\";\nimport \"./dashboard.css\";\nimport { useOutletContext } from \"react-router-dom\";\n\nconst SustainabilityDashboard = () => {\n\n  const {\n    loading,\n    error,\n    millsCount,\n    basCount,\n    visitsPerWeekData,\n    ownershipData,\n    exportingStatusData,\n    registrationTimelineData,\n  } = useDashboardData();\n\n  // 1. If we’re still loading…\n  if (loading) return <LoadingScreen />;\n\n  // 2. If there’s an error, this block renders\n  if (error)\n    return (\n      <div className=\"sustain__error\">\n        <Typography variant=\"h6\" color=\"error\">\n          Failed to load summary data\n        </Typography>\n        <Typography variant=\"body2\" color=\"textSecondary\">\n          {error.message}\n        </Typography>\n      </div>\n    );\n\n  // 3. Otherwise render the summary\n  return (\n    <div className=\"sustain__container\">\n      <header className=\"sustain__header\">\n        <h1>Summary Page</h1>\n      </header>\n      <DashboardGraphs\n        millsCount={millsCount}\n        basCount={basCount}\n        visitsPerWeekData={visitsPerWeekData}\n        ownershipData={ownershipData}\n        exportingStatusData={exportingStatusData}\n        registrationTimelineData={registrationTimelineData}\n      />\n    </div>\n  );\n};\n\nexport default SustainabilityDashboard;\n"],"names":["GET_ALL_USERS","gql","ADD_USER","UPDATE_USER","GET_WETMILL_BAS","GET_WETMILL_VISITS","DEFAULT_SF_PROJECT_ID","ChartJS","register","CategoryScale","LinearScale","ArcElement","LineElement","PointElement","Tooltip","Legend","_ref","millsCount","basCount","visitsPerWeekData","ownershipData","exportingStatusData","_jsxs","_Fragment","children","className","_jsx","Line","data","labels","map","d","week","datasets","label","count","fill","borderColor","backgroundColor","tension","options","responsive","maintainAspectRatio","plugins","legend","position","scales","x","grid","display","y","ticks","callback","value","Number","isInteger","stepSize","height","Pie","borderWidth","SustainabilityDashboard","loading","error","registrationTimelineData","useDashboardData","_millsData$getWetmill","_baData$getWetMillBus","_visitsData$getVisits","program","useOutletContext","console","log","millsData","millsLoading","millsError","useQuery","GET_WETMILLS","variables","baData","baLoading","baError","sfProjectId","visitsData","visitsLoading","visitsError","wetmills","getWetmills","businessAdvisors","getWetMillBusinessAdvisors","advisors","visits","getVisits","length","useMemo","forEach","v","date","Date","visited_at","year","getFullYear","month","getMonth","day","getDate","firstDayOfMonth","Math","ceil","getDay","toLocaleString","sortKey","getTime","Object","entries","sort","a","b","_ref2","w","key","mill_status","_ref3","exporting_status","_ref4","created_at","_ref5","LoadingScreen","Typography","variant","color","message","DashboardGraphs"],"sourceRoot":""}