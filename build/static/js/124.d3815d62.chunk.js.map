{"version":3,"file":"static/js/124.d3815d62.chunk.js","mappings":"wKAIA,MAYA,EAZuBA,IAA6B,IAA5B,QAAEC,EAAO,UAAEC,GAAWF,EAC5C,OACEG,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAACC,EAAAA,IAAc,CAACC,MAAM,aACtBL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gBAAeC,SAAEJ,KAC9BK,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iBAAgBC,SAAEH,SAE7B,C,gGCVsCO,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAApD,MA+CMC,EAA+BD,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCnCE,EAA0BF,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;EAyB9BG,EAAwBH,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;EAyB5BI,EAAiCJ,EAAAA,EAAI;;;;;;;;;;;;;;;;EAkBrCK,EAAsBL,EAAAA,EAAI;;;;;;;;EAU1BM,EAAkCN,EAAAA,EAAI;;;;;;;oJC3J5C,MAoBA,EApBoBT,IAAkB,IAAjB,QAAEgB,GAAShB,EAC9B,OACEM,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAACc,EAAAA,EAAK,CAACC,UAAW,EAAGC,GAAI,CAAEC,SAAU,OAAQf,SAAA,EAC3CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,SAAEW,EAAQK,WACzClB,EAAAA,EAAAA,MAAA,OAAKmB,MAAO,CAAEC,QAAS,OAAQC,YAAa,QAASnB,SAAA,EACnDC,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CACbxB,QAAS,0BACTC,UAA0C,OAA/Bc,EAAQU,mBAA8BV,EAAQU,mBAAqB,SAGhFpB,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAACxB,QAAS,mBAAoBC,UAAWc,EAAQW,oBAChErB,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAACxB,QAAS,iBAAkBC,UAAWc,EAAQY,kBAC9DtB,EAAAA,EAAAA,KAACmB,EAAAA,EAAc,CAACxB,QAAS,SAAUC,UAAWc,EAAQa,QAAU,eAGhE,E,yBCjBV,MA0HA,EA1HmB7B,IAA2B,IAA1B,iBAAE8B,GAAkB9B,EACtC,MAAM+B,EAAU,CACd,CAAEC,GAAI,MAAOC,KAAM,MAAOC,SAAWC,GAAQA,EAAIC,IAAKC,UAAU,GAChE,CACEL,GAAI,YACJC,KAAM,eACNK,KAAM,EACNJ,SAAWC,GAAQA,EAAII,UACvBF,UAAU,GASZ,CACEL,GAAI,SACJC,KAAM,SACNC,SAAWC,GAAQA,EAAIN,OACvBQ,UAAU,GAEZ,CACEL,GAAI,iBACJC,KAAM,iBACNC,SAAWC,GAAQA,EAAIP,eACvBS,UAAU,GAEZ,CACEL,GAAI,cACJC,KAAM,KACNC,SAAWC,GAAQA,EAAIK,YACvBH,UAAU,GAEZ,CACEL,GAAI,gBACJC,KAAM,KACNC,SAAWC,GAAQA,EAAIM,cACvBJ,UAAU,GAEZ,CACEL,GAAI,cACJC,KAAM,uBACNC,SAAWC,IACT7B,EAAAA,EAAAA,KAAA,OAAAD,SACG8B,EAAIO,aACHpC,EAAAA,EAAAA,KAACqC,EAAAA,EAAI,CAACC,MAAO,MAAOpC,MAAM,UAAUqC,QAAQ,cAE5CvC,EAAAA,EAAAA,KAACqC,EAAAA,EAAI,CAACC,MAAO,KAAMpC,MAAM,QAAQqC,QAAQ,eAI/CR,UAAU,GAEZ,CACEL,GAAI,uBACJC,KAAM,uBACNK,KAAM,EACNJ,SAAWC,IACT7B,EAAAA,EAAAA,KAAA,OAAAD,SACI8B,EAAIO,YAO2B,aAA7BP,EAAIW,sBACNxC,EAAAA,EAAAA,KAACqC,EAAAA,EAAI,CACHC,MAAOT,EAAIW,qBACXtC,MAAM,UACNqC,QAAQ,WACRE,MAAOZ,EAAIW,wBAGbxC,EAAAA,EAAAA,KAACqC,EAAAA,EAAI,CACHC,MAAOT,EAAIW,qBACXtC,MAAM,QACNqC,QAAQ,WACRE,MAAOZ,EAAIW,wBAlBbxC,EAAAA,EAAAA,KAACqC,EAAAA,EAAI,CACHC,MAAO,eACPpC,MAAM,YACNqC,QAAQ,WACRE,MAAO,mBAmBfV,UAAU,GAEZ,CACEL,GAAI,eACJC,KAAM,eACNC,SAAWC,GAAQA,EAAIa,aACvBX,UAAU,IAMRY,EAAOnB,EACTA,EAAiBoB,KAAI,CAACC,EAAiBC,KAAK,CAC1ChB,IAAKgB,EAAQ,EACbC,MAAOF,EAAgBE,MACvBC,QAASH,EAAgBG,QACzBf,UAAWY,EAAgBZ,UAC3BV,OAAQsB,EAAgBtB,QAAU,MAClCD,eAAgBuB,EAAgBvB,gBAAkB,MAClD2B,UAAWJ,EAAgBI,UAC3Bf,YAAaW,EAAgBX,YAC7BC,cAAeU,EAAgBV,cAC/Be,UAAWL,EAAgBK,UAC3Bd,YAAaS,EAAgBT,YAC7BI,qBAAsBK,EAAgBL,qBACtCE,aAAcG,EAAgBH,cAAgB,UAEhD,GAEJ,OACE1C,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACmD,EAAAA,EAAK,CAAC1B,QAASA,EAAS2B,KAAMT,EAAMU,aAtBpB,kBAuBb,EChDV,EAvEmB3D,IAA8B,IAA7B,QAAEgB,EAAO,WAAE4C,GAAY5D,EACzC,MA0CMiD,EAAOW,EACTA,EAAWV,KAAI,CAACW,EAAIT,KAAK,CACvBhB,IAAKgB,EAAQ,EACbU,MAAOD,EAAGC,MACVC,QAASF,EAAGE,QACZC,eAAgBH,EAAGG,eACnBC,iBAAkBJ,EAAGI,iBACrBpC,OAAQgC,EAAGhC,OACXqC,aAAcL,EAAGK,aACjBC,aAAcN,EAAGM,aACjBvC,eAAgBiC,EAAGjC,eACnBwC,aAAcP,EAAGO,aACjBC,aAAcR,EAAGQ,iBAEnB,GAEJ,OACE/D,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACmD,EAAAA,EAAK,CACJ1B,QA7DU,CACd,CAAEC,GAAI,MAAOC,KAAM,MAAOC,SAAWC,GAAQA,EAAIC,IAAKC,UAAU,GAChE,CACEL,GAAI,iBACJC,KAAM,WACNC,SAAWC,GAAQA,EAAI6B,eACvB3B,UAAU,GAEZ,CACEL,GAAI,SACJC,KAAM,SACNC,SAAWC,GAAQA,EAAIN,OACvBQ,UAAU,GAEZ,CACEL,GAAI,eACJC,KAAM,eACNC,SAAWC,GAAQA,EAAI+B,aACvB7B,UAAU,GAQZ,CACEL,GAAI,iBACJC,KAAM,iBACNC,SAAWC,GAAQA,EAAIP,eACvBS,UAAU,GAEZ,CACEL,GAAI,eACJC,KAAM,eACNC,SAAWC,GAAQA,EAAIkC,aACvBhC,UAAU,IA0BRqB,KAAMT,EACNU,aAvBe,YAwBf3C,QAASA,KAEP,ECFV,EAjEsBhB,IAAuB,IAAtB,aAAEsE,GAActE,EACrC,MAyCMiD,EAAOqB,EACTA,EAAapB,KAAI,CAACqB,EAAanB,KAAK,CAClChB,IAAKgB,EAAQ,EACboB,KAAMD,EAAYC,KAClBC,UAAY,GAAEF,EAAYG,cACI,SAA5BH,EAAYI,YAAyBJ,EAAYI,YAAc,OAC7DJ,EAAYK,YAChBC,OAA+B,MAAvBN,EAAYM,OAAgB,OAAS,SAC7CC,SAAUP,EAAYO,SACtBjD,OAAQ0C,EAAY1C,OACpBkD,OAAQR,EAAYQ,OACpBnD,eAAgB2C,EAAY3C,eAC5BD,iBAAkB4C,EAAY5C,qBAEhC,GAEJ,OACErB,EAAAA,EAAAA,KAAA,OAAAD,UACEC,EAAAA,EAAAA,KAACmD,EAAAA,EAAK,CAAC1B,QA3DK,CACd,CAAEC,GAAI,MAAOC,KAAM,MAAOC,SAAWC,GAAQA,EAAIC,IAAKC,UAAU,GAChE,CACEL,GAAI,YACJC,KAAM,YACNC,SAAWC,GAAQA,EAAIsC,UACvBpC,UAAU,GAEZ,CACEL,GAAI,SACJC,KAAM,SACNC,SAAWC,GAAQA,EAAI0C,OACvBxC,UAAU,GAEZ,CACEL,GAAI,WACJC,KAAM,WACNC,SAAWC,GAAQA,EAAI2C,SACvBzC,UAAU,GAEZ,CACEL,GAAI,SACJC,KAAM,SACNC,SAAWC,GAAQA,EAAIN,OACvBQ,UAAU,GAEZ,CACEL,GAAI,iBACJC,KAAM,iBACNC,SAAWC,GAAQA,EAAIP,eACvBS,UAAU,GAEZ,CACEL,GAAI,mBACJC,KAAM,mBACNC,SAAWC,GAAQA,EAAIR,iBACvBU,UAAU,IAuBeqB,KAAMT,EAAMU,aApBpB,kBAqBb,ECxDH,SAASqB,EAAeC,GAC7B,MAAM,SAAE5E,EAAQ,MAAE6E,EAAK,MAAE9B,KAAU+B,GAAUF,EAE7C,OACE3E,EAAAA,EAAAA,KAAA,OACE8E,KAAK,WACLC,OAAQH,IAAU9B,EAClBpB,GAAK,mBAAkBoB,IACvB,kBAAkB,cAAaA,OAC3B+B,EAAK9E,SAER6E,IAAU9B,IACT9C,EAAAA,EAAAA,KAACgF,EAAAA,EAAG,CAACnE,GAAI,CAAEoE,EAAG,GAAIlF,UAChBC,EAAAA,EAAAA,KAACkF,EAAAA,EAAU,CAAAnF,SAAEA,OAKvB,CAQO,SAASoF,EAAUrC,GACxB,MAAO,CACLpB,GAAK,cAAaoB,IAClB,gBAAkB,mBAAkBA,IAExC,CAEe,SAASsC,EAAM1F,GAK1B,IAL2B,QAC7BgB,EAAO,iBACPc,EAAgB,WAChB8B,EAAU,aACVU,GACDtE,EACC,MAAOkF,EAAOS,IAAYC,EAAAA,EAAAA,UAAS,GAMnC,OACEzF,EAAAA,EAAAA,MAACmF,EAAAA,EAAG,CAACnE,GAAI,CAAE0E,MAAO,OAAQC,UAAW,QAASzF,SAAA,EAC5CC,EAAAA,EAAAA,KAACgF,EAAAA,EAAG,CAACnE,GAAI,CAAE4E,aAAc,EAAGC,YAAa,WAAY3F,UACnDF,EAAAA,EAAAA,MAAC8F,EAAAA,EAAI,CACHf,MAAOA,EACPgB,SATaC,CAACC,EAAOC,KAC3BV,EAASU,EAAS,EASZ,aAAW,qBAAoBhG,SAAA,EAE/BC,EAAAA,EAAAA,KAACgG,EAAAA,EAAG,CAAC1D,MAAM,iBAAkB6C,EAAU,MACvCnF,EAAAA,EAAAA,KAACgG,EAAAA,EAAG,CAAC1D,MAAM,kBAAmB6C,EAAU,MACxCnF,EAAAA,EAAAA,KAACgG,EAAAA,EAAG,CAAC1D,MAAM,qBAAsB6C,EAAU,MAC3CnF,EAAAA,EAAAA,KAACgG,EAAAA,EAAG,CAAC1D,MAAM,sBAAuB6C,EAAU,WAGhDnF,EAAAA,EAAAA,KAAC0E,EAAc,CAACE,MAAOA,EAAO9B,MAAO,EAAE/C,UACrCC,EAAAA,EAAAA,KAACiG,EAAW,CAACvF,QAASA,OAExBV,EAAAA,EAAAA,KAAC0E,EAAc,CAACE,MAAOA,EAAO9B,MAAO,EAAE/C,UACrCC,EAAAA,EAAAA,KAACkG,EAAU,CAAC1E,iBAAkBA,OAEhCxB,EAAAA,EAAAA,KAAC0E,EAAc,CAACE,MAAOA,EAAO9B,MAAO,EAAE/C,UACrCC,EAAAA,EAAAA,KAACmG,EAAU,CAAC7C,WAAYA,OAE1BtD,EAAAA,EAAAA,KAAC0E,EAAc,CAACE,MAAOA,EAAO9B,MAAO,EAAE/C,UACrCC,EAAAA,EAAAA,KAACoG,EAAa,CAACpC,aAAcA,QAIrC,C,4FC5EA,MAAMqC,GAAaC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,EAAa5G,IAAA,IAAC,MAAE8G,GAAO9G,EAAA,MAAM,CAC9C+G,eAAgB,OAChBvG,MAAO,UACPwG,WAAY,yBACZ,UAAW,CACTxG,MAAO,UACPyG,WAAY,OAEf,IAqBD,EAnBmBC,IAAkC,IAAjC,KAAEjF,EAAI,UAAEkF,EAAS,OAAEC,GAAQF,EAC7C,OACE5G,EAAAA,EAAAA,KAAA,OAAK8E,KAAK,eAAc/E,UACtBF,EAAAA,EAAAA,MAACkH,EAAAA,EAAW,CACV,aAAW,aACXlG,GAAI,CAAEmG,SAAU,OAAQC,OAAQ,WAAYlH,SAAA,EAE5CC,EAAAA,EAAAA,KAACqG,EAAU,CAACa,GAAK,OAAMJ,IAAS/G,SAAE8G,KAClC7G,EAAAA,EAAAA,KAACqG,EAAU,CAACc,KAAK,GAAG,eAAa,OAAMpH,SACpC4B,EACEyF,MAAM,KACNxE,KAAKyE,GAASA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,MAAM,KACxDC,KAAK,WAGR,C,+KCpBV,MAAMC,EAAS,CACblC,UAAW,OACXmB,WAAY,MACZzG,MAAO,yBACP8G,SAAU,OACVlG,SAAU,OAkGZ,EA/FiBpB,IAA2C,IAA1C,eAAEiI,EAAc,iBAAEnG,GAAkB9B,EACpD,MAEOkI,EAAoBC,IAAyBvC,EAAAA,EAAAA,UAAS,KACtDwC,EAAsBC,IAA2BzC,EAAAA,EAAAA,UAAS,IAG3D0C,GAASC,EAAAA,EAAAA,MACT,GAAEvG,GAAOsG,EAGTE,GAAmBxG,EAGnByG,GAAuBC,EAAAA,EAAAA,GAASC,EAAAA,GAAwB,CAC5DC,UAAW,CAAEC,KAAM7G,GACnB8G,KAAMN,KAIF,QAAEO,EAAO,MAAEC,EAAK,KAAEtF,IAASgF,EAAAA,EAAAA,GAAS/H,EAAAA,GAAyB,CACjEiI,UAAW,CAAEC,KAAM7G,GACnB8G,KAAMN,IAGFS,EAAwBhB,EAAeiB,MAC1CC,GAAUA,EAAMC,QAAUpH,IAqB7B,OAfAqH,EAAAA,EAAAA,YAAU,KACR,GAAIZ,EAAqB/E,KAAM,CAC7B,MAAME,EACJ6E,EAAqB/E,KAAK4F,qBAAqB1F,WACjDuE,EAAsBvE,EACxB,IACC,CAAC6E,EAAqB/E,QAGzB2F,EAAAA,EAAAA,YAAU,KACJ3F,GAAQA,EAAK6F,uBAAuBjF,cACtC+D,EAAwB3E,EAAK6F,uBAAuBjF,aACtD,GACC,CAACZ,IAEAqF,GACKzI,EAAAA,EAAAA,KAACkJ,EAAAA,EAAa,IAGnBR,GAEA1I,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,UAChCC,EAAAA,EAAAA,KAACkF,EAAAA,EAAU,CAAChF,MAAM,QAAOH,SAAC,0BAK9BC,EAAAA,EAAAA,KAAA,OAAAD,SACG4I,IACC9I,EAAAA,EAAAA,MAAAsJ,EAAAA,SAAA,CAAApJ,SAAA,EACEC,EAAAA,EAAAA,KAACoJ,EAAAA,EAAU,CACTzH,KAAMgH,EAAsB5H,QAC5B8F,UA/DU,iBAgEVC,OApCgB,gBAsClBjH,EAAAA,EAAAA,MAAA,OAAKmB,MAAO,CAAEwE,UAAW,QAASzF,SAAA,EAChCC,EAAAA,EAAAA,KAAA,MAAAD,SAAK4I,EAAsB5H,WAC3Bf,EAAAA,EAAAA,KAAA,KAAGgB,MAAO0G,EAAO3H,SAAC,uSAQpBC,EAAAA,EAAAA,KAACoF,EAAAA,GAAM,CACL1E,QAASiI,EACTnH,iBACEA,GACAA,EAAiB6H,OAAS,GAC1B7H,EAAiB8H,QACdC,GAAYA,EAAQC,WAAab,EAAsB5H,UAG5DuC,WAAYsE,EACZ5D,aAAc8D,QAIhB,C","sources":["features/tgdetail/Detailscontent.js","graphql/queries/participantsRequests.js","features/tgdetail/Tgtabdetail.js","features/tgdetail/tstabtable.js","features/tgdetail/fvtabtable.js","features/tgdetail/partstabtable.js","features/tgdetail/Tgtabs.js","components/Breadcrumbs.js","features/tgdetail/Tgdetail.js"],"sourcesContent":["import React from 'react'\r\nimport './tgdetail.css'\r\nimport { LiaCircleSolid } from 'react-icons/lia'\r\n\r\nconst Detailscontent = ({ heading, paragraph }) => {\r\n  return (\r\n    <div className='details__content'>\r\n      <LiaCircleSolid color='#3A57E8' />\r\n      <div className='details__content2'>\r\n        <p className='details__para'>{heading}</p>\r\n        <p className='details__para2'>{paragraph}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Detailscontent\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst GET_PARTICIPANTS_ATTENDANCE_PER_PROJECT = gql`\r\n  query GetParticipantsAttendanceByProject($projectId: String!) {\r\n    getParticipantsByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      participants {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        age\r\n        coffee_tree_numbers\r\n        coop_membership_number\r\n        phone_number\r\n        hh_number\r\n        ffg_id\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n        create_in_commcare\r\n      }\r\n    }\r\n    getAttendances(project_id: $projectId) {\r\n      message\r\n      status\r\n      attendance {\r\n        attendance_id\r\n        participant_id\r\n        attendance_name\r\n        attendance_date\r\n        attendance_status\r\n        session_id\r\n        module_name\r\n        module_number\r\n        module_id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PARTICIPANTS_PER_PROJECT = gql`\r\n  query GetParticipantsAttendanceByProject($projectId: String!) {\r\n    getParticipantsByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      participants {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        age\r\n        coffee_tree_numbers\r\n        number_of_coffee_plots\r\n        coop_membership_number\r\n        phone_number\r\n        hh_number\r\n        ffg_id\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n        create_in_commcare\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PARTICIPANTS_PER_TG = gql`\r\n  query GetParticipantsByGroup($tgId: String!) {\r\n    getParticipantsByGroup(tg_id: $tgId) {\r\n      message\r\n      status\r\n      participants {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PARTICIPANT_BY_ID = gql`\r\n  query GetParticipantsById($id: String!) {\r\n    getParticipantsById(p_id: $id) {\r\n      message\r\n      status\r\n      participant {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_ATTENDANCE_PER_PARTICIPANT = gql`\r\n  query GetAttendanceByParticipant($participantId: String!) {\r\n    getAttendanceByParticipant(participant_id: $participantId) {\r\n      message\r\n      status\r\n      attendance {\r\n        attendance_id\r\n        participant_id\r\n        attendance_name\r\n        attendance_date\r\n        attendance_status\r\n        module_name\r\n        session_id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPLOAD_PARTICIPANTS = gql`\r\n  mutation UploadParticipants($partsFile: Upload!) {\r\n    uploadParticipants(parts_file: $partsFile) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst SYNC_PARTICIPANTS_WITH_COMMCARE = gql`\r\n  mutation SyncParticipantsWithCOMMCARE($projectId: String!) {\r\n    syncParticipantsWithCOMMCARE(project_id: $projectId) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  GET_PARTICIPANTS_PER_PROJECT,\r\n  GET_PARTICIPANTS_PER_TG,\r\n  GET_ATTENDANCE_PER_PARTICIPANT,\r\n  UPLOAD_PARTICIPANTS,\r\n  SYNC_PARTICIPANTS_WITH_COMMCARE,\r\n  GET_PARTICIPANTS_ATTENDANCE_PER_PROJECT,\r\n  GET_PARTICIPANT_BY_ID\r\n};\r\n","import React from 'react'\r\nimport { Paper } from '@mui/material'\r\nimport './tgdetail.css'\r\nimport Detailscontent from './Detailscontent'\r\n\r\nconst Tgtabdetail = ({ details }) => {\r\n  return (\r\n    <div>\r\n      <Paper elevation={1} sx={{ maxWidth: '30%' }}>\r\n        <div className='details__title'>{details.tg_name}</div>\r\n        <div style={{ padding: '10px', paddingLeft: '20px' }}>\r\n          <Detailscontent\r\n            heading={'# of Registered Farmers'}\r\n            paragraph={details.total_participants !== null ? details.total_participants : 'N/A'}\r\n          />\r\n\r\n          <Detailscontent heading={'Business Advisor'} paragraph={details.business_advisor} />\r\n          <Detailscontent heading={'Farmer Trainer'} paragraph={details.farmer_trainer} />\r\n          <Detailscontent heading={'TNS ID'} paragraph={details.tns_id || 'N/A'} />\r\n        </div>\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tgtabdetail\r\n","import React from \"react\";\r\nimport { Chip } from \"@mui/material\";\r\nimport Table from \"../../components/Table/Table\";\r\n\r\nconst Tstabtable = ({ trainingSessions }) => {\r\n  const columns = [\r\n    { id: \"num\", name: \"No.\", selector: (row) => row.num, sortable: true },\r\n    {\r\n      id: \"ts_module\",\r\n      name: \"Session Name\",\r\n      grow: 2,\r\n      selector: (row) => row.ts_module,\r\n      sortable: true,\r\n    },\r\n    // {\r\n    //   id: \"ts_module\",\r\n    //   name: \"Training Month\",\r\n    //   grow: 2,\r\n    //   selector: (row) => row.ts_module,\r\n    //   sortable: true,\r\n    // },\r\n    {\r\n      id: \"tns_id\",\r\n      name: \"TNS ID\",\r\n      selector: (row) => row.tns_id,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"farmer_trainer\",\r\n      name: \"Farmer Trainer\",\r\n      selector: (row) => row.farmer_trainer,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"total_males\",\r\n      name: \"MA\",\r\n      selector: (row) => row.total_males,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"total_females\",\r\n      name: \"FA\",\r\n      selector: (row) => row.total_females,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"is_verified\",\r\n      name: \"Is Session Verified?\",\r\n      selector: (row) => (\r\n        <div>\r\n          {row.is_verified ? (\r\n            <Chip label={\"Yes\"} color=\"success\" variant=\"outlined\" />\r\n          ) : (\r\n            <Chip label={\"No\"} color=\"error\" variant=\"outlined\" />\r\n          )}\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"session_image_status\",\r\n      name: \"Session Image Status\",\r\n      grow: 2,\r\n      selector: (row) => (\r\n        <div>\r\n          {!row.is_verified ? (\r\n            <Chip\r\n              label={\"not_verified\"}\r\n              color=\"secondary\"\r\n              variant=\"outlined\"\r\n              title={\"not_verified\"}\r\n            />\r\n          ) : row.session_image_status === \"approved\" ? (\r\n            <Chip\r\n              label={row.session_image_status}\r\n              color=\"success\"\r\n              variant=\"outlined\"\r\n              title={row.session_image_status}\r\n            />\r\n          ) : (\r\n            <Chip\r\n              label={row.session_image_status}\r\n              color=\"error\"\r\n              variant=\"outlined\"\r\n              title={row.session_image_status}\r\n            />\r\n          )}\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"session_date\",\r\n      name: \"Session Date\",\r\n      selector: (row) => row.session_date,\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  const tableRowItem = \"trainsession\";\r\n\r\n  const rows = trainingSessions\r\n    ? trainingSessions.map((trainingSession, index) => ({\r\n        num: index + 1,\r\n        ts_id: trainingSession.ts_id,\r\n        ts_name: trainingSession.ts_name,\r\n        ts_module: trainingSession.ts_module,\r\n        tns_id: trainingSession.tns_id || \"N/A\",\r\n        farmer_trainer: trainingSession.farmer_trainer || \"N/A\",\r\n        ts_status: trainingSession.ts_status,\r\n        total_males: trainingSession.total_males,\r\n        total_females: trainingSession.total_females,\r\n        has_image: trainingSession.has_image,\r\n        is_verified: trainingSession.is_verified,\r\n        session_image_status: trainingSession.session_image_status,\r\n        session_date: trainingSession.session_date || \"N/A\",\r\n      }))\r\n    : [];\r\n\r\n  return (\r\n    <div>\r\n      <Table columns={columns} data={rows} tableRowItem={tableRowItem} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tstabtable;\r\n","import React from \"react\";\r\nimport Table from \"../../components/Table/Table\";\r\n\r\nconst FvTabTable = ({ details, farmVisits }) => {\r\n  const columns = [\r\n    { id: \"num\", name: \"No.\", selector: (row) => row.num, sortable: true },\r\n    {\r\n      id: \"training_group\",\r\n      name: \"FFG Name\",\r\n      selector: (row) => row.training_group,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"tns_id\",\r\n      name: \"TNS ID\",\r\n      selector: (row) => row.tns_id,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"farm_visited\",\r\n      name: \"Farm Visited\",\r\n      selector: (row) => row.farm_visited,\r\n      sortable: true,\r\n    },\r\n    // {\r\n    //   id: \"household_id\",\r\n    //   name: \"Household Id\",\r\n    //   selector: (row) => row.household_id,\r\n    //   sortable: true,\r\n    // },\r\n    {\r\n      id: \"farmer_trainer\",\r\n      name: \"Farmer Trainer\",\r\n      selector: (row) => row.farmer_trainer,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"date_visited\",\r\n      name: \"Date Visited\",\r\n      selector: (row) => row.date_visited,\r\n      sortable: true,\r\n    },\r\n  ];\r\n\r\n  const tableRowItem = \"farmvisit\";\r\n\r\n  const rows = farmVisits\r\n    ? farmVisits.map((fv, index) => ({\r\n        num: index + 1,\r\n        fv_id: fv.fv_id,\r\n        fv_name: fv.fv_name,\r\n        training_group: fv.training_group,\r\n        training_session: fv.training_session,\r\n        tns_id: fv.tns_id,\r\n        farm_visited: fv.farm_visited,\r\n        household_id: fv.household_id,\r\n        farmer_trainer: fv.farmer_trainer,\r\n        has_training: fv.has_training,\r\n        date_visited: fv.date_visited,\r\n      }))\r\n    : [];\r\n\r\n  return (\r\n    <div>\r\n      <Table\r\n        columns={columns}\r\n        data={rows}\r\n        tableRowItem={tableRowItem}\r\n        details={details}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FvTabTable;\r\n","import React from \"react\";\r\nimport Table from \"../../components/Table/Table\";\r\n\r\nconst PartsTabTable = ({ participants }) => {\r\n  const columns = [\r\n    { id: \"num\", name: \"No.\", selector: (row) => row.num, sortable: true },\r\n    {\r\n      id: \"full_name\",\r\n      name: \"Full Name\",\r\n      selector: (row) => row.full_name,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"gender\",\r\n      name: \"Gender\",\r\n      selector: (row) => row.gender,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"location\",\r\n      name: \"Location\",\r\n      selector: (row) => row.location,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"tns_id\",\r\n      name: \"TNS ID\",\r\n      selector: (row) => row.tns_id,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"farmer_trainer\",\r\n      name: \"Farmer Trainer\",\r\n      selector: (row) => row.farmer_trainer,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"business_advisor\",\r\n      name: \"Business Advisor\",\r\n      selector: (row) => row.business_advisor,\r\n      sortable: true,\r\n    },\r\n  ];\r\n  const tableRowItem = \"participants\";\r\n\r\n  const rows = participants\r\n    ? participants.map((participant, index) => ({\r\n        num: index + 1,\r\n        p_id: participant.p_id,\r\n        full_name: `${participant.first_name} ${\r\n          participant.middle_name !== 'null' ? participant.middle_name : \" \"\r\n        } ${participant.last_name}`,\r\n        gender: participant.gender === \"m\"? \"Male\" : \"Female\",\r\n        location: participant.location,\r\n        tns_id: participant.tns_id,\r\n        status: participant.status,\r\n        farmer_trainer: participant.farmer_trainer,\r\n        business_advisor: participant.business_advisor,\r\n      }))\r\n    : [];\r\n\r\n  return (\r\n    <div>\r\n      <Table columns={columns} data={rows} tableRowItem={tableRowItem} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PartsTabTable;\r\n","import { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, Tabs, Tab, Box } from \"@mui/material\";\r\nimport Tgtabdetail from \"./Tgtabdetail\";\r\nimport Tstabtable from \"./tstabtable\";\r\nimport FvTabTable from \"./fvtabtable\";\r\nimport PartsTabTable from \"./partstabtable\";\r\n\r\nexport function CustomTabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box sx={{ p: 3 }}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nCustomTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.number.isRequired,\r\n  value: PropTypes.number.isRequired,\r\n};\r\n\r\nexport function a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nexport default function Tgtabs({\r\n  details,\r\n  trainingSessions,\r\n  farmVisits,\r\n  participants,\r\n}) {\r\n  const [value, setValue] = useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: \"100%\", marginTop: \"20px\" }}>\r\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"basic tabs example\"\r\n        >\r\n          <Tab label=\"FFG Details\" {...a11yProps(0)} />\r\n          <Tab label=\"FFG sessions\" {...a11yProps(1)} />\r\n          <Tab label=\"FFG Farm Visits\" {...a11yProps(2)} />\r\n          <Tab label=\"FFG Participants\" {...a11yProps(2)} />\r\n        </Tabs>\r\n      </Box>\r\n      <CustomTabPanel value={value} index={0}>\r\n        <Tgtabdetail details={details} />\r\n      </CustomTabPanel>\r\n      <CustomTabPanel value={value} index={1}>\r\n        <Tstabtable trainingSessions={trainingSessions} />\r\n      </CustomTabPanel>\r\n      <CustomTabPanel value={value} index={2}>\r\n        <FvTabTable farmVisits={farmVisits} />\r\n      </CustomTabPanel>\r\n      <CustomTabPanel value={value} index={3}>\r\n        <PartsTabTable participants={participants} />\r\n      </CustomTabPanel>\r\n    </Box>\r\n  );\r\n}\r\n","import * as React from \"react\";\r\nimport { Breadcrumbs } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { styled } from \"@mui/system\";\r\n\r\nconst CustomLink = styled(Link)(({ theme }) => ({\r\n  textDecoration: \"none\",\r\n  color: \"inherit\",\r\n  transition: \"color 0.3s ease-in-out\",\r\n  \"&:hover\": {\r\n    color: \"#25245D\",\r\n    fontWeight: \"600\",\r\n  },\r\n}));\r\n\r\nconst Breadcrumb = ({ name, firstItem, linkTo }) => {\r\n  return (\r\n    <div role=\"presentation\">\r\n      <Breadcrumbs\r\n        aria-label=\"breadcrumb\"\r\n        sx={{ fontSize: \"12px\", cursor: \"pointer\" }}\r\n      >\r\n        <CustomLink to={`/in/${linkTo}`}>{firstItem}</CustomLink>\r\n        <CustomLink href=\"\" aria-current=\"page\">\r\n          {name\r\n            .split(\" \")\r\n            .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n            .join(\" \")}\r\n        </CustomLink>\r\n      </Breadcrumbs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport Breadcrumb from \"../../components/Breadcrumbs\";\r\nimport Tgtabs from \"./Tgtabs\";\r\nimport { GET_FARM_VISITS_PER_TG } from \"../../graphql/queries/farmVisitsRequests\";\r\nimport { GET_PARTICIPANTS_PER_TG } from \"../../graphql/queries/participantsRequests\";\r\nimport LoadingScreen from \"../../components/LoadingScreen\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nconst Styles = {\r\n  marginTop: \"15px\",\r\n  fontWeight: \"400\",\r\n  color: \"rgba(125, 127, 136, 1)\",\r\n  fontSize: \"12px\",\r\n  maxWidth: \"80%\",\r\n};\r\n\r\nconst Tgdetail = ({ trainingGroups, trainingSessions }) => {\r\n  const breadCrumbs = \"Training group\";\r\n\r\n  const [farmVisitsPerGroup, setFarmVisitsPerGroup] = useState([]);\r\n  const [participantsPerGroup, setParticipantsPerGroup] = useState([]);\r\n\r\n  // Get params from URL\r\n  const params = useParams();\r\n  const { id } = params;\r\n\r\n  // Ensure `id` is present before making the query\r\n  const shouldSkipQuery = !id;\r\n\r\n  // Query for farm visits\r\n  const getAllFarmVisitsByTG = useQuery(GET_FARM_VISITS_PER_TG, {\r\n    variables: { tgId: id },\r\n    skip: shouldSkipQuery, // Skip query if id is not present\r\n  });\r\n\r\n  // Query for participants\r\n  const { loading, error, data } = useQuery(GET_PARTICIPANTS_PER_TG, {\r\n    variables: { tgId: id },\r\n    skip: shouldSkipQuery, // Skip query if id is not present\r\n  });\r\n\r\n  const selectedTrainingGroup = trainingGroups.find(\r\n    (group) => group.tg_id === id\r\n  );\r\n\r\n  const breadCrumbsLinkTo = \"traingroup\";\r\n\r\n  // Update farm visits data\r\n  useEffect(() => {\r\n    if (getAllFarmVisitsByTG.data) {\r\n      const farmVisits =\r\n        getAllFarmVisitsByTG.data.getFarmVisitsByGroup.farmVisits;\r\n      setFarmVisitsPerGroup(farmVisits);\r\n    }\r\n  }, [getAllFarmVisitsByTG.data]);\r\n\r\n  // Update participants data\r\n  useEffect(() => {\r\n    if (data && data.getParticipantsByGroup.participants) {\r\n      setParticipantsPerGroup(data.getParticipantsByGroup.participants);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading) {\r\n    return <LoadingScreen />; // Display loading spinner\r\n  }\r\n\r\n  if (error)\r\n    return (\r\n      <div className=\"circular_progress\">\r\n        <Typography color=\"error\">Error loading data</Typography>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div>\r\n      {selectedTrainingGroup && (\r\n        <>\r\n          <Breadcrumb\r\n            name={selectedTrainingGroup.tg_name}\r\n            firstItem={breadCrumbs}\r\n            linkTo={breadCrumbsLinkTo}\r\n          />\r\n          <div style={{ marginTop: \"10px\" }}>\r\n            <h1>{selectedTrainingGroup.tg_name}</h1>\r\n            <p style={Styles}>\r\n              In the focal farmer group details you can access detailed information\r\n              for a specific ffg, explore the training sessions list associated\r\n              with the selected group. Review the Farm Visits List associated with\r\n              the ffg and export the information displayed on this page to Excel or\r\n              CSV format.\r\n            </p>\r\n          </div>\r\n          <Tgtabs\r\n            details={selectedTrainingGroup}\r\n            trainingSessions={\r\n              trainingSessions &&\r\n              trainingSessions.length > 0 &&\r\n              trainingSessions.filter(\r\n                (session) => session.ts_group === selectedTrainingGroup.tg_name\r\n              )\r\n            }\r\n            farmVisits={farmVisitsPerGroup}\r\n            participants={participantsPerGroup}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tgdetail;\r\n"],"names":["_ref","heading","paragraph","_jsxs","className","children","_jsx","LiaCircleSolid","color","gql","GET_PARTICIPANTS_PER_PROJECT","GET_PARTICIPANTS_PER_TG","GET_PARTICIPANT_BY_ID","GET_ATTENDANCE_PER_PARTICIPANT","UPLOAD_PARTICIPANTS","SYNC_PARTICIPANTS_WITH_COMMCARE","details","Paper","elevation","sx","maxWidth","tg_name","style","padding","paddingLeft","Detailscontent","total_participants","business_advisor","farmer_trainer","tns_id","trainingSessions","columns","id","name","selector","row","num","sortable","grow","ts_module","total_males","total_females","is_verified","Chip","label","variant","session_image_status","title","session_date","rows","map","trainingSession","index","ts_id","ts_name","ts_status","has_image","Table","data","tableRowItem","farmVisits","fv","fv_id","fv_name","training_group","training_session","farm_visited","household_id","has_training","date_visited","participants","participant","p_id","full_name","first_name","middle_name","last_name","gender","location","status","CustomTabPanel","props","value","other","role","hidden","Box","p","Typography","a11yProps","Tgtabs","setValue","useState","width","marginTop","borderBottom","borderColor","Tabs","onChange","handleChange","event","newValue","Tab","Tgtabdetail","Tstabtable","FvTabTable","PartsTabTable","CustomLink","styled","Link","theme","textDecoration","transition","fontWeight","_ref2","firstItem","linkTo","Breadcrumbs","fontSize","cursor","to","href","split","word","charAt","toUpperCase","slice","join","Styles","trainingGroups","farmVisitsPerGroup","setFarmVisitsPerGroup","participantsPerGroup","setParticipantsPerGroup","params","useParams","shouldSkipQuery","getAllFarmVisitsByTG","useQuery","GET_FARM_VISITS_PER_TG","variables","tgId","skip","loading","error","selectedTrainingGroup","find","group","tg_id","useEffect","getFarmVisitsByGroup","getParticipantsByGroup","LoadingScreen","_Fragment","Breadcrumb","length","filter","session","ts_group"],"sourceRoot":""}