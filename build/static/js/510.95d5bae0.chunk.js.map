{"version":3,"file":"static/js/510.95d5bae0.chunk.js","mappings":"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","sources":["components/LoadingScreen.js","graphql/queries/trainingModulesRequests.js","features/cards/card.js","components/Modals/ListUpModal.js","pages/Dashboard.js"],"sourcesContent":["import React from \"react\";\r\nimport { CircularProgress } from \"@mui/material\";\r\n\r\nconst LoadingScreen = () => {\r\n  return (\r\n    <div className=\"circular_progress\">\r\n      <div className=\"spinner-container\">\r\n        {/* Optional glow effect */}\r\n        <div className=\"spinner-glow\"></div>\r\n        <CircularProgress className=\"spinner\" size={80} thickness={4.5} style={{ color: '#1b2a4e' }}/>\r\n      </div>\r\n      <h2>Loading Data...</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadingScreen;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst GET_ALL_TRAINING_MODULES = gql`\r\n  query GetAllTrainingModules {\r\n    getAllTrainingModules {\r\n      message\r\n      status\r\n      training_modules {\r\n        tm_id\r\n        tm_name\r\n        tm_title\r\n        tm_module_number\r\n        tm_project\r\n        tm_status\r\n        tm_is_current\r\n        tm_date\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_TRAINING_MODULES_PER_PROJECT = gql`\r\n  query GetTrainingModulesByProject($projectId: String!) {\r\n    getTrainingModulesByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      training_modules {\r\n        tm_id\r\n        tm_name\r\n        tm_title\r\n        tm_module_number\r\n        tm_project\r\n        tm_status\r\n        tm_is_current\r\n        tm_date\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { GET_ALL_TRAINING_MODULES, GET_TRAINING_MODULES_PER_PROJECT };\r\n","import React from 'react'\r\nimport './card.css'\r\n\r\nconst Card = ({ heading, figures, icon, color }) => {\r\n  return (\r\n    <div>\r\n      <div className='card__container'>\r\n        <div className='card__content'>\r\n          <div className='card__text'>\r\n            <p className='card__text1'>{heading}</p>\r\n            <p className='card__text2'>{figures}</p>\r\n          </div>\r\n          <div className='card__icon' style={{ backgroundColor: color }}>\r\n            {icon}{' '}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  List,\r\n  ListItem,\r\n  ListItemAvatar,\r\n  ListItemText,\r\n} from \"@mui/material\";\r\nimport React from \"react\";\r\nimport Avatar from \"react-avatar\";\r\n\r\nconst ListUpModal = ({ open, handleClose, title, data }) => {\r\n  return (\r\n    <Dialog open={open} onClose={handleClose}>\r\n      <DialogTitle>{title}</DialogTitle>\r\n      <DialogContent>\r\n        <List>\r\n          {data.map((item, index) => (\r\n            <ListItem key={index} button>\r\n              <ListItemAvatar>\r\n                <Avatar\r\n                  name={item}\r\n                  size=\"40\"\r\n                  round={true}\r\n                  color=\"#7B9D6F\"\r\n                  fgColor=\"#fff\"\r\n                />\r\n              </ListItemAvatar>\r\n              <ListItemText primary={item} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} color=\"primary\">\r\n          Close\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default ListUpModal;\r\n","import React, { useEffect, useState, useMemo } from \"react\";\r\nimport Card from \"../features/cards/card\";\r\nimport { MdGroups } from \"react-icons/md\";\r\nimport { VscFileSubmodule } from \"react-icons/vsc\";\r\nimport { BsPersonBoundingBox } from \"react-icons/bs\";\r\nimport { GiFarmer } from \"react-icons/gi\";\r\nimport { FaTripadvisor } from \"react-icons/fa\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport ListUpModal from \"../components/Modals/ListUpModal\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { Chrono } from \"react-chrono\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { GET_TRAINING_MODULES_PER_PROJECT } from \"../graphql/queries/trainingModulesRequests\";\r\nimport PropTypes from 'prop-types';\r\nimport LoadingScreen from \"../components/LoadingScreen\";\r\n\r\nconst Dashboard = ({ trainingGroups, projectStats, selectedProject }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [list, setList] = useState([]);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [modules, setModules] = useState([]);\r\n\r\n  const { data, loading, error } = useQuery(GET_TRAINING_MODULES_PER_PROJECT, {\r\n    variables: { projectId: selectedProject },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data && data.getTrainingModulesByProject?.status === 200) {\r\n      setModules(\r\n        data.getTrainingModulesByProject.training_modules.map((t_module) => ({\r\n          title: t_module.tm_date || \"No date\",\r\n          cardTitle: t_module.tm_is_current\r\n            ? `${t_module.tm_title} (Current)`\r\n            : t_module.tm_title,\r\n          cardSubtitle: `Session Number: ${t_module.tm_module_number}`,\r\n          isCurrent: t_module.tm_is_current,\r\n        }))\r\n      );\r\n    }\r\n  }, [data]);\r\n\r\n  const statsData = useMemo(() => [\r\n    {\r\n      name: \"total_training_groups\",\r\n      heading: \"Total FFGs\",\r\n      figures: trainingGroups.length,\r\n      icon: <MdGroups />,\r\n      color: \"#25245D\",\r\n      path: \"/in/traingroup\",\r\n    },\r\n    {\r\n      name: \"total_training_modules\",\r\n      heading: \"Completed Sessions\",\r\n      figures:\r\n        data?.getTrainingModulesByProject?.status === 200\r\n          ? data.getTrainingModulesByProject.training_modules.length\r\n          : 0,\r\n      icon: <VscFileSubmodule />,\r\n      color: \"#25245D\",\r\n    },\r\n    {\r\n      name: \"total_completed_training_modules\",\r\n      heading: \"Completed Topics\",\r\n      figures:\r\n        data?.getTrainingModulesByProject?.status === 200\r\n          ? data.getTrainingModulesByProject.training_modules.filter(\r\n              (module) => !module.tm_is_current\r\n            ).length\r\n          : 0,\r\n      icon: <VscFileSubmodule />,\r\n      color: \"#25245D\",\r\n      path: \"/in/trainsession\",\r\n    },\r\n    {\r\n      name: \"total_participants\",\r\n      heading: \"Registered Farmers\",\r\n      figures: trainingGroups\r\n        .map((group) => group.total_participants)\r\n        .reduce((a, b) => a + b, 0)\r\n        .toLocaleString(),\r\n      icon: <BsPersonBoundingBox />,\r\n      color: \"#087C8F\",\r\n      path: \"/in/participants\",\r\n    },\r\n    {\r\n      name: \"total_fts\",\r\n      heading: \"Registered Households\",\r\n      figures: trainingGroups\r\n        .map((group) => group.total_households)\r\n        .reduce((a, b) => a + b, 0).toLocaleString(),\r\n      icon: <GiFarmer />,\r\n      color: \"#F46700\",\r\n    },\r\n    {\r\n      name: \"total_fts\",\r\n      heading: \"Trained Farmers\",\r\n      figures: \"N/A\",\r\n      icon: <GiFarmer />,\r\n      color: \"#F46700\",\r\n    },\r\n    {\r\n      name: \"total_bas\",\r\n      heading: \"Agronomy Advisors\",\r\n      figures: projectStats.total_bas,\r\n      icon: <FaTripadvisor />,\r\n      color: \"#F46700\",\r\n    },\r\n    {\r\n      name: \"total_fts\",\r\n      heading: \"Farmer Trainers\",\r\n      figures: projectStats.total_fts,\r\n      icon: <GiFarmer />,\r\n      color: \"#F46700\",\r\n    },\r\n  ], [trainingGroups, data, projectStats]);\r\n\r\n  const openList = (e, name) => {\r\n    e.preventDefault();\r\n    const listMap = {\r\n      total_bas: {\r\n        title: \"Business Advisors\",\r\n        list: [...new Set(trainingGroups.map((group) => group.business_advisor))],\r\n      },\r\n      total_fts: {\r\n        title: \"Farmer Trainers\",\r\n        list: [...new Set(trainingGroups.map((group) => group.farmer_trainer))],\r\n      },\r\n    };\r\n\r\n    if (listMap[name]) {\r\n      setOpen(true);\r\n      setTitle(listMap[name].title);\r\n      setList(listMap[name].list);\r\n    }\r\n  };\r\n\r\n  if (loading) return (\r\n    <LoadingScreen />\r\n  );\r\n  \r\n  if (error) return (\r\n    <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\r\n      <Typography color=\"error\">Error loading data</Typography>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <h1 className=\"module__heading\">Your Dashboard</h1>\r\n      <Grid container spacing={2}>\r\n        {statsData.map((data, index) => (\r\n          <Grid item key={index} xs={12} sm={6} md={3}>\r\n            <NavLink\r\n              to={data.path || '#'}\r\n              onClick={(e) => (!data.path ? openList(e, data.name) : null)}\r\n            >\r\n              <Card\r\n                heading={data.heading}\r\n                figures={data.figures}\r\n                icon={data.icon}\r\n                color={data.color}\r\n              />\r\n            </NavLink>\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n\r\n      <div style={{ marginTop: \"20px\" }}>\r\n        <h4>Project Modules Timeline</h4>\r\n        {modules.length > 0 ? (\r\n          <div style={{ width: \"100%\", height: \"500px\" }}>\r\n            <Chrono\r\n              items={modules}\r\n              mode=\"HORIZONTAL\"\r\n              allowDynamicUpdate\r\n              cardWidth={300}\r\n              cardHeight={150}\r\n              contentDetailsHeight={250}\r\n              activeItemIndex={modules.findIndex((m) => m.isCurrent) !== -1\r\n                ? modules.findIndex((m) => m.isCurrent)\r\n                : modules.length - 1}\r\n              focusActiveItemOnLoad\r\n              cardPositionHorizontal=\"TOP\"\r\n              theme={{\r\n                primary: \"#087C8F\",\r\n                secondary: \"#087C8F\",\r\n                cardBgColor: \"#fff\",\r\n                cardForeColor: \"#7D7F88\",\r\n                titleColor: \"#7D7F88\",\r\n                titleColorActive: \"#fff\",\r\n                subtitleColor: \"#fff\",\r\n              }}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <Typography variant=\"body1\" color=\"textSecondary\" align=\"center\">\r\n            No modules found\r\n          </Typography>\r\n        )}\r\n      </div>\r\n\r\n      <ListUpModal\r\n        open={open && trainingGroups.length > 0}\r\n        handleClose={() => setOpen(false)}\r\n        data={list}\r\n        title={title}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nDashboard.propTypes = {\r\n  trainingGroups: PropTypes.array.isRequired,\r\n  projectStats: PropTypes.object.isRequired,\r\n  selectedProject: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Dashboard;\r\n"],"names":["_jsxs","className","children","_jsx","CircularProgress","size","thickness","style","color","GET_TRAINING_MODULES_PER_PROJECT","gql","_templateObject","_taggedTemplateLiteral","_templateObject2","_ref","heading","figures","icon","backgroundColor","open","handleClose","title","data","Dialog","onClose","DialogTitle","DialogContent","List","map","item","index","ListItem","button","ListItemAvatar","Avatar","name","round","fgColor","ListItemText","primary","DialogActions","Button","onClick","trainingGroups","projectStats","selectedProject","_useState","useState","_useState2","_slicedToArray","setOpen","_useState3","_useState4","list","setList","_useState5","_useState6","setTitle","_useState7","_useState8","modules","setModules","_useQuery","useQuery","variables","projectId","loading","error","useEffect","_data$getTrainingModu","getTrainingModulesByProject","status","training_modules","t_module","tm_date","cardTitle","tm_is_current","concat","tm_title","cardSubtitle","tm_module_number","isCurrent","statsData","useMemo","_data$getTrainingModu2","_data$getTrainingModu3","length","MdGroups","path","VscFileSubmodule","filter","module","group","total_participants","reduce","a","b","toLocaleString","BsPersonBoundingBox","total_households","GiFarmer","total_bas","FaTripadvisor","total_fts","LoadingScreen","display","justifyContent","alignItems","height","Typography","Grid","container","spacing","xs","sm","md","NavLink","to","e","preventDefault","listMap","_toConsumableArray","Set","business_advisor","farmer_trainer","openList","Card","marginTop","width","Chrono","items","mode","allowDynamicUpdate","cardWidth","cardHeight","contentDetailsHeight","activeItemIndex","findIndex","m","focusActiveItemOnLoad","cardPositionHorizontal","theme","secondary","cardBgColor","cardForeColor","titleColor","titleColorActive","subtitleColor","variant","align","ListUpModal"],"sourceRoot":""}