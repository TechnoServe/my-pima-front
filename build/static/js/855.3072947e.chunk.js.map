{"version":3,"file":"static/js/855.3072947e.chunk.js","mappings":"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","sources":["features/tsdetail/sessionimage/Imagecontainer.js","utils/timezone.js","components/Table/Table.js","graphql/queries/farmVisitsRequests.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Dialog,\r\n  // Button,\r\n  DialogContent,\r\n  // DialogActions,\r\n  IconButton,\r\n  Typography,\r\n  Grid,\r\n  CircularProgress,\r\n} from \"@mui/material\";\r\nimport { MdClose, MdFullscreen, MdFullscreenExit } from \"react-icons/md\";\r\nimport { styled } from \"@mui/material/styles\";\r\n// import { useMutation, useQuery } from \"@apollo/client\";\r\n// import {\r\n//   GET_TRAINING_SESSIONS_PER_PROJECT,\r\n//   VALIDATE_TRAINING_SESSION,\r\n// } from \"../../../graphql/queries/trainingSessionsRequests\";\r\n// import { toast } from \"react-hot-toast\";\r\n// import { BeatLoader } from \"react-spinners\";\r\n\r\n// const StyledButton = styled(Button)(({ theme }) => ({\r\n//   marginBottom: \"10px\",\r\n//   marginRight: \"10px\",\r\n//   textTransform: \"initial\",\r\n//   backgroundColor: \"rgba(23, 177, 94, 1)\",\r\n//   color: \"#fff\",\r\n//   fontSize: \"12px\",\r\n\r\n//   \"&:hover\": {\r\n//     backgroundColor: \"rgba(23, 177, 94, 0.5)\",\r\n//     transition: \"background-color 0.3s ease-in-out\",\r\n//   },\r\n// }));\r\n\r\n// const StyledButton2 = styled(Button)(({ theme }) => ({\r\n//   marginBottom: \"10px\",\r\n//   marginRight: \"10px\",\r\n//   textTransform: \"initial\",\r\n//   fontSize: \"12px\",\r\n//   color: \"rgba(200, 27, 27, 1)\",\r\n//   borderColor: \"rgba(200, 27, 27, 1)\",\r\n\r\n//   \"&:hover\": {\r\n//     backgroundColor: \"rgba(235, 87, 87, 0.1)\",\r\n//     transition: \"background-color 0.3s ease-in-out\",\r\n//     borderColor: \"rgba(200, 27, 27, 1)\",\r\n//   },\r\n//   \".MuiButton-outlined\": {\r\n//     color: \"rgba(235, 87, 87, 1)\",\r\n//   },\r\n// }));\r\n\r\nconst LoadingOverlay = styled(\"div\")({\r\n  position: \"fixed\",\r\n  top: 0,\r\n  left: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n  backgroundColor: \"rgba(255, 255, 255, 0.7)\",\r\n  zIndex: 9999,\r\n  display: \"flex\",\r\n  alignItems: \"center\",\r\n  justifyContent: \"center\",\r\n});\r\n\r\nconst Imagecontainer = ({\r\n  open,\r\n  handleClose,\r\n  sessionImageUrl,\r\n  // id,\r\n  data,\r\n  // isVerified,\r\n  // imageStatus,\r\n  selectedProject,\r\n  loading,\r\n}) => {\r\n  console.log(data);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const [isLoading] = useState(false);\r\n  // const userDetails = JSON.parse(window.localStorage.getItem(\"myPimaUserData\"));\r\n\r\n  // const [validateSession] = useMutation(VALIDATE_TRAINING_SESSION);\r\n\r\n  // const trainingSessionsPerProject = useQuery(\r\n  //   GET_TRAINING_SESSIONS_PER_PROJECT,\r\n  //   {\r\n  //     variables: { sfProjectId: selectedProject },\r\n  //   }\r\n  // );\r\n\r\n  const toggleExpand = () => {\r\n    setIsExpanded((prev) => !prev);\r\n  };\r\n\r\n  // const handleSessionValidation = async (id, session_image_status) => {\r\n  //   setIsLoading(true);\r\n\r\n  //   try {\r\n  //     await validateSession({\r\n  //       variables: {\r\n  //         tsId: id,\r\n  //         status: session_image_status,\r\n  //       },\r\n  //     });\r\n\r\n  //     // refetch training sessions\r\n  //     trainingSessionsPerProject\r\n  //       .refetch()\r\n  //       .then(() => {\r\n  //         toast.success(\"Session validated successfully\");\r\n  //         setIsLoading(false);\r\n  //       })\r\n  //       .catch((error) => {\r\n  //         console.log(error);\r\n\r\n  //         toast.error(\"Error validating session\");\r\n  //       });\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n\r\n  //     toast.error(\"Error validating session\");\r\n\r\n  //     setIsLoading(false);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Dialog\r\n          open={open}\r\n          keepMounted\r\n          fullWidth\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n          <div style={{ margin: \"20px\" }}>\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              onClick={handleClose}\r\n              sx={{\r\n                position: \"absolute\",\r\n                right: 8,\r\n                top: 8,\r\n                color: \"#2b2b2b\",\r\n              }}\r\n            >\r\n              <MdClose />\r\n            </IconButton>\r\n          </div>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n              height: \"100%\",\r\n            }}\r\n          >\r\n            <CircularProgress />\r\n            <Typography variant=\"h6\" style={{ marginLeft: \"10px\" }}>\r\n              Loading Image...\r\n            </Typography>\r\n          </div>\r\n        </Dialog>\r\n      ) : (\r\n        <Dialog\r\n          open={open}\r\n          keepMounted\r\n          fullWidth\r\n          aria-describedby=\"alert-dialog-slide-description\"\r\n        >\r\n          {isLoading && (\r\n            <LoadingOverlay>\r\n              <CircularProgress />\r\n            </LoadingOverlay>\r\n          )}\r\n          <div style={{ margin: \"20px\" }}>\r\n            <IconButton\r\n              aria-label=\"close\"\r\n              onClick={handleClose}\r\n              sx={{\r\n                position: \"absolute\",\r\n                right: 8,\r\n                top: 8,\r\n                color: \"#2b2b2b\",\r\n              }}\r\n            >\r\n              <MdClose />\r\n            </IconButton>\r\n            <Typography variant=\"h6\">Session Image</Typography>\r\n          </div>\r\n\r\n          <DialogContent>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={6}>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Male Attendees:</strong> {data.total_males}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Female Attendees:</strong> {data.total_females}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Total Attendees:</strong>{\" \"}\r\n                  {data.total_males + data.total_females}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Session Date:</strong> {data.session_date}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Farmer Trainer:</strong> {data.farmer_trainer}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>Session Module:</strong> {data.ts_module}\r\n                </Typography>\r\n                <Typography variant=\"body1\">\r\n                  <strong>FFG:</strong> {data.ts_group}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <div style={{ position: \"relative\" }}>\r\n                  <img\r\n                    src={sessionImageUrl}\r\n                    alt=\"session_pic\"\r\n                    style={{\r\n                      width: \"100%\",\r\n                      height: \"auto\",\r\n                      cursor: isExpanded ? \"zoom-out\" : \"zoom-in\",\r\n                    }}\r\n                    onClick={toggleExpand}\r\n                  />\r\n                  {isExpanded ? (\r\n                    <IconButton\r\n                      aria-label=\"shrink\"\r\n                      onClick={toggleExpand}\r\n                      sx={{\r\n                        position: \"absolute\",\r\n                        bottom: 8,\r\n                        right: 8,\r\n                        color: \"#fff\",\r\n                      }}\r\n                    >\r\n                      <MdFullscreenExit />\r\n                    </IconButton>\r\n                  ) : (\r\n                    <IconButton\r\n                      aria-label=\"expand\"\r\n                      onClick={toggleExpand}\r\n                      sx={{\r\n                        position: \"absolute\",\r\n                        bottom: 8,\r\n                        right: 8,\r\n                        color: \"#fff\",\r\n                      }}\r\n                    >\r\n                      <MdFullscreen />\r\n                    </IconButton>\r\n                  )}\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n\r\n          {/* <DialogActions>\r\n            {(userDetails?.role === \"super_admin\" ||\r\n              userDetails?.role === \"ci_leadership\" ||\r\n              userDetails?.role === \"project_manager\" ||\r\n              userDetails?.role === \"mel_analyst\") &&\r\n              (!isVerified || imageStatus === \"not_verified\") && (\r\n                <>\r\n                  <StyledButton2 onClick={() => handleSessionValidation(id, \"invalid\")} variant=\"outlined\" disabled={isLoading}>\r\n                    {isLoading ? <BeatLoader size={8} color={\"#fff\"} loading={isLoading} /> : \"Invalid\"}\r\n                  </StyledButton2>\r\n                  <StyledButton2 onClick={() => handleSessionValidation(id, \"unclear\")} variant=\"outlined\" disabled={isLoading}>\r\n                    {isLoading ? <BeatLoader size={8} color={\"#fff\"} loading={isLoading} /> : \"Unclear\"}\r\n                  </StyledButton2>\r\n                  <StyledButton onClick={() => handleSessionValidation(id, \"approved\")} disabled={isLoading}>\r\n                    {isLoading ? <BeatLoader size={8} color={\"#fff\"} loading={isLoading} /> : \"Approve\"}\r\n                  </StyledButton>\r\n                </>\r\n              )}\r\n          </DialogActions> */}\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Imagecontainer;\r\n","const TimeZone = () => {\r\n  // Get the current date and time\r\n  const now = new Date();\r\n\r\n  // Get the user's timezone\r\n  const userTimezone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n\r\n  // Format the date and time according to the user's timezone\r\n  const formattedDate = now.toLocaleDateString(\"en-US\", {\r\n    year: \"numeric\",\r\n    month: \"2-digit\",\r\n    day: \"2-digit\",\r\n  });\r\n\r\n  const formattedTime = now.toLocaleTimeString(\"en-US\", {\r\n    hour: \"2-digit\",\r\n    minute: \"2-digit\",\r\n    second: \"2-digit\",\r\n    timeZone: userTimezone,\r\n  });\r\n\r\n  // Output the date and time\r\n  return `${formattedDate}_at_${formattedTime}`;\r\n};\r\n\r\nexport default TimeZone;\r\n","import { useState, useEffect } from \"react\";\r\nimport \"./table.css\";\r\n// import FilterContainer from \"../Filter/FilterContainer\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport { BiSearchAlt } from \"react-icons/bi\";\r\nimport { Button } from \"@mui/material\";\r\nimport { FaFileExport } from \"react-icons/fa\";\r\n// import { ExportToCsv, generateCsv } from \"export-to-csv\";\r\nimport { mkConfig, generateCsv, download } from \"export-to-csv\";\r\nimport { utils, writeFile } from \"xlsx\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport TimeZone from \"../../utils/timezone\";\r\nimport FVQAModal from \"../Modals/FVQAModal\";\r\nimport Imagecontainer from \"../../features/tsdetail/sessionimage/Imagecontainer\";\r\nimport { GET_TRAINING_SESSION_IMAGE } from \"../../graphql/queries/trainingSessionsRequests\";\r\n\r\nconst customStyles = {\r\n  rows: {\r\n    style: {\r\n      minHeight: \"30px\",\r\n      cursor: \"pointer\",\r\n    },\r\n  },\r\n  headCells: {\r\n    style: {\r\n      paddingLeft: \"8px\",\r\n      paddingRight: \"8px\",\r\n      backgroundColor: \"#1b2a4e\" /* Matching sidebar color */,\r\n      color: \"white\",\r\n    },\r\n  },\r\n  cells: {\r\n    style: {\r\n      paddingLeft: \"5px\",\r\n      paddingRight: \"5px\",\r\n      paddingTop: \"5px\",\r\n      paddingBottom: \"5px\",\r\n    },\r\n  },\r\n};\r\n\r\n// Export Buttons Component\r\nconst ExportButtons = ({\r\n  handleCSVExport,\r\n  handleExcelExport,\r\n  tableRowItem,\r\n}) => (\r\n  <div className=\"export-buttons\">\r\n    {tableRowItem !== \"trainsessionapprov\" && (\r\n      <Button\r\n        variant=\"outlined\"\r\n        sx={{ color: \"#1b2a4e\", borderColor: \"#1b2a4e\" }}\r\n        onClick={handleCSVExport}\r\n      >\r\n        <FaFileExport style={{ marginRight: \"5px\" }} /> CSV\r\n      </Button>\r\n    )}\r\n    <Button\r\n      variant=\"outlined\"\r\n      sx={{ color: \"#1b2a4e\", borderColor: \"#1b2a4e\" }}\r\n      onClick={handleExcelExport}\r\n    >\r\n      <FaFileExport style={{ marginRight: \"5px\" }} />\r\n      {tableRowItem !== \"trainsessionapprov\" ? \"Excel\" : \"Download Report\"}\r\n    </Button>\r\n  </div>\r\n);\r\n\r\nconst Table = ({\r\n  columns,\r\n  data,\r\n  filter,\r\n  setFilter,\r\n  setFilteredGroups,\r\n  setFilteredSessions,\r\n  tableRowItem,\r\n  allAttendances,\r\n  details,\r\n  selectedProject,\r\n}) => {\r\n  const pathName = tableRowItem || window.location.pathname.split(\"/\")[2];\r\n  const [rowDetails, setRowDetails] = useState({ ts_id: null });\r\n  const [open, setOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [session_image, setSession_image] = useState(null);\r\n  const [searchText, setSearchText] = useState(\"\");\r\n  const [filteredData, setFilteredData] = useState([]);\r\n  const [modalOpen, setModalOpen] = useState(false);\r\n  const [fvId, setFvId] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  const imageData = useQuery(GET_TRAINING_SESSION_IMAGE, {\r\n    variables: { tsId: rowDetails && rowDetails.ts_id ? rowDetails.ts_id : \"\" },\r\n    skip: !rowDetails,\r\n  });\r\n\r\n  // Restore original filename variable\r\n  const filename =\r\n    pathName === \"traingroup\"\r\n      ? \"mypima_training_group\"\r\n      : pathName === \"trainsession\"\r\n      ? \"mypima_training_session\"\r\n      : pathName === \"participants\"\r\n      ? \"Participants Data\"\r\n      : pathName === \"farmvisit\"\r\n      ? \"mypima_farm_visit\"\r\n      : \"mypima_attendance\";\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !imageData.loading &&\r\n      imageData.data?.trainingSessionImage?.status === 200\r\n    ) {\r\n      setLoading(false);\r\n      setSession_image(\r\n        imageData.data.trainingSessionImage.trainingSessionImage\r\n      );\r\n    }\r\n  }, [imageData]);\r\n\r\n  const handleOpenModal = () => {\r\n    setModalOpen(true);\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    setModalOpen(false);\r\n  };\r\n\r\n  const handleRowClick = (row) => {\r\n    setRowDetails(row);\r\n\r\n    const idMapping = {\r\n      trainsession: row.ts_id,\r\n      traingroup: row.tg_id,\r\n      participants: row.p_id,\r\n      farmvisit: row.fv_ids,\r\n      trainsessionapprov: row.ts_id,\r\n    };\r\n\r\n    const id = idMapping[tableRowItem] || row.attendance_id;\r\n\r\n    if (tableRowItem !== \"farmvisit\" && tableRowItem !== \"trainsessionapprov\") {\r\n      navigate(`/in/${tableRowItem}/${id}`);\r\n    } else if (tableRowItem === \"farmvisit\") {\r\n      setFvId(row.fv_id);\r\n      handleOpenModal();\r\n    } else if (tableRowItem === \"trainsessionapprov\") {\r\n      setOpen(true);\r\n      setLoading(true);\r\n    }\r\n  };\r\n\r\n  const handleSearch = (e) => {\r\n    const value = e.target.value.toLowerCase();\r\n    const filteredItems = data.filter((item) =>\r\n      columns.some((column) => {\r\n        const field = item[column.id];\r\n        return field?.toString().toLowerCase().includes(value);\r\n      })\r\n    );\r\n    setFilteredData(filteredItems);\r\n    setSearchText(e.target.value);\r\n  };\r\n\r\n  const handleCSVExport = () => {\r\n    if (!data || data.length === 0) {\r\n      alert(\"No data available for export.\");\r\n      return;\r\n    }\r\n\r\n    let updatedColumns = [...columns];\r\n\r\n    // Add new columns if pathName is \"farmvisit\"\r\n    if (pathName === \"farmvisit\") {\r\n      const newColumns = [\r\n        { id: \"household_tns_id\" },\r\n        { id: \"pima_farmer_id\" },\r\n        { id: \"pima_household_id\" },\r\n      ];\r\n      updatedColumns = [...updatedColumns, ...newColumns];\r\n    }\r\n\r\n    const partsHeaders = [\r\n      \"num\",\r\n      \"Project\",\r\n      \"first_name\",\r\n      \"middle_name\",\r\n      \"last_name\",\r\n      \"gender\",\r\n      \"age\",\r\n      \"coffee_tree_numbers\",\r\n      \"number_of_coffee_plots\",\r\n      \"phone_number\",\r\n      selectedProject === \"a0EOj000002FMGnMAO\" ||\r\n      selectedProject === \"a0EOj000002C7ivMAC\"\r\n        ? \"national_identification_id\"\r\n        : selectedProject === \"a0EOj000003E0knMAC\"\r\n        ? \"growers_number\"\r\n        : \"coop_membership_number\",\r\n      \"location\",\r\n      \"farmer_sf_id\",\r\n      \"tns_id\",\r\n      \"hh_number\",\r\n      \"sf_household_id\",\r\n      \"farmer_number\",\r\n      \"ffg_id\",\r\n      \"training_group\",\r\n      \"status\",\r\n      \"farmer_trainer\",\r\n      selectedProject === \"a0EOj000003E0knMAC\"\r\n        ? \"agronomy_advisor\"\r\n        : \"business_advisor\",\r\n      \"create_in_commcare\",\r\n    ];\r\n\r\n    if (tableRowItem === \"participants\") {\r\n      const monthlyAttendanceMap = new Map();\r\n      const filteredAttendances = allAttendances.filter((attendance) =>\r\n        data.some(\r\n          (participant) => participant.p_id === attendance.participant_id\r\n        )\r\n      );\r\n\r\n      filteredAttendances.forEach((attendance) => {\r\n        const {\r\n          attendance_status,\r\n          participant_id,\r\n          module_number,\r\n          module_name,\r\n          module_id,\r\n        } = attendance;\r\n\r\n        const key = `${module_number}-${module_name}-${module_id}`;\r\n\r\n        if (!monthlyAttendanceMap.has(key)) {\r\n          monthlyAttendanceMap.set(key, {});\r\n        }\r\n\r\n        const monthlyAttendance = monthlyAttendanceMap.get(key);\r\n        monthlyAttendance[participant_id] =\r\n          attendance_status === \"Present\" ? \"1\" : \"0\";\r\n      });\r\n\r\n      for (const [monthKey] of monthlyAttendanceMap) {\r\n        partsHeaders.push(monthKey);\r\n      }\r\n\r\n      const csvRows =\r\n        searchText.length > 0\r\n          ? filteredData.map((participant) => {\r\n              const rowData = { ...participant };\r\n              for (const [\r\n                monthKey,\r\n                monthlyAttendance,\r\n              ] of monthlyAttendanceMap) {\r\n                rowData[monthKey] = monthlyAttendance[participant.p_id] || \"\";\r\n              }\r\n              return rowData;\r\n            })\r\n          : data.map((participant) => {\r\n              const rowData = { ...participant };\r\n              for (const [\r\n                monthKey,\r\n                monthlyAttendance,\r\n              ] of monthlyAttendanceMap) {\r\n                rowData[monthKey] = monthlyAttendance[participant.p_id] || \"\";\r\n              }\r\n              return rowData;\r\n            });\r\n\r\n      data = csvRows;\r\n    }\r\n\r\n    // Remove unnecessary keys from the data\r\n    const sanitizedData = data.map(\r\n      ({ tg_id, ts_id, p_id, attendance_id, fv_id, __typename, ...rest }) =>\r\n        rest\r\n    );\r\n\r\n    // Step 1: Create the configuration for CSV\r\n    const config = mkConfig({\r\n      // fieldSeparator: \",\",\r\n      // quoteStrings: '\"',\r\n      // decimalSeparator: \".\",\r\n      // showLabels: true,\r\n      // useBom: true,\r\n      filename: filename,\r\n      columnHeaders: tableRowItem === \"participants\" ? partsHeaders : updatedColumns.map((column) => column.id)\r\n    });\r\n\r\n    // Step 2: Generate CSV string content\r\n    const csvContent = generateCsv(config)(sanitizedData);\r\n\r\n    if (!csvContent) {\r\n      console.error(\"Output is empty. Is your data formatted correctly?\");\r\n      return;\r\n    }\r\n\r\n    // Step 3: Trigger CSV file download\r\n    download(config)(csvContent);\r\n    console.log(\"Download successful\");\r\n\r\n    console.log(\"Config:\", config);\r\n    console.log(\"Data:\", data);\r\n    console.log(\"CSV Content:\", csvContent);\r\n  };\r\n\r\n  const handleExcelExport = () => {\r\n    const sheetName = \"Sessions Data\";\r\n    const summarySheetName = \"Summary by Trainer\";\r\n\r\n    const sessionsData = {\r\n      header: columns.map((column) => column.id),\r\n      body: data.map(\r\n        ({ tg_id, ts_id, p_id, attendance_id, fv_id, __typename, ...rest }) =>\r\n          Object.values(rest)\r\n      ),\r\n    };\r\n\r\n    const trainerSummary = data.reduce(\r\n      (acc, { farmer_trainer, session_image_status }) => {\r\n        const key = `${farmer_trainer}_${session_image_status}`;\r\n        if (!acc[key]) {\r\n          acc[key] = { farmer_trainer, session_image_status, count: 0 };\r\n        }\r\n        acc[key].count += 1;\r\n        return acc;\r\n      },\r\n      {}\r\n    );\r\n\r\n    const summaryData = Object.values(trainerSummary);\r\n\r\n    const trainerSummaryData = {\r\n      header: [\"farmer_trainer\", \"session_image_status\", \"count\"],\r\n      body: summaryData.map((data) => Object.values(data)),\r\n    };\r\n\r\n    const workbook = utils.book_new();\r\n    const sessionsWorksheet = utils.json_to_sheet(\r\n      [sessionsData.header, ...sessionsData.body],\r\n      { skipHeader: true }\r\n    );\r\n    const summaryWorksheet = utils.json_to_sheet(\r\n      [trainerSummaryData.header, ...trainerSummaryData.body],\r\n      { skipHeader: true }\r\n    );\r\n\r\n    utils.book_append_sheet(workbook, summaryWorksheet, summarySheetName);\r\n    utils.book_append_sheet(workbook, sessionsWorksheet, sheetName);\r\n\r\n    writeFile(workbook, `${filename}_${TimeZone()}.xlsx`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={`table-header-actions ${!filter ? \"no-filter\" : \"\"}`}>\r\n        {/* Filter Button (if filter exists) */}\r\n        {filter && <Button className=\"filter-button\">Filter</Button>}\r\n\r\n        {/* Search and Export Buttons */}\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <div className=\"search-container\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search...\"\r\n              value={searchText}\r\n              onChange={handleSearch}\r\n            />\r\n            <span className=\"search-icon\">\r\n              <BiSearchAlt />\r\n            </span>\r\n          </div>\r\n\r\n          {/* Export Buttons */}\r\n          <ExportButtons\r\n            handleCSVExport={handleCSVExport}\r\n            handleExcelExport={handleExcelExport}\r\n            tableRowItem={tableRowItem}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <DataTable\r\n        columns={columns}\r\n        data={searchText.length > 0 ? filteredData : data}\r\n        onRowClicked={handleRowClick}\r\n        pagination\r\n        highlightOnHover\r\n        customStyles={customStyles}\r\n        className=\"table-container\"\r\n      />\r\n\r\n      {/* TODO: REIMPLEMENT THIS */}\r\n      {/* <FVQAModal\r\n        open={modalOpen}\r\n        handleClose={handleCloseModal}\r\n        fvId={fvId}\r\n        details={details}\r\n        rowDetails={rowDetails}\r\n      /> */}\r\n\r\n      {open && (\r\n        <Imagecontainer\r\n          open={open}\r\n          handleClose={() => setOpen(false)}\r\n          id={rowDetails.ts_id}\r\n          data={rowDetails}\r\n          isVerified={rowDetails.is_verified}\r\n          imageStatus={rowDetails.session_image_status}\r\n          sessionImageUrl={session_image}\r\n          selectedProject={selectedProject}\r\n          loading={loading}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst GET_FARM_VISITS_PER_PROJECT = gql`\r\n  query GetFarmVisitsByProject($projectId: String!) {\r\n    getFarmVisitsByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        training_group\r\n        farmer_tns_id\r\n        household_tns_id\r\n        farm_visited\r\n        farmer_trainer\r\n        date_visited\r\n        pima_household_id\r\n        pima_farmer_id\r\n        gender\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_TG = gql`\r\n  query GetFarmVisitsByGroup($tgId: String!) {\r\n    getFarmVisitsByGroup(tg_id: $tgId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_TS = gql`\r\n  query GetFarmVisitsBySession($tsId: String!) {\r\n    getFarmVisitsBySession(ts_id: $tsId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_PART = gql`\r\n  query GetFarmVisitsByParticipant($partId: String!) {\r\n    getFarmVisitsByParticipant(part_id: $partId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        farmer_tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISIT_QAs = gql`\r\n  query GetFVQAsByFarmVisits($fvId: String!) {\r\n    getFVQAsByFarmVisits(fv_id: $fvId) {\r\n      message\r\n      status\r\n      fvQAs {\r\n        bp_id\r\n        fv_id\r\n        qas {\r\n          practice_name_id\r\n          practice_name\r\n          questions\r\n          answers\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_QA_IMAGE = gql`\r\n  mutation UpdateFVQAImageStatus(\r\n    $bpId: String!\r\n    $fieldName: FieldNames!\r\n    $imageStatus: Status!\r\n  ) {\r\n    updateFVQAImageStatus(\r\n      bp_id: $bpId\r\n      field_name: $fieldName\r\n      image_status: $imageStatus\r\n    ) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FVQAS_BY_PROJECT_FOR_REVIEW = gql`\r\n  query getFVQAsByProjectForReview(\r\n    $projectId: String!\r\n    $limit: Int!\r\n    $offset: Int!\r\n  ) {\r\n    getFVQAsByProjectForReview(\r\n      project_id: $projectId\r\n      limit: $limit\r\n      offset: $offset\r\n    ) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n        status\r\n        qas {\r\n          practice_name_id\r\n          practice_name\r\n          questions\r\n          answers\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FVQAS_BY_PROJECT_IN_EXCEL = gql`\r\n  query getFVQAsByProjectInExcel($projectId: String!, $practiceName: String!) {\r\n    getFVQAsByProjectInExcel(\r\n      project_id: $projectId\r\n      practice_name: $practiceName\r\n    ) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_OVERALL_REPORT = gql`\r\n  query getFVQAsByProjectInExcel($projectId: String!, $practiceName: String!) {\r\n    getFVQAsByProjectInExcel(\r\n      project_id: $projectId\r\n      practice_name: $practiceName\r\n    ) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPLOAD_APPROVED_FV = gql`\r\n  mutation UploadParticipants($partsFile: Upload!) {\r\n    uploadParticipants(parts_file: $partsFile) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_SAMPLED_VISITS_STATS = gql`\r\n  query GetSampledVisitsStats($projectId: String!) {\r\n    getSampledVisitsStats(projectId: $projectId) {\r\n      totalSampledVisits\r\n      totalReviewed\r\n      remainingVisits\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_BEST_PRACTICE_STATS = gql`\r\n  query GetBestPracticeStats($projectId: String!, $practiceName: String!) {\r\n    getBestPracticeReviewStats(\r\n      projectId: $projectId\r\n      practiceName: $practiceName\r\n    ) {\r\n      reviewedVisits\r\n      remainingVisits\r\n      totalVisits\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PAGINATED_REVIEWS = gql`\r\n  query GetPaginatedReviews(\r\n    $projectId: String!\r\n    $practiceName: String!\r\n    $page: Int!\r\n    $pageSize: Int!\r\n  ) {\r\n    getPaginatedReviews(\r\n      projectId: $projectId\r\n      practiceName: $practiceName\r\n      page: $page\r\n      pageSize: $pageSize\r\n    ) {\r\n      visit_id\r\n      sf_visit_id\r\n      farmer_name\r\n      farmer_pima_id\r\n      farmer_tns_id\r\n      date_visited\r\n      farmer_trainer\r\n      BestPractices {\r\n        practice_id\r\n        practice_name\r\n        image_url\r\n        sf_practice_id\r\n        question\r\n        answer\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GENERATE_FARM_VISIT_REPORT = gql`\r\n  query GenerateFarmVisitReport($projectId: String!) {\r\n    generateFarmVisitReport(projectId: $projectId) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst SUBMIT_BATCH_APPROVED_VISITS = gql`\r\n  mutation SubmitBatch($input: [BatchInput!]!) {\r\n    submitBatch(input: $input) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nconst SUBMIT_BATCH = gql`\r\n  mutation SubmitBatch($input: [BatchInput!]!) {\r\n    submitBatch(input: $input) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  GET_FARM_VISITS_PER_PROJECT,\r\n  GET_FARM_VISITS_PER_TG,\r\n  GET_FARM_VISITS_PER_TS,\r\n  GET_FARM_VISITS_PER_PART,\r\n  GET_FARM_VISIT_QAs,\r\n  GET_FVQAS_BY_PROJECT_FOR_REVIEW,\r\n  GET_FVQAS_BY_PROJECT_IN_EXCEL,\r\n  GET_OVERALL_REPORT,\r\n  GET_PAGINATED_REVIEWS,\r\n  GET_BEST_PRACTICE_STATS,\r\n  GET_SAMPLED_VISITS_STATS,\r\n  GENERATE_FARM_VISIT_REPORT,\r\n  SUBMIT_BATCH_APPROVED_VISITS,\r\n  SUBMIT_BATCH,\r\n  UPLOAD_APPROVED_FV,\r\n  UPDATE_QA_IMAGE,\r\n};\r\n"],"names":["LoadingOverlay","styled","position","top","left","right","bottom","backgroundColor","zIndex","display","alignItems","justifyContent","_ref","open","handleClose","sessionImageUrl","data","selectedProject","loading","console","log","isExpanded","setIsExpanded","useState","isLoading","toggleExpand","prev","_jsx","_Fragment","children","_jsxs","Dialog","keepMounted","fullWidth","style","margin","IconButton","onClick","sx","color","MdClose","height","CircularProgress","Typography","variant","marginLeft","DialogContent","Grid","container","spacing","item","xs","sm","total_males","total_females","session_date","farmer_trainer","ts_module","ts_group","src","alt","width","cursor","MdFullscreenExit","MdFullscreen","TimeZone","now","Date","userTimezone","Intl","DateTimeFormat","resolvedOptions","timeZone","toLocaleDateString","year","month","day","toLocaleTimeString","hour","minute","second","customStyles","rows","minHeight","headCells","paddingLeft","paddingRight","cells","paddingTop","paddingBottom","ExportButtons","handleCSVExport","handleExcelExport","tableRowItem","className","Button","borderColor","FaFileExport","marginRight","_ref2","columns","filter","setFilter","setFilteredGroups","setFilteredSessions","allAttendances","details","pathName","window","location","pathname","split","rowDetails","setRowDetails","ts_id","setOpen","setLoading","session_image","setSession_image","searchText","setSearchText","filteredData","setFilteredData","modalOpen","setModalOpen","fvId","setFvId","navigate","useNavigate","imageData","useQuery","GET_TRAINING_SESSION_IMAGE","variables","tsId","skip","filename","useEffect","_imageData$data","_imageData$data$train","trainingSessionImage","status","type","placeholder","value","onChange","e","target","toLowerCase","filteredItems","some","column","field","id","toString","includes","BiSearchAlt","length","alert","updatedColumns","newColumns","partsHeaders","monthlyAttendanceMap","Map","attendance","participant","p_id","participant_id","forEach","attendance_status","module_number","module_name","module_id","key","has","set","get","monthKey","push","csvRows","map","rowData","monthlyAttendance","sanitizedData","_ref3","tg_id","attendance_id","fv_id","__typename","rest","config","mkConfig","columnHeaders","csvContent","generateCsv","download","error","sessionsData","header","body","_ref4","Object","values","trainerSummary","reduce","acc","_ref5","session_image_status","count","trainerSummaryData","workbook","utils","book_new","sessionsWorksheet","json_to_sheet","skipHeader","summaryWorksheet","book_append_sheet","writeFile","DataTable","onRowClicked","row","trainsession","traingroup","participants","farmvisit","fv_ids","trainsessionapprov","pagination","highlightOnHover","Imagecontainer","isVerified","is_verified","imageStatus","GET_FARM_VISITS_PER_PROJECT","gql","GET_FARM_VISITS_PER_TG","GET_FARM_VISITS_PER_PART","GET_SAMPLED_VISITS_STATS","GET_BEST_PRACTICE_STATS","GET_PAGINATED_REVIEWS","GENERATE_FARM_VISIT_REPORT","SUBMIT_BATCH"],"sourceRoot":""}