{"version":3,"file":"static/js/862.a56237ac.chunk.js","mappings":"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","sources":["components/Modals/UploadParticipantsModal.js","graphql/queries/attendancesRequests.js","pages/Participants.js","graphql/queries/participantsRequests.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  Typography,\r\n  Button,\r\n  Box,\r\n  DialogActions,\r\n  Chip,\r\n  Alert,\r\n} from \"@mui/material\";\r\nimport { FileUploader } from \"react-drag-drop-files\";\r\nimport { FaCloudUploadAlt } from \"react-icons/fa\";\r\nimport { AiOutlineCloseCircle } from \"react-icons/ai\";\r\nimport { BiErrorAlt } from \"react-icons/bi\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { saveAs } from \"file-saver\";\r\nimport {\r\n  GET_PARTICIPANTS_PER_PROJECT,\r\n  UPLOAD_PARTICIPANTS,\r\n} from \"../../graphql/queries/participantsRequests\";\r\n\r\nconst requiredColumns = [\r\n  \"Project\",\r\n  \"first_name\",\r\n  \"last_name\",\r\n  \"gender\",\r\n  \"age\",\r\n  \"coffee_tree_numbers\",\r\n  \"farmer_sf_id\",\r\n  \"tns_id\",\r\n  \"hh_number\",\r\n  \"sf_household_id\",\r\n  \"farmer_number\",\r\n  \"ffg_id\",\r\n  \"training_group\",\r\n  \"status\",\r\n];\r\n\r\nconst UploadParticipantsModal = ({\r\n  open,\r\n  setOpen,\r\n  navigatedProject,\r\n  sfProjectId,\r\n}) => {\r\n  const [fileInfo, setFileInfo] = useState(null);\r\n  const [file, setFile] = useState(null);\r\n  const [loadedColumns, setLoadedColumns] = useState([]);\r\n  const [distinctProjects, setDistinctProjects] = useState([]);\r\n  const [uploadResult, setUploadResult] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n\r\n  const [uploadParticipants] = useMutation(UPLOAD_PARTICIPANTS);\r\n  const participantsPerProject = useQuery(GET_PARTICIPANTS_PER_PROJECT, {\r\n    variables: { projectId: sfProjectId },\r\n  });\r\n\r\n  const handleChange = (file) => {\r\n    setFile(file);\r\n    setUploadResult(null);\r\n    parseFile(file);\r\n  };\r\n\r\n  const parseFile = (file) => {\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      const loadedData = e.target.result.split(/\\r\\n|\\n/);\r\n      const modifiedData = loadedData.map((row) =>\r\n        row.split(\",\").map((cell) => cell.replace(/^\"(.*)\"$/, \"$1\"))\r\n      );\r\n      setFileInfo({\r\n        filename: file.name,\r\n        size: file.size,\r\n        type: file.type,\r\n        data: modifiedData.length > 0 ? modifiedData : loadedData,\r\n      });\r\n      setLoadedColumns(modifiedData[0]);\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!fileInfo) return;\r\n    if (fileInfo.data && fileInfo.data.length < 2) return;\r\n    extractDistinctProjects(fileInfo);\r\n  }, [fileInfo, loadedColumns]);\r\n\r\n  const extractDistinctProjects = (fileInfo) => {\r\n    const projectColumn = fileInfo.data\r\n      .map((row) => row[loadedColumns.indexOf(\"Project\")])\r\n      .filter((project) => project);\r\n    setDistinctProjects([...new Set(projectColumn)]);\r\n  };\r\n\r\n  const handleClose = (e, reason) => {\r\n    if (reason === \"backdropClick\" || reason === \"escapeKeyDown\") return;\r\n    resetState();\r\n  };\r\n\r\n  const resetState = () => {\r\n    setFileInfo(null);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (isProcessing) return;\r\n    setIsProcessing(true);\r\n    setUploadResult(null);\r\n    const newFile = createProjectSpecificFile(\r\n      fileInfo,\r\n      loadedColumns,\r\n      navigatedProject\r\n    );\r\n    await uploadFile(newFile);\r\n  };\r\n\r\n  const createProjectSpecificFile = (fileInfo, loadedColumns, project) => {\r\n    const projectIndex = loadedColumns.indexOf(\"Project\");\r\n    const projectData = fileInfo.data.filter(\r\n      (row) => row[projectIndex] === project\r\n    );\r\n    const projectDataString = `${loadedColumns.join(\",\")}\\n${projectData.join(\r\n      \"\\n\"\r\n    )}`;\r\n    return new File([projectDataString], fileInfo.filename, {\r\n      type: \"text/csv\",\r\n    });\r\n  };\r\n\r\n  const uploadFile = async (file) => {\r\n    try {\r\n      const res = await uploadParticipants({ variables: { partsFile: file } });\r\n      await participantsPerProject.refetch();\r\n      setUploadResult(res.data.uploadParticipants);\r\n      if (res.data.uploadParticipants.status === 200) {\r\n        setTimeout(() => {\r\n          window.location.reload();\r\n        }, 5000);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      setUploadResult({\r\n        status: 500,\r\n        message: \"Something went wrong. Please try again.\",\r\n      });\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadErrors = () => {\r\n    const { file, message } = uploadResult;\r\n    if (file) {\r\n      const byteCharacters = atob(file);\r\n      const byteNumbers = new Array(byteCharacters.length).fill().map((_, i) => byteCharacters.charCodeAt(i));\r\n      const byteArray = new Uint8Array(byteNumbers);\r\n      const blob = new Blob([byteArray], { type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" });\r\n      saveAs(blob, \"error_file.xlsx\");\r\n    } else {\r\n      console.error(\"No file found in the upload result.\");\r\n    }\r\n  };\r\n\r\n  const renderFileDetails = () => (\r\n    <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n      <Typography variant=\"body2\">\r\n        <strong>Name:</strong> {fileInfo.filename}\r\n      </Typography>\r\n      <Typography variant=\"body2\">\r\n        <strong>Size:</strong> {formatFileSize(fileInfo.size)}\r\n      </Typography>\r\n      <Typography variant=\"body2\">\r\n        <strong>Type:</strong> {fileInfo.type}\r\n      </Typography>\r\n      <Typography variant=\"body2\">\r\n        <strong>Total Records:</strong> {formatNumberWithCommas(fileInfo.data.length - 2)}\r\n      </Typography>\r\n      {distinctProjects.length > 1 && (\r\n        <Typography variant=\"body4\" sx={{ marginBottom: \"10px\" }}>\r\n          Only records for <strong>{navigatedProject} ({fileInfo.data.filter((row) => row[loadedColumns.indexOf(\"Project\")] === navigatedProject).length} records)</strong> will be processed from this file.\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n\r\n  const formatFileSize = (size) => (\r\n    size > 1000000 ? `${(size / 1000000).toFixed(2)} MB` : `${(size / 1000).toFixed(2)} KB`\r\n  );\r\n\r\n  const formatNumberWithCommas = (number) => (\r\n    number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\r\n  );\r\n\r\n  const renderRequiredColumnsAlert = () => (\r\n    <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n      <Typography variant=\"body1\">\r\n        <BiErrorAlt style={{ fontSize: \"2rem\", color: \"#B90101\" }} /> File must contain all required columns:\r\n      </Typography>\r\n      <Typography variant=\"body2\" sx={{ display: \"flex\", alignItems: \"center\", flexWrap: \"wrap\" }}>\r\n        {requiredColumns.filter((column) => !loadedColumns.includes(column)).map((column, index) => (\r\n          <Chip key={index} label={column} sx={{ margin: \"5px 0.5rem\" }} color=\"primary\" variant=\"outlined\" />\r\n        ))}\r\n      </Typography>\r\n      <div className=\"upload_actions\">\r\n        <AiOutlineCloseCircle onClick={() => setFileInfo(null)} className=\"back__icon\" title=\"Back to Upload New File\" />\r\n      </div>\r\n    </Box>\r\n  );\r\n\r\n  const renderEmptyFileAlert = () => (\r\n    <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n      <Typography variant=\"body1\" sx={{ fontStyle: \"italic\" }}>\r\n        <BiErrorAlt style={{ fontSize: \"1.5rem\", color: \"#B90101\" }} /> There are no records in the file. Please upload a file with data.\r\n      </Typography>\r\n      <div className=\"upload_actions\">\r\n        <AiOutlineCloseCircle onClick={() => setFileInfo(null)} className=\"back__icon\" title=\"Back to Upload New File\" />\r\n      </div>\r\n    </Box>\r\n  );\r\n\r\n  const renderProjectMismatchAlert = () => (\r\n    <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\r\n      <Typography variant=\"body1\" sx={{ fontStyle: \"italic\" }}>\r\n        <BiErrorAlt style={{ fontSize: \"3rem\", color: \"#B90101\" }} /> The project(s) in the file does not match the project you are currently navigating. Please upload a file with the correct project.\r\n      </Typography>\r\n      <div className=\"upload_actions\">\r\n        <AiOutlineCloseCircle onClick={() => setFileInfo(null)} className=\"back__icon\" title=\"Back to Upload New File\" />\r\n      </div>\r\n    </Box>\r\n  );\r\n\r\n  const renderProcessingState = () => (\r\n    <Typography variant=\"body2\" sx={{ marginBottom: \"10px\", width: \"100%\", textAlign: \"center\" }}>\r\n      <em style={{ fontWeight: \"bold\", color: \"#6C757D\" }}>Data are being processed, wait...</em>\r\n    </Typography>\r\n  );\r\n\r\n  const renderUploadResult = () => (\r\n    <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }} className=\"file-info\">\r\n      <Typography variant=\"body2\">\r\n        <Alert severity={uploadResult.status === 200 ? \"success\" : \"error\"}>{uploadResult.message}</Alert>\r\n      </Typography>\r\n      {uploadResult.status !== 200 && uploadResult.file && (\r\n        <Button onClick={handleDownloadErrors} variant=\"contained\" color=\"primary\">\r\n          Download Error File\r\n        </Button>\r\n      )}\r\n    </Box>\r\n  );\r\n\r\n  return (\r\n    <Dialog open={open} onClose={handleClose}>\r\n      <DialogContent>\r\n        {!fileInfo ? (\r\n          <FileUploader label={\"Drag and drop or browse a file to upload. File must be: \"} handleChange={handleChange} name=\"file\" types={[\"csv\"]} />\r\n        ) : uploadResult ? (\r\n          renderUploadResult()\r\n        ) : loadedColumns.filter((column) => requiredColumns.includes(column)).length !== requiredColumns.length ? (\r\n          renderRequiredColumnsAlert()\r\n        ) : fileInfo.data.length - 2 < 1 ? (\r\n          renderEmptyFileAlert()\r\n        ) : !distinctProjects.includes(navigatedProject) ? (\r\n          renderProjectMismatchAlert()\r\n        ) : (\r\n          <Box sx={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }} className=\"file-info\">\r\n            {renderFileDetails()}\r\n            <div className=\"upload_actions\">\r\n              {isProcessing ? renderProcessingState() : (\r\n                <>\r\n                  <AiOutlineCloseCircle onClick={() => setFileInfo(null)} className=\"back__icon\" title=\"Back to Upload New File\" />\r\n                  <FaCloudUploadAlt title=\"Proceed Records Processing\" className=\"upload__icon\" onClick={handleUpload} />\r\n                </>\r\n              )}\r\n            </div>\r\n          </Box>\r\n        )}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClose} disabled={isProcessing}>Cancel</Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default UploadParticipantsModal;\r\n","import { gql } from \"@apollo/client\";\r\n\r\n// const GET_ALL_ATTENDANCES = gql`\r\n//   query GetAttendances($projectId: String!) {\r\n//     getAttendances(project_id: $projectId) {\r\n//       message\r\n//       status\r\n//       attendance {\r\n//         attendance_id\r\n//         participant_id\r\n//         attendance_name\r\n//         attendance_date\r\n//         attendance_status\r\n//         session_id\r\n//         module_name\r\n//         module_number\r\n//         module_id\r\n//       }\r\n//     }\r\n//   }\r\n// `;\r\n\r\nconst GET_ALL_ATTENDANCES = gql`\r\n  query GetAttendances($projectId: String!, $limit: Int, $offset: Int) {\r\n    getAttendances(project_id: $projectId, limit: $limit, offset: $offset) {\r\n      message\r\n      status\r\n      attendance {\r\n        attendance_id\r\n        participant_id\r\n        attendance_status\r\n        module_name\r\n        module_number\r\n        module_id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { GET_ALL_ATTENDANCES };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Chip } from \"@mui/material\";\r\nimport Table from \"../components/Table/Table\";\r\nimport { FaCloudUploadAlt } from \"react-icons/fa\";\r\nimport UploadParticipantsModal from \"../components/Modals/UploadParticipantsModal\";\r\nimport {\r\n  GET_PARTICIPANTS_PER_PROJECT,\r\n  SYNC_PARTICIPANTS_WITH_COMMCARE,\r\n} from \"../graphql/queries/participantsRequests\";\r\nimport { GET_ALL_ATTENDANCES } from \"../graphql/queries/attendancesRequests\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { BeatLoader } from \"react-spinners\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nconst Participants = ({ selectedProject, trainingGroups, projects }) => {\r\n  const [open, setOpen] = useState(false);\r\n  const [sendToCcCount, setSendToCcCount] = useState();\r\n  const [isSyncing, setIsSyncing] = useState(false);\r\n\r\n  const {\r\n    data: participantData,\r\n    loading: participantsLoading,\r\n    error: participantsError,\r\n    refetch: refetchParticipants,\r\n  } = useQuery(GET_PARTICIPANTS_PER_PROJECT, {\r\n    variables: { projectId: selectedProject },\r\n    skip: !selectedProject,\r\n  });\r\n\r\n  const [allAttendances, setAllAttendances] = useState([]);\r\n  const [attendanceLoading, setAttendanceLoading] = useState(true);\r\n  const [attendanceError, setAttendanceError] = useState(null);\r\n\r\n  const { fetchMore } = useQuery(GET_ALL_ATTENDANCES, {\r\n    variables: {\r\n      projectId: selectedProject,\r\n      limit: 5000,\r\n      offset: 0,\r\n    },\r\n    skip: !selectedProject,\r\n    notifyOnNetworkStatusChange: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const fetchAllAttendancesParallel = async () => {\r\n      if (!selectedProject) return;\r\n\r\n      try {\r\n        setAttendanceLoading(true);\r\n        setAttendanceError(null);\r\n\r\n        const limit = 5000;\r\n        let offset = 0;\r\n        let allChunks = [];\r\n\r\n        // First request\r\n        const { data: initialData } = await fetchMore({\r\n          variables: { projectId: selectedProject, limit, offset },\r\n        });\r\n\r\n        const initialChunk = initialData?.getAttendances?.attendance || [];\r\n        allChunks = [...initialChunk];\r\n\r\n        if (initialChunk.length < limit) {\r\n          setAllAttendances(allChunks);\r\n          return setAttendanceLoading(false);\r\n        }\r\n\r\n        offset += limit;\r\n\r\n        // Now fetch sequentially in batches (e.g. 3 at a time)\r\n        const maxParallel = 10;\r\n        let keepGoing = true;\r\n\r\n        while (keepGoing) {\r\n          const promises = [];\r\n\r\n          for (let i = 0; i < maxParallel; i++) {\r\n            const currentOffset = offset + i * limit;\r\n\r\n            const p = fetchMore({\r\n              variables: {\r\n                projectId: selectedProject,\r\n                limit,\r\n                offset: currentOffset,\r\n              },\r\n            }).then((res) => {\r\n              const chunk = res?.data?.getAttendances?.attendance || [];\r\n              return { chunk, currentOffset };\r\n            });\r\n\r\n            promises.push(p);\r\n          }\r\n\r\n          const results = await Promise.all(promises);\r\n\r\n          for (let res of results) {\r\n            if (res.chunk.length > 0) {\r\n              allChunks = [...allChunks, ...res.chunk];\r\n            }\r\n\r\n            if (res.chunk.length < limit) {\r\n              keepGoing = false;\r\n            }\r\n          }\r\n\r\n          offset += maxParallel * limit;\r\n        }\r\n\r\n        setAllAttendances(allChunks);\r\n      } catch (err) {\r\n        console.error(\"Parallel attendance fetch error:\", err);\r\n        setAttendanceError(err);\r\n      } finally {\r\n        setAttendanceLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchAllAttendancesParallel();\r\n  }, [selectedProject, fetchMore]);\r\n\r\n  // const {\r\n  //   data: attendanceData,\r\n  //   loading: attendanceLoading,\r\n  //   error: attendanceError,\r\n  // } = useQuery(GET_ALL_ATTENDANCES, {\r\n  //   variables: { projectId: selectedProject },\r\n  //   skip: !selectedProject,\r\n  // });\r\n\r\n  const [SyncParticipants] = useMutation(SYNC_PARTICIPANTS_WITH_COMMCARE);\r\n\r\n  const userDetails = JSON.parse(window.localStorage.getItem(\"myPimaUserData\"));\r\n\r\n  useEffect(() => {\r\n    if (\r\n      participantData &&\r\n      participantData.getParticipantsByProject.status === 200\r\n    ) {\r\n      const sendToCcCount =\r\n        participantData.getParticipantsByProject.participants.filter(\r\n          (participant) => participant.create_in_commcare === \"false\"\r\n        );\r\n      setSendToCcCount(sendToCcCount.length);\r\n    }\r\n  }, [participantData]);\r\n\r\n  const handleTakeAction = async () => {\r\n    setIsSyncing(true);\r\n\r\n    try {\r\n      await SyncParticipants({\r\n        variables: {\r\n          projectId: selectedProject,\r\n        },\r\n      });\r\n      await refetchParticipants(); // Refetch the participants data after syncing\r\n      setIsSyncing(false);\r\n    } catch (err) {\r\n      console.log(err);\r\n      setIsSyncing(false);\r\n    }\r\n  };\r\n\r\n  if (participantsLoading || attendanceLoading) {\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <BeatLoader color=\"#0D3C61\" size={15} />\r\n        <em style={{ color: \"#0D3C61\" }}>\r\n          Loading Participants and Attendances...\r\n        </em>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  if (participantsError || attendanceError) {\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <em style={{ color: \"red\" }}>\r\n          Error loading data:{\" \"}\r\n          {participantsError?.message || attendanceError?.message}\r\n        </em>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  const participants = participantData.getParticipantsByProject.participants;\r\n  // const allAttendances = attendanceData.getAttendances.attendance;\r\n\r\n  const columns = [\r\n    { id: \"num\", name: \"No.\", selector: (row) => row.num, sortable: true },\r\n    {\r\n      id: \"full_name\",\r\n      name: \"Full Name\",\r\n      selector: (row) => row.first_name + \" \" + row.last_name,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"gender\",\r\n      name: \"Gender\",\r\n      selector: (row) => (row.gender === \"m\" ? \"Male\" : \"Female\"),\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"location\",\r\n      name: \"Location\",\r\n      selector: (row) => row.location,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"tns_id\",\r\n      name: \"TNS ID\",\r\n      selector: (row) => row.tns_id,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"training_group\",\r\n      name: \"Training Group\",\r\n      selector: (row) => row.training_group,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"household_id\",\r\n      name: \"HH Number\",\r\n      selector: (row) => row.hh_number,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"primary_household_member\",\r\n      name: \"Primary HouseHold Member\",\r\n      selector: (row) => (\r\n        <div>\r\n          {row.farmer_number === \"1\" ? (\r\n            <Chip label={\"1\"} color=\"success\" variant=\"outlined\" />\r\n          ) : (\r\n            <Chip label={\"2\"} color=\"error\" variant=\"outlined\" />\r\n          )}\r\n        </div>\r\n      ),\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"farmer_trainer\",\r\n      name: \"Farmer Trainer\",\r\n      selector: (row) => row.farmer_trainer,\r\n      sortable: true,\r\n    },\r\n    {\r\n      id: \"business_advisor\",\r\n      name: \"Business Advisor\",\r\n      selector: (row) => row.business_advisor,\r\n      sortable: true,\r\n    },\r\n  ];\r\n  const tableRowItem = \"participants\";\r\n\r\n  const rows = participants.map((participant, index) => {\r\n    const row = {\r\n      num: index + 1,\r\n      Project: projects.find(\r\n        (project) => project.sf_project_id === selectedProject\r\n      ).project_name,\r\n      p_id: participant.p_id,\r\n      first_name: participant.first_name,\r\n      middle_name: participant.middle_name ? participant.middle_name : \"\",\r\n      last_name: participant.last_name ? participant.last_name : \"\",\r\n      gender: participant.gender,\r\n      age: participant.age,\r\n      coffee_tree_numbers: participant.coffee_tree_numbers,\r\n      phone_number: participant.phone_number,\r\n      farmer_sf_id: participant.p_id,\r\n      hh_number: participant.hh_number,\r\n      sf_household_id: participant.household_id,\r\n      ffg_id: participant.ffg_id,\r\n      location: participant.location,\r\n      tns_id: participant.tns_id,\r\n      training_group:\r\n        trainingGroups && trainingGroups.length > 0\r\n          ? trainingGroups.find((tg) => tg.tg_id === participant.training_group)\r\n              ?.tg_name || \"N/A\"\r\n          : \"N/A\",\r\n      farmer_number: participant.primary_household_member,\r\n      status: participant.status,\r\n      farmer_trainer: participant.farmer_trainer,\r\n      // business_advisor: participant.business_advisor,\r\n      create_in_commcare: participant.create_in_commcare,\r\n      number_of_coffee_plots: participant.number_of_coffee_plots,\r\n    };\r\n\r\n    if (selectedProject === \"a0EOj000003E0knMAC\") {\r\n      row.agronomy_advisor = participant.business_advisor;\r\n    } else {\r\n      row.business_advisor = participant.business_advisor;\r\n    }\r\n\r\n    if (\r\n      selectedProject === \"a0EOj000002FMGnMAO\" ||\r\n      selectedProject === \"a0EOj000002C7ivMAC\"\r\n    ) {\r\n      row.national_identification_id = participant.coop_membership_number\r\n        ? participant.coop_membership_number\r\n        : \"\";\r\n    } else if (selectedProject === \"a0EOj000003E0knMAC\") {\r\n      row.growers_number = participant.coop_membership_number\r\n        ? participant.coop_membership_number\r\n        : \"\";\r\n    } else {\r\n      row.coop_membership_number = participant.coop_membership_number\r\n        ? participant.coop_membership_number\r\n        : \"\";\r\n    }\r\n\r\n    return row;\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      {/* Display the dialog box for active participants */}\r\n      {sendToCcCount > 0 && (\r\n        <div className=\"active-participants-dialog\">\r\n          <p>\r\n            You currently have <strong>{sendToCcCount}</strong> participants who\r\n            have not been sent to CommCare. Please download the participant\r\n            list, review the database, and ensure all information is verified\r\n            before syncing with CommCare.\r\n          </p>\r\n          <button\r\n            className=\"take-action-button\"\r\n            onClick={() => handleTakeAction()}\r\n            disabled={isSyncing}\r\n          >\r\n            {isSyncing ? \"Processing...\" : \"Send to Commcare\"}\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"flex__heading\">\r\n        <h1 className=\"module__heading\">Registered Farmers View</h1>{\" \"}\r\n        {(userDetails?.role === \"super_admin\" ||\r\n          userDetails?.role === \"ci_leadership\" ||\r\n          userDetails?.role === \"senior_business_advisor\" ||\r\n          userDetails?.role === \"project_manager\" ||\r\n          userDetails?.role === \"mel_analyst\") && (\r\n          <FaCloudUploadAlt\r\n            title=\"Upload New Participants\"\r\n            style={{\r\n              fontSize: \"30px\",\r\n              cursor: \"pointer\",\r\n              marginLeft: \"10px\",\r\n              fill: \"#00A5A3\",\r\n            }}\r\n            onClick={() => setOpen(true)}\r\n          />\r\n        )}{\" \"}\r\n      </div>\r\n      {participants.length > 0 ? (\r\n        <Table\r\n          columns={columns}\r\n          data={rows}\r\n          tableRowItem={tableRowItem}\r\n          allAttendances={allAttendances}\r\n          selectedProject={selectedProject}\r\n        />\r\n      ) : (\r\n        <div className=\"no__data\">\r\n          <h1 style={{ fontSize: \"20px\" }}>No Registered Farmers Yet</h1>\r\n        </div>\r\n      )}\r\n\r\n      <UploadParticipantsModal\r\n        open={open}\r\n        setOpen={setOpen}\r\n        navigatedProject={\r\n          projects.find((project) => project.sf_project_id === selectedProject)\r\n            .project_name\r\n        }\r\n        sfProjectId={selectedProject}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Participants;\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst GET_PARTICIPANTS_ATTENDANCE_PER_PROJECT = gql`\r\n  query GetParticipantsAttendanceByProject($projectId: String!) {\r\n    getParticipantsByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      participants {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        age\r\n        coffee_tree_numbers\r\n        coop_membership_number\r\n        phone_number\r\n        hh_number\r\n        ffg_id\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n        create_in_commcare\r\n      }\r\n    }\r\n    getAttendances(project_id: $projectId) {\r\n      message\r\n      status\r\n      attendance {\r\n        attendance_id\r\n        participant_id\r\n        attendance_name\r\n        attendance_date\r\n        attendance_status\r\n        session_id\r\n        module_name\r\n        module_number\r\n        module_id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PARTICIPANTS_PER_PROJECT = gql`\r\n  query GetParticipantsAttendanceByProject($projectId: String!) {\r\n    getParticipantsByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      participants {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        age\r\n        coffee_tree_numbers\r\n        number_of_coffee_plots\r\n        coop_membership_number\r\n        phone_number\r\n        hh_number\r\n        ffg_id\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n        create_in_commcare\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PARTICIPANTS_PER_TG = gql`\r\n  query GetParticipantsByGroup($tgId: String!) {\r\n    getParticipantsByGroup(tg_id: $tgId) {\r\n      message\r\n      status\r\n      participants {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PARTICIPANT_BY_ID = gql`\r\n  query GetParticipantsById($id: String!) {\r\n    getParticipantsById(p_id: $id) {\r\n      message\r\n      status\r\n      participant {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_ATTENDANCE_PER_PARTICIPANT = gql`\r\n  query GetAttendanceByParticipant($participantId: String!) {\r\n    getAttendanceByParticipant(participant_id: $participantId) {\r\n      message\r\n      status\r\n      attendance {\r\n        attendance_id\r\n        participant_id\r\n        attendance_name\r\n        attendance_date\r\n        attendance_status\r\n        module_name\r\n        session_id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPLOAD_PARTICIPANTS = gql`\r\n  mutation UploadParticipants($partsFile: Upload!) {\r\n    uploadParticipants(parts_file: $partsFile) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst SYNC_PARTICIPANTS_WITH_COMMCARE = gql`\r\n  mutation SyncParticipantsWithCOMMCARE($projectId: String!) {\r\n    syncParticipantsWithCOMMCARE(project_id: $projectId) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  GET_PARTICIPANTS_PER_PROJECT,\r\n  GET_PARTICIPANTS_PER_TG,\r\n  GET_ATTENDANCE_PER_PARTICIPANT,\r\n  UPLOAD_PARTICIPANTS,\r\n  SYNC_PARTICIPANTS_WITH_COMMCARE,\r\n  GET_PARTICIPANTS_ATTENDANCE_PER_PROJECT,\r\n  GET_PARTICIPANT_BY_ID\r\n};\r\n"],"names":["requiredColumns","_ref","open","setOpen","navigatedProject","sfProjectId","fileInfo","setFileInfo","useState","file","setFile","loadedColumns","setLoadedColumns","distinctProjects","setDistinctProjects","uploadResult","setUploadResult","isProcessing","setIsProcessing","uploadParticipants","useMutation","UPLOAD_PARTICIPANTS","participantsPerProject","useQuery","GET_PARTICIPANTS_PER_PROJECT","variables","projectId","parseFile","reader","FileReader","onload","e","loadedData","target","result","split","modifiedData","map","row","cell","replace","filename","name","size","type","data","length","readAsText","useEffect","extractDistinctProjects","projectColumn","indexOf","filter","project","Set","handleClose","reason","resetState","createProjectSpecificFile","projectIndex","projectData","projectDataString","join","File","uploadFile","async","res","partsFile","refetch","status","setTimeout","window","location","reload","error","console","message","handleDownloadErrors","byteCharacters","atob","byteNumbers","Array","fill","_","i","charCodeAt","byteArray","Uint8Array","blob","Blob","saveAs","formatFileSize","toFixed","formatNumberWithCommas","number","toString","_jsxs","Dialog","onClose","children","_jsx","DialogContent","Box","sx","display","flexDirection","alignItems","className","Typography","variant","Alert","severity","Button","onClick","color","column","includes","BiErrorAlt","style","fontSize","flexWrap","index","Chip","label","margin","AiOutlineCloseCircle","title","fontStyle","marginBottom","width","textAlign","fontWeight","_Fragment","FaCloudUploadAlt","newFile","FileUploader","handleChange","types","DialogActions","disabled","GET_ALL_ATTENDANCES","gql","selectedProject","trainingGroups","projects","sendToCcCount","setSendToCcCount","isSyncing","setIsSyncing","participantData","loading","participantsLoading","participantsError","refetchParticipants","skip","allAttendances","setAllAttendances","attendanceLoading","setAttendanceLoading","attendanceError","setAttendanceError","fetchMore","limit","offset","notifyOnNetworkStatusChange","_initialData$getAtten","allChunks","initialData","initialChunk","getAttendances","attendance","maxParallel","keepGoing","promises","currentOffset","p","then","_res$data","_res$data$getAttendan","chunk","push","results","Promise","all","err","fetchAllAttendancesParallel","SyncParticipants","SYNC_PARTICIPANTS_WITH_COMMCARE","userDetails","JSON","parse","localStorage","getItem","getParticipantsByProject","participants","participant","create_in_commcare","Grid","container","direction","justifyContent","height","BeatLoader","columns","id","selector","num","sortable","first_name","last_name","gender","tns_id","training_group","hh_number","farmer_number","farmer_trainer","business_advisor","rows","_trainingGroups$find","Project","find","sf_project_id","project_name","p_id","middle_name","age","coffee_tree_numbers","phone_number","farmer_sf_id","sf_household_id","household_id","ffg_id","tg","tg_id","tg_name","primary_household_member","number_of_coffee_plots","agronomy_advisor","national_identification_id","coop_membership_number","growers_number","log","handleTakeAction","role","cursor","marginLeft","Table","tableRowItem","UploadParticipantsModal","GET_PARTICIPANTS_PER_TG","GET_PARTICIPANT_BY_ID","GET_ATTENDANCE_PER_PARTICIPANT"],"sourceRoot":""}