{"version":3,"file":"static/js/680.037beb7c.chunk.js","mappings":"0LAEgDA,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAApD,MA+CMC,EAA+BD,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAiCnCE,EAA0BF,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;EAyB9BG,EAAwBH,EAAAA,EAAI;;;;;;;;;;;;;;;;;;;;;;;EAyB5BI,EAAiCJ,EAAAA,EAAI;;;;;;;;;;;;;;;;EAkBrCK,EAAsBL,EAAAA,EAAI;;;;;;;;EAU1BM,EAAkCN,EAAAA,EAAI;;;;;;;mKCtJ5C,MAAMO,EAAS,CACbC,UAAW,OACXC,WAAY,MACZC,MAAO,yBACPC,SAAU,OACVC,SAAU,OAmGZ,EAhGiBC,KACf,MAAM,eAAEC,EAAc,iBAAEC,IAAqBC,EAAAA,EAAAA,OAGtCC,EAAoBC,IAAyBC,EAAAA,EAAAA,UAAS,KACtDC,EAAsBC,IAA2BF,EAAAA,EAAAA,UAAS,IAG3DG,GAASC,EAAAA,EAAAA,MACT,GAAEC,GAAOF,EAGTG,GAAmBD,EAGnBE,GAAuBC,EAAAA,EAAAA,GAASC,EAAAA,GAAwB,CAC5DC,UAAW,CAAEC,KAAMN,GACnBO,KAAMN,KAIF,QAAEO,EAAO,MAAEC,EAAK,KAAEC,IAASP,EAAAA,EAAAA,GAASzB,EAAAA,GAAyB,CACjE2B,UAAW,CAAEC,KAAMN,GACnBO,KAAMN,IAGFU,EAAwBrB,EAAesB,MAC1CC,GAAUA,EAAMC,QAAUd,IAqB7B,OAfAe,EAAAA,EAAAA,YAAU,KACR,GAAIb,EAAqBQ,KAAM,CAC7B,MAAMM,EACJd,EAAqBQ,KAAKO,qBAAqBD,WACjDtB,EAAsBsB,EACxB,IACC,CAACd,EAAqBQ,QAGzBK,EAAAA,EAAAA,YAAU,KACJL,GAAQA,EAAKQ,uBAAuBC,cACtCtB,EAAwBa,EAAKQ,uBAAuBC,aACtD,GACC,CAACT,IAEAF,GACKY,EAAAA,EAAAA,KAACC,EAAAA,EAAa,IAGnBZ,GAEAW,EAAAA,EAAAA,KAAA,OAAKE,UAAU,oBAAmBC,UAChCH,EAAAA,EAAAA,KAACI,EAAAA,EAAU,CAACtC,MAAM,QAAOqC,SAAC,0BAK9BH,EAAAA,EAAAA,KAAA,OAAAG,SACGZ,IACCc,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAH,SAAA,EACEH,EAAAA,EAAAA,KAACO,EAAAA,EAAU,CACTC,KAAMjB,EAAsBkB,QAC5BC,UA/DU,iBAgEVC,OApCgB,gBAsClBN,EAAAA,EAAAA,MAAA,OAAKO,MAAO,CAAEhD,UAAW,QAASuC,SAAA,EAChCH,EAAAA,EAAAA,KAAA,MAAAG,SAAKZ,EAAsBkB,WAC3BT,EAAAA,EAAAA,KAAA,KAAGY,MAAOjD,EAAOwC,SAAC,uSAQpBH,EAAAA,EAAAA,KAACa,EAAAA,GAAM,CACLC,QAASvB,EACTpB,iBACEA,GACAA,EAAiB4C,OAAS,GAC1B5C,EAAiB6C,QACdC,GAAYA,EAAQC,WAAa3B,EAAsBkB,UAG5Db,WAAYvB,EACZ0B,aAAcvB,QAIhB,C","sources":["graphql/queries/participantsRequests.js","features/training-group/tgdetail/Tgdetail.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\n\nconst GET_PARTICIPANTS_ATTENDANCE_PER_PROJECT = gql`\n  query GetParticipantsAttendanceByProject($projectId: String!) {\n    getParticipantsByProject(project_id: $projectId) {\n      message\n      status\n      participants {\n        p_id\n        first_name\n        middle_name\n        last_name\n        gender\n        age\n        coffee_tree_numbers\n        coop_membership_number\n        phone_number\n        hh_number\n        ffg_id\n        location\n        tns_id\n        status\n        farmer_trainer\n        business_advisor\n        project_name\n        training_group\n        household_id\n        primary_household_member\n        create_in_commcare\n      }\n    }\n    getAttendances(project_id: $projectId) {\n      message\n      status\n      attendance {\n        attendance_id\n        participant_id\n        attendance_name\n        attendance_date\n        attendance_status\n        session_id\n        module_name\n        module_number\n        module_id\n      }\n    }\n  }\n`;\n\nconst GET_PARTICIPANTS_PER_PROJECT = gql`\n  query GetParticipantsAttendanceByProject($projectId: String!) {\n    getParticipantsByProject(project_id: $projectId) {\n      message\n      status\n      participants {\n        p_id\n        first_name\n        middle_name\n        last_name\n        gender\n        age\n        coffee_tree_numbers\n        number_of_coffee_plots\n        coop_membership_number\n        phone_number\n        hh_number\n        ffg_id\n        location\n        tns_id\n        status\n        farmer_trainer\n        business_advisor\n        project_name\n        training_group\n        household_id\n        primary_household_member\n        create_in_commcare\n      }\n    }\n  }\n`;\n\nconst GET_PARTICIPANTS_PER_TG = gql`\n  query GetParticipantsByGroup($tgId: String!) {\n    getParticipantsByGroup(tg_id: $tgId) {\n      message\n      status\n      participants {\n        p_id\n        first_name\n        middle_name\n        last_name\n        gender\n        location\n        tns_id\n        status\n        farmer_trainer\n        business_advisor\n        project_name\n        training_group\n        household_id\n        primary_household_member\n      }\n    }\n  }\n`;\n\nconst GET_PARTICIPANT_BY_ID = gql`\n  query GetParticipantsById($id: String!) {\n    getParticipantsById(p_id: $id) {\n      message\n      status\n      participant {\n        p_id\n        first_name\n        middle_name\n        last_name\n        gender\n        location\n        tns_id\n        status\n        farmer_trainer\n        business_advisor\n        project_name\n        training_group\n        household_id\n        primary_household_member\n      }\n    }\n  }\n`;\n\nconst GET_ATTENDANCE_PER_PARTICIPANT = gql`\n  query GetAttendanceByParticipant($participantId: String!) {\n    getAttendanceByParticipant(participant_id: $participantId) {\n      message\n      status\n      attendance {\n        attendance_id\n        participant_id\n        attendance_name\n        attendance_date\n        attendance_status\n        module_name\n        session_id\n      }\n    }\n  }\n`;\n\nconst UPLOAD_PARTICIPANTS = gql`\n  mutation UploadParticipants($partsFile: Upload!) {\n    uploadParticipants(parts_file: $partsFile) {\n      message\n      status\n      file\n    }\n  }\n`;\n\nconst SYNC_PARTICIPANTS_WITH_COMMCARE = gql`\n  mutation SyncParticipantsWithCOMMCARE($projectId: String!) {\n    syncParticipantsWithCOMMCARE(project_id: $projectId) {\n      message\n      status\n    }\n  }\n`;\n\nexport {\n  GET_PARTICIPANTS_PER_PROJECT,\n  GET_PARTICIPANTS_PER_TG,\n  GET_ATTENDANCE_PER_PARTICIPANT,\n  UPLOAD_PARTICIPANTS,\n  SYNC_PARTICIPANTS_WITH_COMMCARE,\n  GET_PARTICIPANTS_ATTENDANCE_PER_PROJECT,\n  GET_PARTICIPANT_BY_ID\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useOutlet, useOutletContext, useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport Breadcrumb from \"../../../components/Breadcrumbs\";\nimport Tgtabs from \"./Tgtabs\";\nimport { GET_FARM_VISITS_PER_TG } from \"../../../graphql/queries/farmVisitsRequests\";\nimport { GET_PARTICIPANTS_PER_TG } from \"../../../graphql/queries/participantsRequests\";\nimport LoadingScreen from \"../../../components/LoadingScreen\";\nimport { Typography } from \"@mui/material\";\n\nconst Styles = {\n  marginTop: \"15px\",\n  fontWeight: \"400\",\n  color: \"rgba(125, 127, 136, 1)\",\n  fontSize: \"12px\",\n  maxWidth: \"80%\",\n};\n\nconst Tgdetail = () => {\n  const { trainingGroups, trainingSessions } = useOutletContext();\n  const breadCrumbs = \"Training group\";\n\n  const [farmVisitsPerGroup, setFarmVisitsPerGroup] = useState([]);\n  const [participantsPerGroup, setParticipantsPerGroup] = useState([]);\n\n  // Get params from URL\n  const params = useParams();\n  const { id } = params;\n\n  // Ensure `id` is present before making the query\n  const shouldSkipQuery = !id;\n\n  // Query for farm visits\n  const getAllFarmVisitsByTG = useQuery(GET_FARM_VISITS_PER_TG, {\n    variables: { tgId: id },\n    skip: shouldSkipQuery, // Skip query if id is not present\n  });\n\n  // Query for participants\n  const { loading, error, data } = useQuery(GET_PARTICIPANTS_PER_TG, {\n    variables: { tgId: id },\n    skip: shouldSkipQuery, // Skip query if id is not present\n  });\n\n  const selectedTrainingGroup = trainingGroups.find(\n    (group) => group.tg_id === id\n  );\n\n  const breadCrumbsLinkTo = \"traingroup\";\n\n  // Update farm visits data\n  useEffect(() => {\n    if (getAllFarmVisitsByTG.data) {\n      const farmVisits =\n        getAllFarmVisitsByTG.data.getFarmVisitsByGroup.farmVisits;\n      setFarmVisitsPerGroup(farmVisits);\n    }\n  }, [getAllFarmVisitsByTG.data]);\n\n  // Update participants data\n  useEffect(() => {\n    if (data && data.getParticipantsByGroup.participants) {\n      setParticipantsPerGroup(data.getParticipantsByGroup.participants);\n    }\n  }, [data]);\n\n  if (loading) {\n    return <LoadingScreen />; // Display loading spinner\n  }\n\n  if (error)\n    return (\n      <div className=\"circular_progress\">\n        <Typography color=\"error\">Error loading data</Typography>\n      </div>\n    );\n\n  return (\n    <div>\n      {selectedTrainingGroup && (\n        <>\n          <Breadcrumb\n            name={selectedTrainingGroup.tg_name}\n            firstItem={breadCrumbs}\n            linkTo={breadCrumbsLinkTo}\n          />\n          <div style={{ marginTop: \"10px\" }}>\n            <h1>{selectedTrainingGroup.tg_name}</h1>\n            <p style={Styles}>\n              In the focal farmer group details you can access detailed\n              information for a specific ffg, explore the training sessions list\n              associated with the selected group. Review the Farm Visits List\n              associated with the ffg and export the information displayed on\n              this page to Excel or CSV format.\n            </p>\n          </div>\n          <Tgtabs\n            details={selectedTrainingGroup}\n            trainingSessions={\n              trainingSessions &&\n              trainingSessions.length > 0 &&\n              trainingSessions.filter(\n                (session) => session.ts_group === selectedTrainingGroup.tg_name\n              )\n            }\n            farmVisits={farmVisitsPerGroup}\n            participants={participantsPerGroup}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Tgdetail;\n"],"names":["gql","GET_PARTICIPANTS_PER_PROJECT","GET_PARTICIPANTS_PER_TG","GET_PARTICIPANT_BY_ID","GET_ATTENDANCE_PER_PARTICIPANT","UPLOAD_PARTICIPANTS","SYNC_PARTICIPANTS_WITH_COMMCARE","Styles","marginTop","fontWeight","color","fontSize","maxWidth","Tgdetail","trainingGroups","trainingSessions","useOutletContext","farmVisitsPerGroup","setFarmVisitsPerGroup","useState","participantsPerGroup","setParticipantsPerGroup","params","useParams","id","shouldSkipQuery","getAllFarmVisitsByTG","useQuery","GET_FARM_VISITS_PER_TG","variables","tgId","skip","loading","error","data","selectedTrainingGroup","find","group","tg_id","useEffect","farmVisits","getFarmVisitsByGroup","getParticipantsByGroup","participants","_jsx","LoadingScreen","className","children","Typography","_jsxs","_Fragment","Breadcrumb","name","tg_name","firstItem","linkTo","style","Tgtabs","details","length","filter","session","ts_group"],"sourceRoot":""}