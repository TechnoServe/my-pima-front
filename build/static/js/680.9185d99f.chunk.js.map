{"version":3,"file":"static/js/680.9185d99f.chunk.js","mappings":"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","sources":["graphql/queries/farmVisitsRequests.js","graphql/queries/participantsRequests.js","features/training-group/tgdetail/Tgdetail.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nconst GET_FARM_VISITS_PER_PROJECT = gql`\r\n  query GetFarmVisitsByProject($projectId: String!) {\r\n    getFarmVisitsByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        training_group\r\n        farmer_tns_id\r\n        household_tns_id\r\n        farm_visited\r\n        farmer_trainer\r\n        date_visited\r\n        pima_household_id\r\n        pima_farmer_id\r\n        gender\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_TG = gql`\r\n  query GetFarmVisitsByGroup($tgId: String!) {\r\n    getFarmVisitsByGroup(tg_id: $tgId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_TS = gql`\r\n  query GetFarmVisitsBySession($tsId: String!) {\r\n    getFarmVisitsBySession(ts_id: $tsId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISITS_PER_PART = gql`\r\n  query GetFarmVisitsByParticipant($partId: String!) {\r\n    getFarmVisitsByParticipant(part_id: $partId) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        fv_name\r\n        training_group\r\n        training_session\r\n        farmer_tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FARM_VISIT_QAs = gql`\r\n  query GetFVQAsByFarmVisits($fvId: String!) {\r\n    getFVQAsByFarmVisits(fv_id: $fvId) {\r\n      message\r\n      status\r\n      fvQAs {\r\n        bp_id\r\n        fv_id\r\n        qas {\r\n          practice_name_id\r\n          practice_name\r\n          questions\r\n          answers\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPDATE_QA_IMAGE = gql`\r\n  mutation UpdateFVQAImageStatus(\r\n    $bpId: String!\r\n    $fieldName: FieldNames!\r\n    $imageStatus: Status!\r\n  ) {\r\n    updateFVQAImageStatus(\r\n      bp_id: $bpId\r\n      field_name: $fieldName\r\n      image_status: $imageStatus\r\n    ) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FVQAS_BY_PROJECT_FOR_REVIEW = gql`\r\n  query getFVQAsByProjectForReview(\r\n    $projectId: String!\r\n    $limit: Int!\r\n    $offset: Int!\r\n  ) {\r\n    getFVQAsByProjectForReview(\r\n      project_id: $projectId\r\n      limit: $limit\r\n      offset: $offset\r\n    ) {\r\n      message\r\n      status\r\n      farmVisits {\r\n        fv_id\r\n        training_group\r\n        training_session\r\n        tns_id\r\n        farm_visited\r\n        household_id\r\n        farmer_trainer\r\n        has_training\r\n        date_visited\r\n        status\r\n        qas {\r\n          practice_name_id\r\n          practice_name\r\n          questions\r\n          answers\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_FVQAS_BY_PROJECT_IN_EXCEL = gql`\r\n  query getFVQAsByProjectInExcel($projectId: String!, $practiceName: String!) {\r\n    getFVQAsByProjectInExcel(\r\n      project_id: $projectId\r\n      practice_name: $practiceName\r\n    ) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_OVERALL_REPORT = gql`\r\n  query getFVQAsByProjectInExcel($projectId: String!, $practiceName: String!) {\r\n    getFVQAsByProjectInExcel(\r\n      project_id: $projectId\r\n      practice_name: $practiceName\r\n    ) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPLOAD_APPROVED_FV = gql`\r\n  mutation UploadParticipants($partsFile: Upload!) {\r\n    uploadParticipants(parts_file: $partsFile) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_SAMPLED_VISITS_STATS = gql`\r\n  query GetSampledVisitsStats($projectId: String!) {\r\n    getSampledVisitsStats(projectId: $projectId) {\r\n      totalSampledVisits\r\n      totalReviewed\r\n      remainingVisits\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_BEST_PRACTICE_STATS = gql`\r\n  query GetBestPracticeStats($projectId: String!, $practiceName: String!) {\r\n    getBestPracticeReviewStats(\r\n      projectId: $projectId\r\n      practiceName: $practiceName\r\n    ) {\r\n      reviewedVisits\r\n      remainingVisits\r\n      totalVisits\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PAGINATED_REVIEWS = gql`\r\n  query GetPaginatedReviews(\r\n    $projectId: String!\r\n    $practiceName: String!\r\n    $page: Int!\r\n    $pageSize: Int!\r\n  ) {\r\n    getPaginatedReviews(\r\n      projectId: $projectId\r\n      practiceName: $practiceName\r\n      page: $page\r\n      pageSize: $pageSize\r\n    ) {\r\n      visit_id\r\n      sf_visit_id\r\n      farmer_name\r\n      farmer_pima_id\r\n      farmer_tns_id\r\n      date_visited\r\n      farmer_trainer\r\n      BestPractices {\r\n        practice_id\r\n        practice_name\r\n        image_url\r\n        sf_practice_id\r\n        question\r\n        answer\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GENERATE_FARM_VISIT_REPORT = gql`\r\n  query GenerateFarmVisitReport($projectId: String!) {\r\n    generateFarmVisitReport(projectId: $projectId) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst SUBMIT_BATCH_APPROVED_VISITS = gql`\r\n  mutation SubmitBatch($input: [BatchInput!]!) {\r\n    submitBatch(input: $input) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nconst SUBMIT_BATCH = gql`\r\n  mutation SubmitBatch($input: [BatchInput!]!) {\r\n    submitBatch(input: $input) {\r\n      success\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  GET_FARM_VISITS_PER_PROJECT,\r\n  GET_FARM_VISITS_PER_TG,\r\n  GET_FARM_VISITS_PER_TS,\r\n  GET_FARM_VISITS_PER_PART,\r\n  GET_FARM_VISIT_QAs,\r\n  GET_FVQAS_BY_PROJECT_FOR_REVIEW,\r\n  GET_FVQAS_BY_PROJECT_IN_EXCEL,\r\n  GET_OVERALL_REPORT,\r\n  GET_PAGINATED_REVIEWS,\r\n  GET_BEST_PRACTICE_STATS,\r\n  GET_SAMPLED_VISITS_STATS,\r\n  GENERATE_FARM_VISIT_REPORT,\r\n  SUBMIT_BATCH_APPROVED_VISITS,\r\n  SUBMIT_BATCH,\r\n  UPLOAD_APPROVED_FV,\r\n  UPDATE_QA_IMAGE,\r\n};\r\n","import { gql } from \"@apollo/client\";\r\n\r\nconst GET_PARTICIPANTS_ATTENDANCE_PER_PROJECT = gql`\r\n  query GetParticipantsAttendanceByProject($projectId: String!) {\r\n    getParticipantsByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      participants {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        age\r\n        coffee_tree_numbers\r\n        coop_membership_number\r\n        phone_number\r\n        hh_number\r\n        ffg_id\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n        create_in_commcare\r\n      }\r\n    }\r\n    getAttendances(project_id: $projectId) {\r\n      message\r\n      status\r\n      attendance {\r\n        attendance_id\r\n        participant_id\r\n        attendance_name\r\n        attendance_date\r\n        attendance_status\r\n        session_id\r\n        module_name\r\n        module_number\r\n        module_id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PARTICIPANTS_PER_PROJECT = gql`\r\n  query GetParticipantsAttendanceByProject($projectId: String!) {\r\n    getParticipantsByProject(project_id: $projectId) {\r\n      message\r\n      status\r\n      participants {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        age\r\n        coffee_tree_numbers\r\n        number_of_coffee_plots\r\n        coop_membership_number\r\n        phone_number\r\n        hh_number\r\n        ffg_id\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n        create_in_commcare\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PARTICIPANTS_PER_TG = gql`\r\n  query GetParticipantsByGroup($tgId: String!) {\r\n    getParticipantsByGroup(tg_id: $tgId) {\r\n      message\r\n      status\r\n      participants {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_PARTICIPANT_BY_ID = gql`\r\n  query GetParticipantsById($id: String!) {\r\n    getParticipantsById(p_id: $id) {\r\n      message\r\n      status\r\n      participant {\r\n        p_id\r\n        first_name\r\n        middle_name\r\n        last_name\r\n        gender\r\n        location\r\n        tns_id\r\n        status\r\n        farmer_trainer\r\n        business_advisor\r\n        project_name\r\n        training_group\r\n        household_id\r\n        primary_household_member\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst GET_ATTENDANCE_PER_PARTICIPANT = gql`\r\n  query GetAttendanceByParticipant($participantId: String!) {\r\n    getAttendanceByParticipant(participant_id: $participantId) {\r\n      message\r\n      status\r\n      attendance {\r\n        attendance_id\r\n        participant_id\r\n        attendance_name\r\n        attendance_date\r\n        attendance_status\r\n        module_name\r\n        session_id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst UPLOAD_PARTICIPANTS = gql`\r\n  mutation UploadParticipants($partsFile: Upload!) {\r\n    uploadParticipants(parts_file: $partsFile) {\r\n      message\r\n      status\r\n      file\r\n    }\r\n  }\r\n`;\r\n\r\nconst SYNC_PARTICIPANTS_WITH_COMMCARE = gql`\r\n  mutation SyncParticipantsWithCOMMCARE($projectId: String!) {\r\n    syncParticipantsWithCOMMCARE(project_id: $projectId) {\r\n      message\r\n      status\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  GET_PARTICIPANTS_PER_PROJECT,\r\n  GET_PARTICIPANTS_PER_TG,\r\n  GET_ATTENDANCE_PER_PARTICIPANT,\r\n  UPLOAD_PARTICIPANTS,\r\n  SYNC_PARTICIPANTS_WITH_COMMCARE,\r\n  GET_PARTICIPANTS_ATTENDANCE_PER_PROJECT,\r\n  GET_PARTICIPANT_BY_ID\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useOutlet, useOutletContext, useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport Breadcrumb from \"../../../components/Breadcrumbs\";\r\nimport Tgtabs from \"./Tgtabs\";\r\nimport { GET_FARM_VISITS_PER_TG } from \"../../../graphql/queries/farmVisitsRequests\";\r\nimport { GET_PARTICIPANTS_PER_TG } from \"../../../graphql/queries/participantsRequests\";\r\nimport LoadingScreen from \"../../../components/LoadingScreen\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nconst Styles = {\r\n  marginTop: \"15px\",\r\n  fontWeight: \"400\",\r\n  color: \"rgba(125, 127, 136, 1)\",\r\n  fontSize: \"12px\",\r\n  maxWidth: \"80%\",\r\n};\r\n\r\nconst Tgdetail = () => {\r\n  const { trainingGroups, trainingSessions } = useOutletContext();\r\n  const breadCrumbs = \"Training group\";\r\n\r\n  const [farmVisitsPerGroup, setFarmVisitsPerGroup] = useState([]);\r\n  const [participantsPerGroup, setParticipantsPerGroup] = useState([]);\r\n\r\n  // Get params from URL\r\n  const params = useParams();\r\n  const { id } = params;\r\n\r\n  // Ensure `id` is present before making the query\r\n  const shouldSkipQuery = !id;\r\n\r\n  // Query for farm visits\r\n  const getAllFarmVisitsByTG = useQuery(GET_FARM_VISITS_PER_TG, {\r\n    variables: { tgId: id },\r\n    skip: shouldSkipQuery, // Skip query if id is not present\r\n  });\r\n\r\n  // Query for participants\r\n  const { loading, error, data } = useQuery(GET_PARTICIPANTS_PER_TG, {\r\n    variables: { tgId: id },\r\n    skip: shouldSkipQuery, // Skip query if id is not present\r\n  });\r\n\r\n  const selectedTrainingGroup = trainingGroups.find(\r\n    (group) => group.tg_id === id\r\n  );\r\n\r\n  const breadCrumbsLinkTo = \"traingroup\";\r\n\r\n  // Update farm visits data\r\n  useEffect(() => {\r\n    if (getAllFarmVisitsByTG.data) {\r\n      const farmVisits =\r\n        getAllFarmVisitsByTG.data.getFarmVisitsByGroup.farmVisits;\r\n      setFarmVisitsPerGroup(farmVisits);\r\n    }\r\n  }, [getAllFarmVisitsByTG.data]);\r\n\r\n  // Update participants data\r\n  useEffect(() => {\r\n    if (data && data.getParticipantsByGroup.participants) {\r\n      setParticipantsPerGroup(data.getParticipantsByGroup.participants);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading) {\r\n    return <LoadingScreen />; // Display loading spinner\r\n  }\r\n\r\n  if (error)\r\n    return (\r\n      <div className=\"circular_progress\">\r\n        <Typography color=\"error\">Error loading data</Typography>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div>\r\n      {selectedTrainingGroup && (\r\n        <>\r\n          <Breadcrumb\r\n            name={selectedTrainingGroup.tg_name}\r\n            firstItem={breadCrumbs}\r\n            linkTo={breadCrumbsLinkTo}\r\n          />\r\n          <div style={{ marginTop: \"10px\" }}>\r\n            <h1>{selectedTrainingGroup.tg_name}</h1>\r\n            <p style={Styles}>\r\n              In the focal farmer group details you can access detailed\r\n              information for a specific ffg, explore the training sessions list\r\n              associated with the selected group. Review the Farm Visits List\r\n              associated with the ffg and export the information displayed on\r\n              this page to Excel or CSV format.\r\n            </p>\r\n          </div>\r\n          <Tgtabs\r\n            details={selectedTrainingGroup}\r\n            trainingSessions={\r\n              trainingSessions &&\r\n              trainingSessions.length > 0 &&\r\n              trainingSessions.filter(\r\n                (session) => session.ts_group === selectedTrainingGroup.tg_name\r\n              )\r\n            }\r\n            farmVisits={farmVisitsPerGroup}\r\n            participants={participantsPerGroup}\r\n          />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tgdetail;\r\n"],"names":["GET_FARM_VISITS_PER_PROJECT","gql","GET_FARM_VISITS_PER_TG","GET_FARM_VISITS_PER_PART","GET_SAMPLED_VISITS_STATS","GET_BEST_PRACTICE_STATS","GET_PAGINATED_REVIEWS","GENERATE_FARM_VISIT_REPORT","SUBMIT_BATCH","GET_PARTICIPANTS_PER_PROJECT","GET_PARTICIPANTS_PER_TG","GET_PARTICIPANT_BY_ID","GET_ATTENDANCE_PER_PARTICIPANT","UPLOAD_PARTICIPANTS","SYNC_PARTICIPANTS_WITH_COMMCARE","Styles","marginTop","fontWeight","color","fontSize","maxWidth","Tgdetail","trainingGroups","trainingSessions","useOutletContext","farmVisitsPerGroup","setFarmVisitsPerGroup","useState","participantsPerGroup","setParticipantsPerGroup","params","useParams","id","shouldSkipQuery","getAllFarmVisitsByTG","useQuery","variables","tgId","skip","loading","error","data","selectedTrainingGroup","find","group","tg_id","useEffect","farmVisits","getFarmVisitsByGroup","getParticipantsByGroup","participants","_jsx","LoadingScreen","className","children","Typography","_jsxs","_Fragment","Breadcrumb","name","tg_name","firstItem","linkTo","style","Tgtabs","details","length","filter","session","ts_group"],"sourceRoot":""}