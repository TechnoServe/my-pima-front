{"version":3,"file":"static/js/789.9484593c.chunk.js","mappings":"sQAgBA,MAEMA,EAAY,CAChB,CAAEC,KAAM,WACR,CAAEA,KAAM,cACR,CAAEA,KAAM,cACR,CAAEA,KAAM,oBACR,CAAEA,KAAM,WACR,CAAEA,KAAM,eACR,CAAEA,KAAM,aAKJC,EAAiBA,KACrBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aACfE,EAAAA,EAAAA,KAAA,KAAAD,SAAG,+BAIDE,EAAeC,IAAA,IAAC,QAAEC,GAASD,EAAA,OAC/BF,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC9BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0BACJC,EAAAA,EAAAA,KAAA,KAAAD,SAAII,KACJH,EAAAA,EAAAA,KAAA,UAAQI,QAASA,IAAMC,OAAOC,SAASC,SAASR,SAAC,kBAE/C,EAwcFS,EAAeC,IAAwC,IAADC,EAAAC,EAAA,IAAtC,SAAEC,EAAQ,SAAEC,EAAQ,UAAEC,GAAWL,EACrD,MAAM,KAAEM,EAAI,QAAEC,EAAO,MAAEC,IAAUC,EAAAA,EAAAA,GAASC,EAAAA,GAAyB,CACjEC,UAAW,CAAEN,YAAWO,aAAcT,EAASjB,QAGjD,OACEE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAgBM,QAASA,IAAMS,EAASD,GAAUb,SAAA,EAC/DC,EAAAA,EAAAA,KAAA,MAAAD,SAAKa,EAASjB,OACbqB,IAAWhB,EAAAA,EAAAA,KAACJ,EAAc,IAC1BqB,IAASjB,EAAAA,EAAAA,KAACC,EAAY,CAACE,QAASc,EAAMd,WACrCa,IAAYC,IACZpB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAmB,KACtB,OAAJgB,QAAI,IAAJA,GAAgC,QAA5BL,EAAJK,EAAMO,kCAA0B,IAAAZ,OAA5B,EAAJA,EAAkCa,iBAAkB,MAEvD1B,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,eAAoB,KACvB,OAAJgB,QAAI,IAAJA,GAAgC,QAA5BJ,EAAJI,EAAMO,kCAA0B,IAAAX,OAA5B,EAAJA,EAAkCa,kBAAmB,UAIxD,EAIV,EA/dqBC,KACnB,MAAM,cAAEC,EAAa,OAAEC,IAAWC,EAAAA,EAAAA,OAE3BC,EAAkBC,IAAuBC,EAAAA,EAAAA,UAAS,OAClDC,EAAMC,IAAWF,EAAAA,EAAAA,UAAS,IAC1BG,EAAQC,IAAaJ,EAAAA,EAAAA,UAAS,KAC9BK,EAAgBC,IAAqBN,EAAAA,EAAAA,UAAS,KAC9CO,EAASC,IAAcR,EAAAA,EAAAA,UAAS,CAAC,IACjCS,EAAUC,IAAeV,EAAAA,EAAAA,UAAS,CAAC,IACnCW,EAAeC,IAAoBZ,EAAAA,EAAAA,UAAS,OAC5Ca,EAAeC,IAAoBd,EAAAA,EAAAA,UAAS,CAAC,IAC7Ce,EAAYC,IAAiBhB,EAAAA,EAAAA,WAAS,IACtCiB,EAAmBC,IAAwBlB,EAAAA,EAAAA,WAAS,IAGzDhB,KAAMmC,EACNlC,QAASmC,EACTlC,MAAOmC,IACLlC,EAAAA,EAAAA,GAASmC,EAAAA,GAA0B,CACrCjC,UAAW,CAAEN,UAAWY,MAIxBX,KAAMuC,EACNtC,QAASuC,EACTtC,MAAOuC,EACPC,QAASC,IACPxC,EAAAA,EAAAA,GAASyC,EAAAA,GAAuB,CAClCvC,UAAW,CACTN,UAAWY,EACXL,aAAcQ,EAAmBA,EAAiBlC,KAAO,GACzDqC,KAAM,EACN4B,SAAU,KAEZC,MAAOhC,EACPiC,YAAa,kBAGRC,IAAuBC,EAAAA,EAAAA,GAAYC,EAAAA,KACnCC,IAA2BC,EAAAA,EAAAA,GAAaC,EAAAA,GAA4B,CACzEN,YAAa,kBAGfO,EAAAA,EAAAA,YAAU,KACJf,GAAcA,EAAWgB,qBAC3BnC,EAAUmB,EAAWgB,oBACvB,GACC,CAAChB,KAEJe,EAAAA,EAAAA,YAAU,KACR,GAAIxC,EAAkB,CACpB,MAAM0C,EAAWrC,EAAOsC,QAAQC,GAC9BA,EAAMC,cAAcC,MACjBC,GAAOA,EAAGC,gBAAkBhD,EAAiBlC,SAGlD0C,EAAkBkC,EACpB,IACC,CAAC1C,EAAkBK,IAEtB,MAAM4C,EAAwBlE,IAC5BkB,EAAoBlB,GACpBqB,EAAQ,GACRM,EAAW,CAAC,GACZE,EAAY,CAAC,GACbiB,EAAc,CAAErC,aAAcT,EAASjB,MAAO,EAuJ1CoF,EAAeA,CAACC,EAAYC,KAChC,MAAMC,EAAiBC,KAAKH,GACtBI,EAAa,GACnB,IAAK,IAAIC,EAAS,EAAGA,EAASH,EAAeI,OAAQD,GAAU,IAAK,CAClE,MAAME,EAAQL,EAAeK,MAAMF,EAAQA,EAAS,KAC9CG,EAAc,IAAIC,MAAMF,EAAMD,QACpC,IAAK,IAAII,EAAI,EAAGA,EAAIH,EAAMD,OAAQI,IAChCF,EAAYE,GAAKH,EAAMI,WAAWD,GAEpC,MAAME,EAAY,IAAIC,WAAWL,GACjCJ,EAAWU,KAAKF,EAClB,CACA,OAAO,IAAIG,KAAKX,EAAY,CAAEY,KAAMf,GAAc,EAGpD,GAAI9B,EAAc,OAAOnD,EAAAA,EAAAA,KAACiG,EAAAA,EAAa,IAEvC,GAAI7C,EACF,OACEpD,EAAAA,EAAAA,KAAA,OACEkG,MAAO,CACLC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,SACRvG,UAEFC,EAAAA,EAAAA,KAACuG,EAAAA,EAAU,CAACC,MAAM,QAAOzG,SAAC,yBAIhC,MAAM,mBAAE0G,EAAkB,cAAEC,EAAa,gBAAElF,GACzC0B,EAAUyD,sBAEZ,OACE3G,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,SAC3B8B,GAmCAhC,EAAAA,EAAAA,MAAA+G,EAAAA,SAAA,CAAA7G,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,KAAA,QAAMI,QArISyG,KACvB/E,EAAoB,MACpBG,EAAQ,GACRM,EAAW,CAAC,GACZE,EAAY,CAAC,EAAE,EAiI0B3C,UAAU,iBAAgBC,SAAC,iCAI9DF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,aAAYC,SAAA,CAAC,aAAW8B,EAAiBlC,QACtD4D,IAAiBvD,EAAAA,EAAAA,KAACiG,EAAAA,EAAa,IAC/BzC,IAAexD,EAAAA,EAAAA,KAACC,EAAY,CAACE,QAASqD,EAAYrD,WACjDoD,IAAkBC,GAAepB,EAAekD,OAAS,IACzDzF,EAAAA,EAAAA,MAAA+G,EAAAA,SAAA,CAAA7G,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,SACxBqC,EACEmD,MA3UF,EA2UQvD,EA3UR,GA2U0BA,EAAO,IAC/B8E,KAAKrC,IAAW,IAADsC,EACd,MAAMC,EAAevC,EAAMC,cAAcuC,MACtCrC,GAAOA,EAAGC,gBAAkBhD,EAAiBlC,QAGzCuH,EAAQC,IACD,OAAZH,QAAY,IAAZA,GAAuB,QAAXD,EAAZC,EAAcI,iBAAS,IAAAL,OAAX,EAAZA,EAAyBM,MAAM,KAAK9B,OAAO,KAAM,GAEnD,OACE1F,EAAAA,EAAAA,MAAA,OAA0BC,UAAU,aAAYC,SAAA,EAC9CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAAyB,IAChC0E,EAAM6C,mBAETzH,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,mBAAwB,IAC/B0E,EAAM8C,kBAET1H,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,kBAAsB,IAAE0E,EAAM+C,iBAExC3H,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iBAAqB,IAAE0E,EAAMgD,gBAEvC5H,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAAyB,IAChC0E,EAAMiD,mBAET7H,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,cAAmB,KACd,OAAZiH,QAAY,IAAZA,OAAY,EAAZA,EAAcW,WAAY,UAE7B9H,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,iBAAsB,KACjB,OAAZiH,QAAY,IAAZA,OAAY,EAAZA,EAAcY,SAAU,aAI7B/H,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,CACzB6C,EAAcuE,KAAYnH,EAAAA,EAAAA,KAACJ,EAAc,KAC1CI,EAAAA,EAAAA,KAAA,OACE6H,IACc,OAAZb,QAAY,IAAZA,GAAAA,EAAcI,UACT,+BAAyCF,KAAUC,IA5W1D,kCA+WAW,IAAI,aACJ5B,MAAO,CACLC,QAASvD,EAAcuE,GACnB,OACA,SAENY,OAAQA,IArLTZ,KACvBtE,GAAkBmF,IAAI,IAAWA,EAAM,CAACb,IAAU,KAAS,EAoLrBc,CAAgBd,GAC9Be,QAASA,IAlLTf,KACxBtE,GAAkBmF,IAAI,IAAWA,EAAM,CAACb,IAAU,KAAS,EAiLpBgB,CAAiBhB,GAChC/G,QAASA,IAjMVgI,EAAClB,EAAQC,KAChCxE,EACG,+BAAyCuE,KAAUC,IACrD,EA8LsCiB,CAAiBlB,EAAQC,SAI5CtH,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,qBACPF,EAAAA,EAAAA,MAAA,UACEwI,MAAO/F,EAAQmC,EAAM6D,WAAa,GAClCC,SAAWC,IACTC,OAzSAC,EAySmBjE,EAAM6D,SAzShBD,EAyS0BG,EAAEG,OAAON,WAxStE9F,GAAYyF,IAAI,IAAWA,EAAM,CAACU,GAAUL,MADnBI,IAACC,EAASL,CA0SV,EAAAtI,SAAA,EAEDC,EAAAA,EAAAA,KAAA,UAAQqI,MAAM,GAAEtI,SAAC,kBACjBC,EAAAA,EAAAA,KAAA,UAAQqI,MAAM,MAAKtI,SAAC,SACpBC,EAAAA,EAAAA,KAAA,UAAQqI,MAAM,KAAItI,SAAC,QACnBC,EAAAA,EAAAA,KAAA,UAAQqI,MAAM,UAAStI,SAAC,mBAI5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,SAAAD,SAAO,eACPC,EAAAA,EAAAA,KAAA,YACEqI,MAAO7F,EAASiC,EAAM6D,WAAa,GACnCC,SAAWC,IACTI,OApTEF,EAqTAjE,EAAM6D,SArTGD,EAsTTG,EAAEG,OAAON,WArTrC5F,GAAauF,IAAI,IAAWA,EAAM,CAACU,GAAUL,MADlBO,IAACF,EAASL,CAwTZ,EACDQ,YAC8B,OAA5BvG,EAAQmC,EAAM6D,UACV,6BACA,WAENQ,SAAsC,OAA5BxG,EAAQmC,EAAM6D,UACxBxI,UAC8B,OAA5BwC,EAAQmC,EAAM6D,WACb9F,EAASiC,EAAM6D,UAEZ,GADA,UAIqB,OAA5BhG,EAAQmC,EAAM6D,YACZ9F,EAASiC,EAAM6D,YACdtI,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gBAAeC,SAAC,8CA1F3B0E,EAAM6D,SA+FV,OAIdzI,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAAC,YACrB,IACTgJ,KAAKC,IA1bL,GA0bUhH,EAAO,GAAeI,EAAekD,QAAQ,MAAI,IAC3DlD,EAAekD,OAAO,eAGzBzF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBC,SAAA,EAClCC,EAAAA,EAAAA,KAAA,UAAQiJ,SAAmB,IAATjH,EAAY5B,QAASA,IAAM6B,EAAQD,EAAO,GAAGjC,SAAC,cAGhEF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,eAAcC,SAAA,CAAC,QACvBiC,EAAO,EAAE,MAAI,IAClB+G,KAAKG,KAAK9G,EAAekD,OApc3B,OAscDtF,EAAAA,EAAAA,KAAA,UACEiJ,SACEjH,GAAQ+G,KAAKI,MAAM/G,EAAekD,OAxcrC,GA0cClF,QAASA,IAAM6B,EAAQD,EAAO,GAAGjC,SAClC,aAKHC,EAAAA,EAAAA,KAAA,UACEF,UAAU,gBACVM,QAvWYgJ,KAExB,MAAMC,EAAoBjH,EAAemD,MA7G5B,EA8GXvD,EA9GW,GA+GVA,EAAO,IAIJsH,EAAYD,EAAkBE,OACjC9E,GAAUnC,EAAQmC,EAAM6D,YAIrBkB,EAAoBH,EAAkBE,OACzC9E,GAC6B,QAA5BnC,EAAQmC,EAAM6D,WACe,OAA5BhG,EAAQmC,EAAM6D,WAAsB9F,EAASiC,EAAM6D,YAGxD,IAAKgB,EAIH,YAHAG,EAAAA,GAAMxI,MACJ,wEAKJ,IAAKuI,EAEH,YADAC,EAAAA,GAAMxI,MAAM,8DAKd,MAAMyI,EAAaL,EAAkBvC,KAAKrC,IAKjC,CACLkF,YALmBlF,EAAMC,cAAcuC,MACtCrC,GAAOA,EAAGC,gBAAkBhD,EAAiBlC,OAIpBgK,YAC1BC,eAAgBtH,EAAQmC,EAAM6D,UAAUuB,cACxCC,QAAStH,EAASiC,EAAM6D,WAAa,GACrCyB,QAASpI,MAKboB,GAAc,GAGdgB,EAAoB,CAClB3C,UAAW,CACT4I,MAAON,KAGRO,MAAMC,IACLnH,GAAc,GAEVmH,EAASnJ,KAAKoJ,YAAYC,SAC5BX,EAAAA,GAAMW,QAAQ,iCAGd7H,EAAW,CAAC,GACZE,EAAY,CAAC,GAGbR,EAAQ,GACRyB,EAAc,CAAEI,YAAa,kBAE7B2F,EAAAA,GAAMxI,MACJ,2BAA6BiJ,EAASnJ,KAAKoJ,YAAYhK,QAE3D,IAEDkK,OAAOpJ,IACN8B,GAAc,GACduH,QAAQrJ,MAAM,0BAA2BA,GACzCwI,EAAAA,GAAMxI,MAAM,gDAAgD,GAC5D,EA2RQgI,SAAUnG,EAAY/C,SAErB+C,EAAa,gBAAkB,oBAIrCJ,IACC1C,EAAAA,EAAAA,KAAA,OAAKF,UAAU,cAAcM,QAlRfmK,KACtB5H,EAAiB,KAAK,EAiRwC5C,UACpDC,EAAAA,EAAAA,KAAA,OAAK6H,IAAKnF,EAAeoF,IAAI,gCA/LnCjI,EAAAA,EAAAA,MAAA+G,EAAAA,SAAA,CAAA7G,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,0BAA8B,IAAE0G,MAE1C5G,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,oBAAwB,IAAE2G,MAEpC7G,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,UAAAD,SAAQ,sBAA0B,IAAEyB,SAGxCxB,EAAAA,EAAAA,KAAA,UACEF,UAAU,kBACVM,QAvFiBoK,KACtB9I,GAKLuB,GAAqB,GACrBiB,EAAwB,CAAE9C,UAAW,CAAEN,UAAWY,KAC/CuI,MAAMC,IACL,MAAM,wBAAEhG,GAA4BgG,EAASnJ,KAC7C,GACqC,MAAnCmD,EAAwBuG,QACxBvG,EAAwBwG,KACxB,CACA,MAAM1F,EAAad,EAAwBwG,KAAKrD,MAAM,KAAK,GACrDsD,EAAO5F,EACXC,EACA,sEAEF4F,EAAAA,EAAAA,QAAOD,EAAM,8BACblB,EAAAA,GAAMW,QAAQ,oBAChB,MACEX,EAAAA,GAAMxI,MACJiD,EAAwB/D,SAAW,8BAGvC8C,GAAqB,EAAM,IAE5BoH,OAAOpJ,IACNqJ,QAAQrJ,MAAM,2BAA4BA,GAC1CwI,EAAAA,GAAMxI,MAAM,kDACZgC,GAAqB,EAAM,KA7B7BwG,EAAAA,GAAMxI,MAAM,uBA8BV,EAwDMgI,SAAUjG,EAAkBjD,SAE3BiD,EAAoB,iBAAmB,wBAG5ChD,EAAAA,EAAAA,KAAA,MAAIF,UAAU,kBAAiBC,SAAC,sCAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SACjCL,EAAUoH,KAAKlG,IACdZ,EAAAA,EAAAA,KAACQ,EAAY,CAEXI,SAAUA,EACVE,UAAWY,EACXb,SAAUiE,GAHLlE,EAASjB,cA2KpB,C,iGC9dV,SAASkL,EAAKC,EAAMD,GAAM,MACJ,oBAATA,EAAsBA,EAAO,CAAEE,SAAS,GAC1B,iBAATF,IACdP,QAAQU,KAAK,sDACbH,EAAO,CAAEE,SAAUF,IAKjBA,EAAKE,SAAW,6EAA6EE,KAAKH,EAAK9E,MAClG,IAAID,KAAK,CAAC,SAA6B+E,GAAO,CAAE9E,KAAM8E,EAAK9E,OAE7D8E,CACR,CAED,SAASI,EAAUJ,EAAKD,EAAMK,GAC5B,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOP,GAChBK,EAAIG,aAAe,OACnBH,EAAII,OAAS,WACXC,EAAOL,EAAIjB,SAAUW,EAAMK,EAC5B,EACDC,EAAIM,QAAU,WACZnB,QAAQrJ,MAAM,0BACf,EACDkK,EAAIO,MACL,CAED,SAASP,EAAaL,GACpB,IAAID,EAAM,IAAIO,eAEdP,EAAIQ,KAAK,OAAQP,GAAjB,GACA,IACED,EAAIa,MACL,CAAC,MAAOZ,GAAK,CACd,OAAqB,KAAdD,EAAIJ,QAA+B,KAAdI,EAAIJ,MACjC,CAGD,SAASjC,EAAOsC,GACd,IACEA,EAAKa,cAAc,IAAIC,WAAW,SACnC,CAAC,MAAOV,GACP,IAAIL,EAAMgB,SAASC,YAAY,eAC/BjB,EAAIkB,eAAe,SAAnB,KAAwC1L,OAAQ,EAAG,EAAG,EAAG,GACnC,IADtB,WACsD,EAAG,MACzDyK,EAAKa,cAAcd,EACpB,CACF,C,IAtDGmB,EAA4B,iBAAX3L,QAAuBA,OAAOA,SAAWA,OAC1DA,OAAyB,iBAAT4L,MAAqBA,KAAKA,OAASA,KACnDA,KAAyB,iBAAXC,EAAAA,GAAuBA,EAAAA,EAAOA,SAAWA,EAAAA,EACvDA,EAAAA,OADO,EAyDPpB,EAAiBkB,EAAQG,WAAa,YAAYlB,KAAKkB,UAAUC,YAAc,cAAcnB,KAAKkB,UAAUC,aAAe,SAASnB,KAAKkB,UAAUC,WAEnJZ,EAASQ,EAAQpB,SAEA,iBAAXvK,QAAuBA,SAAW2L,EACtC,WAAiC,EAGlC,aAAcK,kBAAkBC,YAAcxB,EAC/C,SAAiBD,EAAMW,EAAMe,GAAM,IAC/B7G,EAAMsG,EAAQQ,KAAOR,EAAQS,UAC7BC,EAAIb,SAASc,cAAc,KAC/BnB,EAAOA,GAAQX,EAAKlL,MAAQ,WAE5B+M,EAAEE,SAAWpB,EACbkB,EAAEG,IAAM,WAKY,iBAAThC,GAET6B,EAAEI,KAAOjC,EACL6B,EAAEK,SAAWzM,SAASyM,OAKxBvE,EAAMkE,GAJNvB,EAAYuB,EAAEI,MACV5B,EAASL,EAAMW,EAAMe,GACrB/D,EAAMkE,EAAGA,EAAE/D,OAAS,YAM1B+D,EAAEI,KAAOpH,EAAIsH,gBAAgBnC,GAC7BoC,YAAW,WAAcvH,EAAIwH,gBAAgBR,EAAEI,KAAO,GAAE,KACxDG,YAAW,WAAczE,EAAMkE,EAAI,GAAE,GAExC,EAGC,qBAAsBP,UACtB,SAAiBH,EAAMR,EAAMe,GAG7B,GAFAf,EAAOA,GAAQQ,EAAKrM,MAAQ,WAER,iBAATqM,EAUTG,UAAUgB,iBAAiBtC,EAAImB,EAAMO,GAAOf,QAT5C,GAAIL,EAAYa,GACdd,EAASc,EAAMR,EAAMe,OAChB,CACL,IAAI7G,EAAImG,SAASc,cAAc,KAC/BjH,EAAEoH,KAAOd,EACTtG,EAAEiD,OAAS,SACXsE,YAAW,WAAczE,EAAM9C,EAAI,GACpC,CAIJ,EAGC,SAAiBmF,EAAMM,EAAM3C,EAAMgD,GASnC,IANAA,EAAQA,GAASH,KAAK,GAAI,aAExBG,EAAMK,SAASuB,MACf5B,EAAMK,SAASwB,KAAKC,UAAY,kBAGd,iBAATzC,EAAmB,OAAOK,EAASL,EAAMM,EAAM3C,GAThB,IAWtC+D,EAAsB,6BAAd1B,EAAK7E,KACbN,EAAW,eAAeuF,KAAKe,EAAQuB,cAAgBvB,EAAQwB,OAC/Dd,EAAc,eAAezB,KAAKkB,UAAUC,WAEhD,IAAKM,GAAgBH,GAAS7G,GAAaoF,IAAyC,oBAAf2C,WAA4B,CAE/F,IAAIC,EAAS,IAAID,WACjBC,EAAOC,UAAY,WACjB,IAAI7C,EAAM4C,EAAOE,OACjB9C,EAAM4B,EAAc5B,EAAMA,EAAI+C,QAAQ,eAAgB,yBAClDrC,EAAOA,EAAMlL,SAASwM,KAAOhC,EAC5BxK,SAAWwK,EAChBU,EAAQ,IACT,EACDkC,EAAOI,cAAcjD,EACtB,KAAM,KACDkD,EAAM/B,EAAQQ,KAAOR,EAAQS,UAC7BuB,EAAMD,EAAIf,gBAAgBnC,GAC1BW,EAAOA,EAAMlL,SAAW0N,EACvB1N,SAASwM,KAAOkB,EACrBxC,EAAQ,KACRyB,YAAW,WAAcc,EAAIb,gBAAgBc,EAAM,GAAE,IACtD,CACF,GAGHhC,EAAQpB,OAASY,EAAOZ,OAASY,EAG/ByC,EAAOC,QAAU1C,C","sources":["features/farm-visit/fvapprove/fvApprove.js","../node_modules/file-saver/src/FileSaver.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  GET_SAMPLED_VISITS_STATS,\n  GET_BEST_PRACTICE_STATS,\n  GET_PAGINATED_REVIEWS,\n  SUBMIT_BATCH,\n  GENERATE_FARM_VISIT_REPORT,\n} from \"../../../graphql/queries/farmVisitsRequests\";\nimport \"./fvapprove.css\";\nimport { toast } from \"react-hot-toast\";\nimport { saveAs } from \"file-saver\";\nimport { Typography } from \"@mui/material\";\nimport LoadingScreen from \"../../../components/LoadingScreen\";\nimport { useOutletContext } from \"react-router-dom\";\n\nconst pageSize = 5;\n\nconst practices = [\n  { name: \"Compost\" },\n  { name: \"Compost BU\" },\n  { name: \"Main Stems\" },\n  { name: \"Shade Management\" },\n  { name: \"Weeding\" },\n  { name: \"Record Book\" },\n  { name: \"Stumping\" },\n];\n\nconst placeholderImageUrl = \"https://via.placeholder.com/150\"; // Placeholder image URL\n\nconst LoadingSpinner = () => (\n  <div className=\"loading-container\">\n    <div className=\"spinner\"></div>\n    <p>Loading, please wait...</p>\n  </div>\n);\n\nconst ErrorMessage = ({ message }) => (\n  <div className=\"error-container\">\n    <div className=\"error-message\">\n      <h3>Something went wrong</h3>\n      <p>{message}</p>\n      <button onClick={() => window.location.reload()}>Try Again</button>\n    </div>\n  </div>\n);\n\nconst FarmVisitApp = () => {\n  const { activeProject, userId } = useOutletContext();\n\n  const [selectedPractice, setSelectedPractice] = useState(null);\n  const [page, setPage] = useState(0);\n  const [visits, setVisits] = useState([]);\n  const [filteredVisits, setFilteredVisits] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [comments, setComments] = useState({});\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [loadingImages, setLoadingImages] = useState({});\n  const [submitting, setSubmitting] = useState(false); // New state for submission loading\n  const [downloadingReport, setDownloadingReport] = useState(false); // State for report download\n\n  const {\n    data: statsData,\n    loading: statsLoading,\n    error: statsError,\n  } = useQuery(GET_SAMPLED_VISITS_STATS, {\n    variables: { projectId: activeProject },\n  });\n\n  const {\n    data: visitsData,\n    loading: visitsLoading,\n    error: visitsError,\n    refetch: refetchVisits,\n  } = useQuery(GET_PAGINATED_REVIEWS, {\n    variables: {\n      projectId: activeProject,\n      practiceName: selectedPractice ? selectedPractice.name : \"\",\n      page: 0,\n      pageSize: 1000,\n    },\n    skip: !selectedPractice, // Skip the query until a practice is selected\n    fetchPolicy: \"network-only\",\n  });\n\n  const [submitBatchMutation] = useMutation(SUBMIT_BATCH);\n  const [generateFarmVisitReport] = useLazyQuery(GENERATE_FARM_VISIT_REPORT, {\n    fetchPolicy: \"network-only\",\n  });\n\n  useEffect(() => {\n    if (visitsData && visitsData.getPaginatedReviews) {\n      setVisits(visitsData.getPaginatedReviews);\n    }\n  }, [visitsData]);\n\n  useEffect(() => {\n    if (selectedPractice) {\n      const filtered = visits.filter((visit) =>\n        visit.BestPractices.some(\n          (bp) => bp.practice_name === selectedPractice.name\n        )\n      );\n      setFilteredVisits(filtered);\n    }\n  }, [selectedPractice, visits]);\n\n  const handleSelectPractice = (practice) => {\n    setSelectedPractice(practice);\n    setPage(0);\n    setAnswers({});\n    setComments({});\n    refetchVisits({ practiceName: practice.name });\n  };\n\n  const handleAnswerChange = (visitId, value) => {\n    setAnswers((prev) => ({ ...prev, [visitId]: value }));\n  };\n\n  const handleCommentsChange = (visitId, value) => {\n    setComments((prev) => ({ ...prev, [visitId]: value }));\n  };\n\n  const handleSubmitBatch = () => {\n    // Get the current page's filtered visits\n    const currentPageVisits = filteredVisits.slice(\n      page * pageSize,\n      (page + 1) * pageSize\n    );\n\n    // Check if all the answers have been filled out\n    const allFilled = currentPageVisits.every(\n      (visit) => answers[visit.visit_id]\n    );\n\n    // Check if all comments are provided for 'No' answers\n    const allCommentsFilled = currentPageVisits.every(\n      (visit) =>\n        answers[visit.visit_id] === \"Yes\" ||\n        (answers[visit.visit_id] === \"No\" && comments[visit.visit_id])\n    );\n\n    if (!allFilled) {\n      toast.error(\n        \"Please fill out 'Correct Answer?' for all records before submitting.\"\n      );\n      return;\n    }\n\n    if (!allCommentsFilled) {\n      toast.error(\"Please provide comments for all records with 'No' answers.\");\n      return;\n    }\n\n    // Prepare the batch input for the API call\n    const batchInput = currentPageVisits.map((visit) => {\n      const bestPractice = visit.BestPractices.find(\n        (bp) => bp.practice_name === selectedPractice.name\n      );\n\n      return {\n        practice_id: bestPractice.practice_id,\n        correct_answer: answers[visit.visit_id].toLowerCase(),\n        comment: comments[visit.visit_id] || \"\",\n        user_id: userId,\n      };\n    });\n\n    // Show loading spinner and disable submit button\n    setSubmitting(true);\n\n    // Call the API to submit the batch\n    submitBatchMutation({\n      variables: {\n        input: batchInput,\n      },\n    })\n      .then((response) => {\n        setSubmitting(false);\n\n        if (response.data.submitBatch.success) {\n          toast.success(\"Batch submitted successfully!\");\n\n          // Reset answers and comments\n          setAnswers({});\n          setComments({});\n\n          // Reset page to 0 and refetch visits data\n          setPage(0);\n          refetchVisits({ fetchPolicy: \"network-only\" });\n        } else {\n          toast.error(\n            \"Failed to submit batch: \" + response.data.submitBatch.message\n          );\n        }\n      })\n      .catch((error) => {\n        setSubmitting(false);\n        console.error(\"Error submitting batch:\", error);\n        toast.error(\"An error occurred while submitting the batch.\");\n      });\n  };\n\n  const goBackToOverview = () => {\n    setSelectedPractice(null);\n    setPage(0);\n    setAnswers({});\n    setComments({});\n  };\n\n  const handleImageClick = (formId, imageId) => {\n    setSelectedImage(\n      `${process.env.REACT_APP_API_URL}/image/${formId}/${imageId}`\n    );\n  };\n\n  const closeImageModal = () => {\n    setSelectedImage(null);\n  };\n\n  const handleImageLoad = (imageId) => {\n    setLoadingImages((prev) => ({ ...prev, [imageId]: false }));\n  };\n\n  const handleImageError = (imageId) => {\n    setLoadingImages((prev) => ({ ...prev, [imageId]: false }));\n  };\n\n  const handleDownloadReport = () => {\n    if (!activeProject) {\n      toast.error(\"No project selected.\");\n      return;\n    }\n\n    setDownloadingReport(true);\n    generateFarmVisitReport({ variables: { projectId: activeProject } })\n      .then((response) => {\n        const { generateFarmVisitReport } = response.data;\n        if (\n          generateFarmVisitReport.status === 200 &&\n          generateFarmVisitReport.file\n        ) {\n          const base64Data = generateFarmVisitReport.file.split(\",\")[1]; // Removing the data URI prefix\n          const blob = base64ToBlob(\n            base64Data,\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n          );\n          saveAs(blob, \"farm_visit_statistics.xlsx\");\n          toast.success(\"Download started.\");\n        } else {\n          toast.error(\n            generateFarmVisitReport.message || \"Failed to generate report.\"\n          );\n        }\n        setDownloadingReport(false);\n      })\n      .catch((error) => {\n        console.error(\"Error generating report:\", error);\n        toast.error(\"An error occurred while generating the report.\");\n        setDownloadingReport(false);\n      });\n  };\n\n  const base64ToBlob = (base64Data, contentType) => {\n    const byteCharacters = atob(base64Data);\n    const byteArrays = [];\n    for (let offset = 0; offset < byteCharacters.length; offset += 512) {\n      const slice = byteCharacters.slice(offset, offset + 512);\n      const byteNumbers = new Array(slice.length);\n      for (let i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n      const byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n    return new Blob(byteArrays, { type: contentType });\n  };\n\n  if (statsLoading) return <LoadingScreen />;\n\n  if (statsError)\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          height: \"100vh\",\n        }}\n      >\n        <Typography color=\"error\">Error loading data</Typography>\n      </div>\n    );\n\n  const { totalSampledVisits, totalReviewed, remainingVisits } =\n    statsData.getSampledVisitsStats;\n\n  return (\n    <div className=\"farm-visit-app\">\n      {!selectedPractice ? (\n        <>\n          <div className=\"dashboard-header\">\n            <div className=\"dashboard-info\">\n              <p>\n                <strong>Total Sampled Visits:</strong> {totalSampledVisits}\n              </p>\n              <p>\n                <strong>Total Reviewed:</strong> {totalReviewed}\n              </p>\n              <p>\n                <strong>Remaining Visits:</strong> {remainingVisits}\n              </p>\n            </div>\n            <button\n              className=\"download-button\"\n              onClick={handleDownloadReport}\n              disabled={downloadingReport}\n            >\n              {downloadingReport ? \"Downloading...\" : \"Download Report\"}\n            </button>\n          </div>\n          <h1 className=\"dashboard-title\">Choose Adoption Method to Review</h1>\n          <div className=\"practices-container\">\n            {practices.map((practice) => (\n              <PracticeCard\n                key={practice.name}\n                practice={practice}\n                projectId={activeProject}\n                onSelect={handleSelectPractice}\n              />\n            ))}\n          </div>\n        </>\n      ) : (\n        <>\n          <div className=\"indicator\">\n            <span onClick={goBackToOverview} className=\"indicator-link\">\n              Back to Practice Overview\n            </span>\n          </div>\n          <h2 className=\"sub-header\">Reviewing {selectedPractice.name}</h2>\n          {visitsLoading && <LoadingScreen />}\n          {visitsError && <ErrorMessage message={visitsError.message} />}\n          {!visitsLoading && !visitsError && filteredVisits.length > 0 && (\n            <>\n              <div className=\"visit-list\">\n                {filteredVisits\n                  .slice(page * pageSize, (page + 1) * pageSize)\n                  .map((visit) => {\n                    const bestPractice = visit.BestPractices.find(\n                      (bp) => bp.practice_name === selectedPractice.name\n                    );\n\n                    const [formId, imageId] =\n                      bestPractice?.image_url?.split(\"/\").slice(-2) || [];\n\n                    return (\n                      <div key={visit.visit_id} className=\"visit-item\">\n                        <div className=\"visit-details\">\n                          <p>\n                            <strong>Farmer PIMA ID:</strong>{\" \"}\n                            {visit.farmer_pima_id}\n                          </p>\n                          <p>\n                            <strong>Farmer TNS ID:</strong>{\" \"}\n                            {visit.farmer_tns_id}\n                          </p>\n                          <p>\n                            <strong>Date Visited:</strong> {visit.date_visited}\n                          </p>\n                          <p>\n                            <strong>Farmer Name:</strong> {visit.farmer_name}\n                          </p>\n                          <p>\n                            <strong>Farmer Trainer:</strong>{\" \"}\n                            {visit.farmer_trainer}\n                          </p>\n                          <p>\n                            <strong>Question:</strong>{\" \"}\n                            {bestPractice?.question || \"N/A\"}\n                          </p>\n                          <p>\n                            <strong>Observation:</strong>{\" \"}\n                            {bestPractice?.answer || \"N/A\"}\n                          </p>\n                        </div>\n\n                        <div className=\"visit-image\">\n                          {loadingImages[imageId] && <LoadingSpinner />}\n                          <img\n                            src={\n                              bestPractice?.image_url\n                                ? `${process.env.REACT_APP_API_URL}/image/${formId}/${imageId}`\n                                : placeholderImageUrl\n                            }\n                            alt=\"Farm Visit\"\n                            style={{\n                              display: loadingImages[imageId]\n                                ? \"none\"\n                                : \"block\",\n                            }}\n                            onLoad={() => handleImageLoad(imageId)}\n                            onError={() => handleImageError(imageId)}\n                            onClick={() => handleImageClick(formId, imageId)}\n                          />\n                        </div>\n\n                        <div className=\"answer-field\">\n                          <label>Correct Answer?</label>\n                          <select\n                            value={answers[visit.visit_id] || \"\"}\n                            onChange={(e) =>\n                              handleAnswerChange(visit.visit_id, e.target.value)\n                            }\n                          >\n                            <option value=\"\">-- Select --</option>\n                            <option value=\"Yes\">Yes</option>\n                            <option value=\"No\">No</option>\n                            <option value=\"Unclear\">Unclear</option>\n                          </select>\n                        </div>\n\n                        <div className=\"comment-field\">\n                          <label>Comments:</label>\n                          <textarea\n                            value={comments[visit.visit_id] || \"\"}\n                            onChange={(e) =>\n                              handleCommentsChange(\n                                visit.visit_id,\n                                e.target.value\n                              )\n                            }\n                            placeholder={\n                              answers[visit.visit_id] === \"No\"\n                                ? \"Required is answer is 'No'\"\n                                : \"Required\"\n                            }\n                            required={answers[visit.visit_id] === \"No\"}\n                            className={\n                              answers[visit.visit_id] === \"No\" &&\n                              !comments[visit.visit_id]\n                                ? \"error\" // Apply a style to indicate error\n                                : \"\"\n                            }\n                          />\n                          {answers[visit.visit_id] === \"No\" &&\n                            !comments[visit.visit_id] && (\n                              <p className=\"error-message\">\n                                Comment is required for 'No' answers\n                              </p>\n                            )}\n                        </div>\n                      </div>\n                    );\n                  })}\n              </div>\n              <div className=\"pagination-info\">\n                Reviewing{\" \"}\n                {Math.min((page + 1) * pageSize, filteredVisits.length)} of{\" \"}\n                {filteredVisits.length} records\n              </div>\n\n              <div className=\"pagination-controls\">\n                <button disabled={page === 0} onClick={() => setPage(page - 1)}>\n                  Previous\n                </button>\n                <span className=\"current-page\">\n                  Page {page + 1} of{\" \"}\n                  {Math.ceil(filteredVisits.length / pageSize)}\n                </span>\n                <button\n                  disabled={\n                    page >= Math.floor(filteredVisits.length / pageSize)\n                  }\n                  onClick={() => setPage(page + 1)}\n                >\n                  Next\n                </button>\n              </div>\n\n              <button\n                className=\"submit-button\"\n                onClick={handleSubmitBatch}\n                disabled={submitting} // Disable the button while submitting\n              >\n                {submitting ? \"Submitting...\" : \"Submit Batch\"}\n              </button>\n            </>\n          )}\n          {selectedImage && (\n            <div className=\"image-modal\" onClick={closeImageModal}>\n              <img src={selectedImage} alt=\"Fullscreen Farm Visit\" />\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nconst PracticeCard = ({ practice, onSelect, projectId }) => {\n  const { data, loading, error } = useQuery(GET_BEST_PRACTICE_STATS, {\n    variables: { projectId, practiceName: practice.name },\n  });\n\n  return (\n    <div className=\"practice-card\" onClick={() => onSelect(practice)}>\n      <h3>{practice.name}</h3>\n      {loading && <LoadingSpinner />}\n      {error && <ErrorMessage message={error.message} />}\n      {!loading && !error && (\n        <div className=\"progress\">\n          <p>\n            <strong>Reviewed:</strong>{\" \"}\n            {data?.getBestPracticeReviewStats?.reviewedVisits || 0}\n          </p>\n          <p>\n            <strong>Remaining:</strong>{\" \"}\n            {data?.getBestPracticeReviewStats?.remainingVisits || 0}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FarmVisitApp;\n","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n"],"names":["practices","name","LoadingSpinner","_jsxs","className","children","_jsx","ErrorMessage","_ref","message","onClick","window","location","reload","PracticeCard","_ref2","_data$getBestPractice","_data$getBestPractice2","practice","onSelect","projectId","data","loading","error","useQuery","GET_BEST_PRACTICE_STATS","variables","practiceName","getBestPracticeReviewStats","reviewedVisits","remainingVisits","FarmVisitApp","activeProject","userId","useOutletContext","selectedPractice","setSelectedPractice","useState","page","setPage","visits","setVisits","filteredVisits","setFilteredVisits","answers","setAnswers","comments","setComments","selectedImage","setSelectedImage","loadingImages","setLoadingImages","submitting","setSubmitting","downloadingReport","setDownloadingReport","statsData","statsLoading","statsError","GET_SAMPLED_VISITS_STATS","visitsData","visitsLoading","visitsError","refetch","refetchVisits","GET_PAGINATED_REVIEWS","pageSize","skip","fetchPolicy","submitBatchMutation","useMutation","SUBMIT_BATCH","generateFarmVisitReport","useLazyQuery","GENERATE_FARM_VISIT_REPORT","useEffect","getPaginatedReviews","filtered","filter","visit","BestPractices","some","bp","practice_name","handleSelectPractice","base64ToBlob","base64Data","contentType","byteCharacters","atob","byteArrays","offset","length","slice","byteNumbers","Array","i","charCodeAt","byteArray","Uint8Array","push","Blob","type","LoadingScreen","style","display","justifyContent","alignItems","height","Typography","color","totalSampledVisits","totalReviewed","getSampledVisitsStats","_Fragment","goBackToOverview","map","_bestPractice$image_u","bestPractice","find","formId","imageId","image_url","split","farmer_pima_id","farmer_tns_id","date_visited","farmer_name","farmer_trainer","question","answer","src","alt","onLoad","prev","handleImageLoad","onError","handleImageError","handleImageClick","value","visit_id","onChange","e","handleAnswerChange","visitId","target","handleCommentsChange","placeholder","required","Math","min","disabled","ceil","floor","handleSubmitBatch","currentPageVisits","allFilled","every","allCommentsFilled","toast","batchInput","practice_id","correct_answer","toLowerCase","comment","user_id","input","then","response","submitBatch","success","catch","console","closeImageModal","handleDownloadReport","status","file","blob","saveAs","b","a","autoBom","warn","test","c","d","XMLHttpRequest","open","responseType","onload","g","onerror","send","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","f","self","global","navigator","userAgent","HTMLAnchorElement","prototype","h","URL","webkitURL","j","createElement","download","rel","href","origin","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","HTMLElement","safari","FileReader","k","onloadend","result","replace","readAsDataURL","l","m","module","exports"],"sourceRoot":""}